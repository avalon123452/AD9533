
AD9533.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dae0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  0800dc70  0800dc70  0001dc70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0b4  0800e0b4  000202cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e0b4  0800e0b4  0001e0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e0bc  0800e0bc  000202cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e0bc  0800e0bc  0001e0bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e0c0  0800e0c0  0001e0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  0800e0c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202cc  2**0
                  CONTENTS
 10 .bss          00001cd8  200002cc  200002cc  000202cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001fa4  20001fa4  000202cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016f05  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003657  00000000  00000000  00037201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001210  00000000  00000000  0003a858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010c0  00000000  00000000  0003ba68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024d5b  00000000  00000000  0003cb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017edd  00000000  00000000  00061883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb4aa  00000000  00000000  00079760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00144c0a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005cb8  00000000  00000000  00144c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002cc 	.word	0x200002cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dc58 	.word	0x0800dc58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d0 	.word	0x200002d0
 80001cc:	0800dc58 	.word	0x0800dc58

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <ad5933_init>:
const int32_t pow_2_27 = 134217728ul;      // 2 to the power of 27

/******************************************************************************/
/************************ Functions Definitions *******************************/
/******************************************************************************/
void ad5933_init(ad5933_t *dev,I2C_HandleTypeDef *i2c, uint32_t sys_clk, uint8_t clk_source, uint8_t gain, uint8_t range) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
 8000ef8:	70fb      	strb	r3, [r7, #3]
	dev->hi2c = i2c;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	68ba      	ldr	r2, [r7, #8]
 8000efe:	601a      	str	r2, [r3, #0]
	dev->current_sys_clk = sys_clk;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	605a      	str	r2, [r3, #4]
	dev->current_clock_source = clk_source;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	78fa      	ldrb	r2, [r7, #3]
 8000f0a:	721a      	strb	r2, [r3, #8]
	dev->current_gain = gain;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	7e3a      	ldrb	r2, [r7, #24]
 8000f10:	725a      	strb	r2, [r3, #9]
	dev->current_range = range;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	7f3a      	ldrb	r2, [r7, #28]
 8000f16:	729a      	strb	r2, [r3, #10]
	ad5933_setSysClk(dev, clk_source, sys_clk);
 8000f18:	78fb      	ldrb	r3, [r7, #3]
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	68f8      	ldr	r0, [r7, #12]
 8000f20:	f000 f89a 	bl	8001058 <ad5933_setSysClk>
	ad5933_setRangeNGain(dev, range, gain);
 8000f24:	7e3a      	ldrb	r2, [r7, #24]
 8000f26:	7f3b      	ldrb	r3, [r7, #28]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	68f8      	ldr	r0, [r7, #12]
 8000f2c:	f000 f8b6 	bl	800109c <ad5933_setRangeNGain>
	ad5933_reset(dev);
 8000f30:	68f8      	ldr	r0, [r7, #12]
 8000f32:	f000 f87d 	bl	8001030 <ad5933_reset>
}
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <ad5933_setReg>:

void ad5933_setReg(ad5933_t *dev, uint8_t regAddr, uint32_t val, uint8_t bytesLength){
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b088      	sub	sp, #32
 8000f42:	af02      	add	r7, sp, #8
 8000f44:	60f8      	str	r0, [r7, #12]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	72fb      	strb	r3, [r7, #11]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	72bb      	strb	r3, [r7, #10]
	uint8_t writeData[2]={0};
 8000f52:	2300      	movs	r3, #0
 8000f54:	82bb      	strh	r3, [r7, #20]
	for (uint8_t i= 0; i < bytesLength; i++) {
 8000f56:	2300      	movs	r3, #0
 8000f58:	75fb      	strb	r3, [r7, #23]
 8000f5a:	e01e      	b.n	8000f9a <ad5933_setReg+0x5c>
		writeData[0]= regAddr + bytesLength - i -1;
 8000f5c:	7afa      	ldrb	r2, [r7, #11]
 8000f5e:	7abb      	ldrb	r3, [r7, #10]
 8000f60:	4413      	add	r3, r2
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	7dfb      	ldrb	r3, [r7, #23]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	753b      	strb	r3, [r7, #20]
		writeData[1]= (uint8_t)((val>> (i *8))& 0xFF);
 8000f70:	7dfb      	ldrb	r3, [r7, #23]
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	fa22 f303 	lsr.w	r3, r2, r3
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	757b      	strb	r3, [r7, #21]
		HAL_I2C_Master_Transmit(dev->hi2c, AD5933_ADDRESS << 1, writeData, 2, AD5933_TIMEOUT);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	6818      	ldr	r0, [r3, #0]
 8000f82:	f107 0214 	add.w	r2, r7, #20
 8000f86:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	211a      	movs	r1, #26
 8000f90:	f001 fa18 	bl	80023c4 <HAL_I2C_Master_Transmit>
	for (uint8_t i= 0; i < bytesLength; i++) {
 8000f94:	7dfb      	ldrb	r3, [r7, #23]
 8000f96:	3301      	adds	r3, #1
 8000f98:	75fb      	strb	r3, [r7, #23]
 8000f9a:	7dfa      	ldrb	r2, [r7, #23]
 8000f9c:	7abb      	ldrb	r3, [r7, #10]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d3dc      	bcc.n	8000f5c <ad5933_setReg+0x1e>
	}
}
 8000fa2:	bf00      	nop
 8000fa4:	bf00      	nop
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <ad5933_getReg>:

uint32_t ad5933_getReg(ad5933_t *dev, uint8_t regAddr, uint8_t bytesLength){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	70fb      	strb	r3, [r7, #3]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	70bb      	strb	r3, [r7, #2]
	uint32_t val=0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
	uint8_t writeData[2]={0};
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	823b      	strh	r3, [r7, #16]
	uint8_t readData=0xFF;
 8000fc4:	23ff      	movs	r3, #255	; 0xff
 8000fc6:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i= 0; i < bytesLength; i++) {
 8000fc8:	2300      	movs	r3, #0
 8000fca:	74fb      	strb	r3, [r7, #19]
 8000fcc:	e027      	b.n	800101e <ad5933_getReg+0x72>
		writeData[0]= AD5933_ADDR_POINTER;
 8000fce:	23b0      	movs	r3, #176	; 0xb0
 8000fd0:	743b      	strb	r3, [r7, #16]
		writeData[1]= regAddr + i;
 8000fd2:	78fa      	ldrb	r2, [r7, #3]
 8000fd4:	7cfb      	ldrb	r3, [r7, #19]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(dev->hi2c, AD5933_ADDRESS << 1, writeData, 2, AD5933_TIMEOUT);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6818      	ldr	r0, [r3, #0]
 8000fe0:	f107 0210 	add.w	r2, r7, #16
 8000fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2302      	movs	r3, #2
 8000fec:	211a      	movs	r1, #26
 8000fee:	f001 f9e9 	bl	80023c4 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(dev->hi2c, AD5933_ADDRESS << 1, &readData, 1, AD5933_TIMEOUT);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6818      	ldr	r0, [r3, #0]
 8000ff6:	f107 020f 	add.w	r2, r7, #15
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	211a      	movs	r1, #26
 8001004:	f001 fadc 	bl	80025c0 <HAL_I2C_Master_Receive>
		val = val <<8;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	617b      	str	r3, [r7, #20]
		val |= readData;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	461a      	mov	r2, r3
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	4313      	orrs	r3, r2
 8001016:	617b      	str	r3, [r7, #20]
	for (uint8_t i= 0; i < bytesLength; i++) {
 8001018:	7cfb      	ldrb	r3, [r7, #19]
 800101a:	3301      	adds	r3, #1
 800101c:	74fb      	strb	r3, [r7, #19]
 800101e:	7cfa      	ldrb	r2, [r7, #19]
 8001020:	78bb      	ldrb	r3, [r7, #2]
 8001022:	429a      	cmp	r2, r3
 8001024:	d3d3      	bcc.n	8000fce <ad5933_getReg+0x22>
	}
	return val;
 8001026:	697b      	ldr	r3, [r7, #20]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <ad5933_reset>:

void ad5933_reset(ad5933_t *dev) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	ad5933_setReg(dev,AD5933_REG_CONTROL_LB,AD5933_CONTROL_RESET | dev->current_clock_source,1);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	7a1b      	ldrb	r3, [r3, #8]
 800103c:	f043 0310 	orr.w	r3, r3, #16
 8001040:	b2db      	uxtb	r3, r3
 8001042:	461a      	mov	r2, r3
 8001044:	2301      	movs	r3, #1
 8001046:	2181      	movs	r1, #129	; 0x81
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ff78 	bl	8000f3e <ad5933_setReg>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <ad5933_setSysClk>:

void ad5933_setSysClk(ad5933_t *dev, uint8_t clkSrc,uint32_t extClkFreq) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	460b      	mov	r3, r1
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	72fb      	strb	r3, [r7, #11]
	dev->current_clock_source = clkSrc;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	7afa      	ldrb	r2, [r7, #11]
 800106a:	721a      	strb	r2, [r3, #8]
	if (clkSrc == AD5933_CONTROL_EXT_SYSCLK) {
 800106c:	7afb      	ldrb	r3, [r7, #11]
 800106e:	2b08      	cmp	r3, #8
 8001070:	d103      	bne.n	800107a <ad5933_setSysClk+0x22>
		dev->current_sys_clk = extClkFreq;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	e002      	b.n	8001080 <ad5933_setSysClk+0x28>
	}
	else {
		dev->current_sys_clk = AD5933_INTERNAL_SYS_CLK;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	4a06      	ldr	r2, [pc, #24]	; (8001098 <ad5933_setSysClk+0x40>)
 800107e:	605a      	str	r2, [r3, #4]
	}
	ad5933_setReg(dev,AD5933_REG_CONTROL_LB,dev->current_clock_source,1);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	7a1b      	ldrb	r3, [r3, #8]
 8001084:	461a      	mov	r2, r3
 8001086:	2301      	movs	r3, #1
 8001088:	2181      	movs	r1, #129	; 0x81
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	f7ff ff57 	bl	8000f3e <ad5933_setReg>
}
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	00f42400 	.word	0x00f42400

0800109c <ad5933_setRangeNGain>:

void ad5933_setRangeNGain(ad5933_t *dev,uint8_t range,uint8_t gain) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	70fb      	strb	r3, [r7, #3]
 80010a8:	4613      	mov	r3, r2
 80010aa:	70bb      	strb	r3, [r7, #2]
	ad5933_setReg(dev,
				  AD5933_REG_CONTROL_HB,
				  AD5933_CONTROL_FUNCTION(AD5933_FUNCTION_NOP) |
 80010ac:	78fb      	ldrb	r3, [r7, #3]
 80010ae:	005a      	lsls	r2, r3, #1
				  AD5933_CONTROL_RANGE(range) |
				  AD5933_CONTROL_PGA_GAIN(gain),
 80010b0:	78bb      	ldrb	r3, [r7, #2]
				  AD5933_CONTROL_RANGE(range) |
 80010b2:	4313      	orrs	r3, r2
	ad5933_setReg(dev,
 80010b4:	461a      	mov	r2, r3
 80010b6:	2301      	movs	r3, #1
 80010b8:	2180      	movs	r1, #128	; 0x80
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ff3f 	bl	8000f3e <ad5933_setReg>
				  1);
	/* Store the last settings made to range and gain. */
	dev->current_range = range;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	78fa      	ldrb	r2, [r7, #3]
 80010c4:	729a      	strb	r2, [r3, #10]
	dev->current_gain = gain;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	78ba      	ldrb	r2, [r7, #2]
 80010ca:	725a      	strb	r2, [r3, #9]
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <ad5933_configSweep>:

void ad5933_configSweep(ad5933_t *dev,
			 uint32_t  start_freq,
			 uint32_t  inc_freq,
			 uint16_t inc_num)
{
 80010d4:	b5b0      	push	{r4, r5, r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
 80010e0:	807b      	strh	r3, [r7, #2]
	uint32_t start_freq_reg = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
	uint32_t inc_freq_reg = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
	uint16_t inc_num_reg = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	83fb      	strh	r3, [r7, #30]

	/* Ensure that incNum is a valid data. */
	if(inc_num > AD5933_MAX_INC_NUM) {
 80010ee:	887b      	ldrh	r3, [r7, #2]
 80010f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010f4:	d303      	bcc.n	80010fe <ad5933_configSweep+0x2a>
		inc_num_reg = AD5933_MAX_INC_NUM;
 80010f6:	f240 13ff 	movw	r3, #511	; 0x1ff
 80010fa:	83fb      	strh	r3, [r7, #30]
 80010fc:	e001      	b.n	8001102 <ad5933_configSweep+0x2e>
	} else {
		inc_num_reg = inc_num;
 80010fe:	887b      	ldrh	r3, [r7, #2]
 8001100:	83fb      	strh	r3, [r7, #30]
	}

	/* Convert users start frequency to binary code. */
	start_freq_reg = (uint32_t)((double)start_freq * 4 / dev->current_sys_clk *
 8001102:	68b8      	ldr	r0, [r7, #8]
 8001104:	f7ff f9fe 	bl	8000504 <__aeabi_ui2d>
 8001108:	f04f 0200 	mov.w	r2, #0
 800110c:	4b36      	ldr	r3, [pc, #216]	; (80011e8 <ad5933_configSweep+0x114>)
 800110e:	f7ff fa73 	bl	80005f8 <__aeabi_dmul>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4614      	mov	r4, r2
 8001118:	461d      	mov	r5, r3
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff f9f0 	bl	8000504 <__aeabi_ui2d>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4620      	mov	r0, r4
 800112a:	4629      	mov	r1, r5
 800112c:	f7ff fb8e 	bl	800084c <__aeabi_ddiv>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4614      	mov	r4, r2
 8001136:	461d      	mov	r5, r3
 8001138:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff f9f1 	bl	8000524 <__aeabi_i2d>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	4620      	mov	r0, r4
 8001148:	4629      	mov	r1, r5
 800114a:	f7ff fa55 	bl	80005f8 <__aeabi_dmul>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4610      	mov	r0, r2
 8001154:	4619      	mov	r1, r3
 8001156:	f7ff fd27 	bl	8000ba8 <__aeabi_d2uiz>
 800115a:	4603      	mov	r3, r0
 800115c:	61bb      	str	r3, [r7, #24]
				    pow_2_27);

	/* Convert users increment frequency to binary code. */
	inc_freq_reg = (uint32_t)((double)inc_freq * 4 / dev->current_sys_clk *
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff f9d0 	bl	8000504 <__aeabi_ui2d>
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <ad5933_configSweep+0x114>)
 800116a:	f7ff fa45 	bl	80005f8 <__aeabi_dmul>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4614      	mov	r4, r2
 8001174:	461d      	mov	r5, r3
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f9c2 	bl	8000504 <__aeabi_ui2d>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4620      	mov	r0, r4
 8001186:	4629      	mov	r1, r5
 8001188:	f7ff fb60 	bl	800084c <__aeabi_ddiv>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4614      	mov	r4, r2
 8001192:	461d      	mov	r5, r3
 8001194:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f9c3 	bl	8000524 <__aeabi_i2d>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4620      	mov	r0, r4
 80011a4:	4629      	mov	r1, r5
 80011a6:	f7ff fa27 	bl	80005f8 <__aeabi_dmul>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4610      	mov	r0, r2
 80011b0:	4619      	mov	r1, r3
 80011b2:	f7ff fcf9 	bl	8000ba8 <__aeabi_d2uiz>
 80011b6:	4603      	mov	r3, r0
 80011b8:	617b      	str	r3, [r7, #20]
				  pow_2_27);

	/* Configure the device with the sweep parameters. */
	ad5933_setReg(dev,
 80011ba:	2303      	movs	r3, #3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	2182      	movs	r1, #130	; 0x82
 80011c0:	68f8      	ldr	r0, [r7, #12]
 80011c2:	f7ff febc 	bl	8000f3e <ad5933_setReg>
				  AD5933_REG_FREQ_START,
				  start_freq_reg,
				  3);
	ad5933_setReg(dev,
 80011c6:	2303      	movs	r3, #3
 80011c8:	697a      	ldr	r2, [r7, #20]
 80011ca:	2185      	movs	r1, #133	; 0x85
 80011cc:	68f8      	ldr	r0, [r7, #12]
 80011ce:	f7ff feb6 	bl	8000f3e <ad5933_setReg>
				  AD5933_REG_FREQ_INC,
				  inc_freq_reg,
				  3);
	ad5933_setReg(dev,
 80011d2:	8bfa      	ldrh	r2, [r7, #30]
 80011d4:	2302      	movs	r3, #2
 80011d6:	2188      	movs	r1, #136	; 0x88
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	f7ff feb0 	bl	8000f3e <ad5933_setReg>
				  AD5933_REG_INC_NUM,
				  inc_num_reg,
				  2);
}
 80011de:	bf00      	nop
 80011e0:	3720      	adds	r7, #32
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bdb0      	pop	{r4, r5, r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40100000 	.word	0x40100000

080011ec <ad5933_startSweep>:

void ad5933_startSweep(ad5933_t *dev)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	ad5933_control(dev, AD5933_FUNCTION_STANDBY);
 80011f4:	210b      	movs	r1, #11
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 f82c 	bl	8001254 <ad5933_control>
	ad5933_control(dev, AD5933_FUNCTION_INIT_START_FREQ);
 80011fc:	2101      	movs	r1, #1
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 f828 	bl	8001254 <ad5933_control>
	ad5933_control(dev, AD5933_FUNCTION_START_SWEEP);
 8001204:	2102      	movs	r1, #2
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f000 f824 	bl	8001254 <ad5933_control>
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <ad5933_getData>:

void ad5933_getData(ad5933_t *dev,
		     short *imag_data,
		     short *real_data)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
	ad5933_wait(dev, AD5933_STAT_DATA_VALID);
 8001220:	2102      	movs	r1, #2
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	f000 f84d 	bl	80012c2 <ad5933_wait>

	*real_data = ad5933_getReg(dev,
 8001228:	2202      	movs	r2, #2
 800122a:	2194      	movs	r1, #148	; 0x94
 800122c:	68f8      	ldr	r0, [r7, #12]
 800122e:	f7ff febd 	bl	8000fac <ad5933_getReg>
 8001232:	4603      	mov	r3, r0
 8001234:	b21a      	sxth	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	801a      	strh	r2, [r3, #0]
					       AD5933_REG_REAL_DATA,
					       2);
	*imag_data = ad5933_getReg(dev,
 800123a:	2202      	movs	r2, #2
 800123c:	2196      	movs	r1, #150	; 0x96
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f7ff feb4 	bl	8000fac <ad5933_getReg>
 8001244:	4603      	mov	r3, r0
 8001246:	b21a      	sxth	r2, r3
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	801a      	strh	r2, [r3, #0]
					       AD5933_REG_IMAG_DATA,
					       2);
}
 800124c:	bf00      	nop
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <ad5933_control>:
	}
	ad5933_control(dev, AD5933_FUNCTION_STANDBY);
}

void ad5933_control(ad5933_t *dev,uint8_t function)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	70fb      	strb	r3, [r7, #3]
	ad5933_setReg(dev,
				  AD5933_REG_CONTROL_HB,
				  AD5933_CONTROL_FUNCTION(function) |
 8001260:	78fb      	ldrb	r3, [r7, #3]
 8001262:	011a      	lsls	r2, r3, #4
				  AD5933_CONTROL_RANGE(dev->current_range) |
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	7a9b      	ldrb	r3, [r3, #10]
 8001268:	005b      	lsls	r3, r3, #1
				  AD5933_CONTROL_FUNCTION(function) |
 800126a:	4313      	orrs	r3, r2
				  AD5933_CONTROL_PGA_GAIN(dev->current_gain),
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	7a52      	ldrb	r2, [r2, #9]
				  AD5933_CONTROL_RANGE(dev->current_range) |
 8001270:	4313      	orrs	r3, r2
	ad5933_setReg(dev,
 8001272:	461a      	mov	r2, r3
 8001274:	2301      	movs	r3, #1
 8001276:	2180      	movs	r1, #128	; 0x80
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff fe60 	bl	8000f3e <ad5933_setReg>
				  1);
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <ad5933_setSettlingTime>:
}

void ad5933_setSettlingTime(ad5933_t *dev,
			      uint8_t multiplier,
			      uint16_t number_cycles)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	460b      	mov	r3, r1
 8001290:	70fb      	strb	r3, [r7, #3]
 8001292:	4613      	mov	r3, r2
 8001294:	803b      	strh	r3, [r7, #0]
	if ((multiplier != AD5933_SETTLING_X2) && (multiplier != AD5933_SETTLING_X4))
 8001296:	78fb      	ldrb	r3, [r7, #3]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d004      	beq.n	80012a6 <ad5933_setSettlingTime+0x20>
 800129c:	78fb      	ldrb	r3, [r7, #3]
 800129e:	2b03      	cmp	r3, #3
 80012a0:	d001      	beq.n	80012a6 <ad5933_setSettlingTime+0x20>
		multiplier = AD5933_SETTLING_X1;
 80012a2:	2300      	movs	r3, #0
 80012a4:	70fb      	strb	r3, [r7, #3]

	ad5933_setReg(dev,
				  AD5933_REG_SETTLING_CYCLES,
				  number_cycles | (multiplier << 9),
 80012a6:	883a      	ldrh	r2, [r7, #0]
 80012a8:	78fb      	ldrb	r3, [r7, #3]
 80012aa:	025b      	lsls	r3, r3, #9
 80012ac:	4313      	orrs	r3, r2
	ad5933_setReg(dev,
 80012ae:	461a      	mov	r2, r3
 80012b0:	2302      	movs	r3, #2
 80012b2:	218a      	movs	r1, #138	; 0x8a
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff fe42 	bl	8000f3e <ad5933_setReg>
				  2);
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <ad5933_wait>:

void ad5933_wait(ad5933_t *dev,uint8_t mask)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b084      	sub	sp, #16
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	460b      	mov	r3, r1
 80012cc:	70fb      	strb	r3, [r7, #3]
	uint8_t status=0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	73fb      	strb	r3, [r7, #15]
	while((status & mask) == 0) {
 80012d2:	e006      	b.n	80012e2 <ad5933_wait+0x20>
		status = ad5933_getReg(dev,
 80012d4:	2201      	movs	r2, #1
 80012d6:	218f      	movs	r1, #143	; 0x8f
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff fe67 	bl	8000fac <ad5933_getReg>
 80012de:	4603      	mov	r3, r0
 80012e0:	73fb      	strb	r3, [r7, #15]
	while((status & mask) == 0) {
 80012e2:	7bfa      	ldrb	r2, [r7, #15]
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	4013      	ands	r3, r2
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f2      	beq.n	80012d4 <ad5933_wait+0x12>
						   AD5933_REG_STATUS,
						   1);
	}
}
 80012ee:	bf00      	nop
 80012f0:	bf00      	nop
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <ad5933_repeatFreq>:

void ad5933_repeatFreq(ad5933_t *dev,
		  int16_t *imag_data,
		  int16_t *real_data)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
	ad5933_control(dev, AD5933_FUNCTION_REPEAT_FREQ);
 8001304:	2104      	movs	r1, #4
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	f7ff ffa4 	bl	8001254 <ad5933_control>
	ad5933_getData(dev, imag_data, real_data);
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	68b9      	ldr	r1, [r7, #8]
 8001310:	68f8      	ldr	r0, [r7, #12]
 8001312:	f7ff ff7f 	bl	8001214 <ad5933_getData>
}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b0a0      	sub	sp, #128	; 0x80
 8001324:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	ad5933_t dev1={0};
 8001326:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
	float temp=0;
 8001332:	f04f 0300 	mov.w	r3, #0
 8001336:	677b      	str	r3, [r7, #116]	; 0x74
	char msg[100]={0};
 8001338:	2300      	movs	r3, #0
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	f107 0308 	add.w	r3, r7, #8
 8001340:	2260      	movs	r2, #96	; 0x60
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f009 fd9b 	bl	800ae80 <memset>
	int16_t real=0, imag=0;
 800134a:	2300      	movs	r3, #0
 800134c:	807b      	strh	r3, [r7, #2]
 800134e:	2300      	movs	r3, #0
 8001350:	803b      	strh	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001352:	f000 fb7f 	bl	8001a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001356:	f000 f879 	bl	800144c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800135a:	f000 f937 	bl	80015cc <MX_GPIO_Init>
  MX_I2C1_Init();
 800135e:	f000 f8dd 	bl	800151c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001362:	f000 f909 	bl	8001578 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8001366:	f009 f831 	bl	800a3cc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  ad5933_init(&dev1, &hi2c1, 16000000, AD5933_CONTROL_EXT_SYSCLK , AD5933_GAIN_X1, AD5933_RANGE_2000mVpp);
 800136a:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800136e:	2300      	movs	r3, #0
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	2301      	movs	r3, #1
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	2308      	movs	r3, #8
 8001378:	4a1a      	ldr	r2, [pc, #104]	; (80013e4 <main+0xc4>)
 800137a:	491b      	ldr	r1, [pc, #108]	; (80013e8 <main+0xc8>)
 800137c:	f7ff fdb6 	bl	8000eec <ad5933_init>
  ad5933_configSweep(&dev1, 30000, 10, 10);
 8001380:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8001384:	230a      	movs	r3, #10
 8001386:	220a      	movs	r2, #10
 8001388:	f247 5130 	movw	r1, #30000	; 0x7530
 800138c:	f7ff fea2 	bl	80010d4 <ad5933_configSweep>
  ad5933_setSettlingTime(&dev1, AD5933_SETTLING_X1, 15);
 8001390:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001394:	220f      	movs	r2, #15
 8001396:	2100      	movs	r1, #0
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff74 	bl	8001286 <ad5933_setSettlingTime>
  ad5933_startSweep(&dev1);
 800139e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff ff22 	bl	80011ec <ad5933_startSweep>
//	  dmsg(msg);
//	  memset(msg,0,sizeof(msg));
//	  sprintf(msg,"num: %lx",ad5933_getReg(&dev1,AD5933_REG_SETTLING_CYCLES, 2));
//	  dmsg(msg);

	  ad5933_repeatFreq(&dev1, &imag, &real);
 80013a8:	1cba      	adds	r2, r7, #2
 80013aa:	4639      	mov	r1, r7
 80013ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ffa1 	bl	80012f8 <ad5933_repeatFreq>
	  memset(msg,0,sizeof(msg));
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	2264      	movs	r2, #100	; 0x64
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f009 fd5f 	bl	800ae80 <memset>
	  sprintf(msg,"%d %d", real, imag);
 80013c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013c6:	461a      	mov	r2, r3
 80013c8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80013cc:	1d38      	adds	r0, r7, #4
 80013ce:	4907      	ldr	r1, [pc, #28]	; (80013ec <main+0xcc>)
 80013d0:	f00a fab8 	bl	800b944 <siprintf>
	  dmsg(msg);
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 f80a 	bl	80013f0 <dmsg>

	  HAL_Delay (10);
 80013dc:	200a      	movs	r0, #10
 80013de:	f000 fbab 	bl	8001b38 <HAL_Delay>
	  ad5933_repeatFreq(&dev1, &imag, &real);
 80013e2:	e7e1      	b.n	80013a8 <main+0x88>
 80013e4:	00f42400 	.word	0x00f42400
 80013e8:	200002e8 	.word	0x200002e8
 80013ec:	0800dc70 	.word	0x0800dc70

080013f0 <dmsg>:
  /* USER CODE END 3 */

}

void dmsg(char *msg)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	char *str = malloc(strlen(msg) + 3);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7fe fee9 	bl	80001d0 <strlen>
 80013fe:	4603      	mov	r3, r0
 8001400:	3303      	adds	r3, #3
 8001402:	4618      	mov	r0, r3
 8001404:	f009 fd34 	bl	800ae70 <malloc>
 8001408:	4603      	mov	r3, r0
 800140a:	60fb      	str	r3, [r7, #12]
	strcpy(str, msg);
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f00a fab8 	bl	800b984 <strcpy>
	strcat(str, "\r\n");
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f7fe fedb 	bl	80001d0 <strlen>
 800141a:	4603      	mov	r3, r0
 800141c:	461a      	mov	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4413      	add	r3, r2
 8001422:	4a09      	ldr	r2, [pc, #36]	; (8001448 <dmsg+0x58>)
 8001424:	8811      	ldrh	r1, [r2, #0]
 8001426:	7892      	ldrb	r2, [r2, #2]
 8001428:	8019      	strh	r1, [r3, #0]
 800142a:	709a      	strb	r2, [r3, #2]
	CDC_Transmit_FS((uint8_t*)str, strlen(str));
 800142c:	68f8      	ldr	r0, [r7, #12]
 800142e:	f7fe fecf 	bl	80001d0 <strlen>
 8001432:	4603      	mov	r3, r0
 8001434:	b29b      	uxth	r3, r3
 8001436:	4619      	mov	r1, r3
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	f009 f885 	bl	800a548 <CDC_Transmit_FS>
}
 800143e:	bf00      	nop
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	0800dc78 	.word	0x0800dc78

0800144c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b094      	sub	sp, #80	; 0x50
 8001450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001452:	f107 0320 	add.w	r3, r7, #32
 8001456:	2230      	movs	r2, #48	; 0x30
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f009 fd10 	bl	800ae80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001470:	2300      	movs	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	4b27      	ldr	r3, [pc, #156]	; (8001514 <SystemClock_Config+0xc8>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	4a26      	ldr	r2, [pc, #152]	; (8001514 <SystemClock_Config+0xc8>)
 800147a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800147e:	6413      	str	r3, [r2, #64]	; 0x40
 8001480:	4b24      	ldr	r3, [pc, #144]	; (8001514 <SystemClock_Config+0xc8>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	4b21      	ldr	r3, [pc, #132]	; (8001518 <SystemClock_Config+0xcc>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a20      	ldr	r2, [pc, #128]	; (8001518 <SystemClock_Config+0xcc>)
 8001496:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <SystemClock_Config+0xcc>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014a8:	2301      	movs	r3, #1
 80014aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b2:	2302      	movs	r3, #2
 80014b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014bc:	2304      	movs	r3, #4
 80014be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80014c0:	2348      	movs	r3, #72	; 0x48
 80014c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014c4:	2302      	movs	r3, #2
 80014c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80014c8:	2303      	movs	r3, #3
 80014ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014cc:	f107 0320 	add.w	r3, r7, #32
 80014d0:	4618      	mov	r0, r3
 80014d2:	f004 fc0b 	bl	8005cec <HAL_RCC_OscConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014dc:	f000 f8ac 	bl	8001638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e0:	230f      	movs	r3, #15
 80014e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e4:	2302      	movs	r3, #2
 80014e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014f6:	f107 030c 	add.w	r3, r7, #12
 80014fa:	2102      	movs	r1, #2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f004 fe6d 	bl	80061dc <HAL_RCC_ClockConfig>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001508:	f000 f896 	bl	8001638 <Error_Handler>
  }
}
 800150c:	bf00      	nop
 800150e:	3750      	adds	r7, #80	; 0x50
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40023800 	.word	0x40023800
 8001518:	40007000 	.word	0x40007000

0800151c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <MX_I2C1_Init+0x50>)
 8001522:	4a13      	ldr	r2, [pc, #76]	; (8001570 <MX_I2C1_Init+0x54>)
 8001524:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <MX_I2C1_Init+0x50>)
 8001528:	4a12      	ldr	r2, [pc, #72]	; (8001574 <MX_I2C1_Init+0x58>)
 800152a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <MX_I2C1_Init+0x50>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <MX_I2C1_Init+0x50>)
 8001534:	2200      	movs	r2, #0
 8001536:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <MX_I2C1_Init+0x50>)
 800153a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800153e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001540:	4b0a      	ldr	r3, [pc, #40]	; (800156c <MX_I2C1_Init+0x50>)
 8001542:	2200      	movs	r2, #0
 8001544:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <MX_I2C1_Init+0x50>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <MX_I2C1_Init+0x50>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <MX_I2C1_Init+0x50>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001558:	4804      	ldr	r0, [pc, #16]	; (800156c <MX_I2C1_Init+0x50>)
 800155a:	f000 fdef 	bl	800213c <HAL_I2C_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001564:	f000 f868 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200002e8 	.word	0x200002e8
 8001570:	40005400 	.word	0x40005400
 8001574:	000186a0 	.word	0x000186a0

08001578 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 800157e:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <MX_USART2_UART_Init+0x50>)
 8001580:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 8001584:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001588:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 800159e:	220c      	movs	r2, #12
 80015a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ae:	4805      	ldr	r0, [pc, #20]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 80015b0:	f005 f834 	bl	800661c <HAL_UART_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015ba:	f000 f83d 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	2000033c 	.word	0x2000033c
 80015c8:	40004400 	.word	0x40004400

080015cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <MX_GPIO_Init+0x68>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a16      	ldr	r2, [pc, #88]	; (8001634 <MX_GPIO_Init+0x68>)
 80015dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b14      	ldr	r3, [pc, #80]	; (8001634 <MX_GPIO_Init+0x68>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <MX_GPIO_Init+0x68>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a0f      	ldr	r2, [pc, #60]	; (8001634 <MX_GPIO_Init+0x68>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <MX_GPIO_Init+0x68>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <MX_GPIO_Init+0x68>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a08      	ldr	r2, [pc, #32]	; (8001634 <MX_GPIO_Init+0x68>)
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <MX_GPIO_Init+0x68>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]

}
 8001626:	bf00      	nop
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800

08001638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800163c:	b672      	cpsid	i
}
 800163e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001640:	e7fe      	b.n	8001640 <Error_Handler+0x8>
	...

08001644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	607b      	str	r3, [r7, #4]
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <HAL_MspInit+0x4c>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	4a0f      	ldr	r2, [pc, #60]	; (8001690 <HAL_MspInit+0x4c>)
 8001654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001658:	6453      	str	r3, [r2, #68]	; 0x44
 800165a:	4b0d      	ldr	r3, [pc, #52]	; (8001690 <HAL_MspInit+0x4c>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	603b      	str	r3, [r7, #0]
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <HAL_MspInit+0x4c>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	4a08      	ldr	r2, [pc, #32]	; (8001690 <HAL_MspInit+0x4c>)
 8001670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001674:	6413      	str	r3, [r2, #64]	; 0x40
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_MspInit+0x4c>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001682:	2005      	movs	r0, #5
 8001684:	f000 fb4c 	bl	8001d20 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40023800 	.word	0x40023800

08001694 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	; 0x28
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a21      	ldr	r2, [pc, #132]	; (8001738 <HAL_I2C_MspInit+0xa4>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d13b      	bne.n	800172e <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	4b20      	ldr	r3, [pc, #128]	; (800173c <HAL_I2C_MspInit+0xa8>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a1f      	ldr	r2, [pc, #124]	; (800173c <HAL_I2C_MspInit+0xa8>)
 80016c0:	f043 0302 	orr.w	r3, r3, #2
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b1d      	ldr	r3, [pc, #116]	; (800173c <HAL_I2C_MspInit+0xa8>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016d2:	23c0      	movs	r3, #192	; 0xc0
 80016d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d6:	2312      	movs	r3, #18
 80016d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016de:	2303      	movs	r3, #3
 80016e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016e2:	2304      	movs	r3, #4
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	4619      	mov	r1, r3
 80016ec:	4814      	ldr	r0, [pc, #80]	; (8001740 <HAL_I2C_MspInit+0xac>)
 80016ee:	f000 fb89 	bl	8001e04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	4b11      	ldr	r3, [pc, #68]	; (800173c <HAL_I2C_MspInit+0xa8>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	4a10      	ldr	r2, [pc, #64]	; (800173c <HAL_I2C_MspInit+0xa8>)
 80016fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001700:	6413      	str	r3, [r2, #64]	; 0x40
 8001702:	4b0e      	ldr	r3, [pc, #56]	; (800173c <HAL_I2C_MspInit+0xa8>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 2, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2102      	movs	r1, #2
 8001712:	201f      	movs	r0, #31
 8001714:	f000 fb0f 	bl	8001d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001718:	201f      	movs	r0, #31
 800171a:	f000 fb28 	bl	8001d6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 2, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	2102      	movs	r1, #2
 8001722:	2020      	movs	r0, #32
 8001724:	f000 fb07 	bl	8001d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001728:	2020      	movs	r0, #32
 800172a:	f000 fb20 	bl	8001d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800172e:	bf00      	nop
 8001730:	3728      	adds	r7, #40	; 0x28
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40005400 	.word	0x40005400
 800173c:	40023800 	.word	0x40023800
 8001740:	40020400 	.word	0x40020400

08001744 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08a      	sub	sp, #40	; 0x28
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a19      	ldr	r2, [pc, #100]	; (80017c8 <HAL_UART_MspInit+0x84>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d12b      	bne.n	80017be <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	4b18      	ldr	r3, [pc, #96]	; (80017cc <HAL_UART_MspInit+0x88>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	4a17      	ldr	r2, [pc, #92]	; (80017cc <HAL_UART_MspInit+0x88>)
 8001770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001774:	6413      	str	r3, [r2, #64]	; 0x40
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_UART_MspInit+0x88>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <HAL_UART_MspInit+0x88>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a10      	ldr	r2, [pc, #64]	; (80017cc <HAL_UART_MspInit+0x88>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <HAL_UART_MspInit+0x88>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800179e:	230c      	movs	r3, #12
 80017a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a2:	2302      	movs	r3, #2
 80017a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017aa:	2303      	movs	r3, #3
 80017ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017ae:	2307      	movs	r3, #7
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	4619      	mov	r1, r3
 80017b8:	4805      	ldr	r0, [pc, #20]	; (80017d0 <HAL_UART_MspInit+0x8c>)
 80017ba:	f000 fb23 	bl	8001e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017be:	bf00      	nop
 80017c0:	3728      	adds	r7, #40	; 0x28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40004400 	.word	0x40004400
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020000 	.word	0x40020000

080017d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <NMI_Handler+0x4>

080017da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017de:	e7fe      	b.n	80017de <HardFault_Handler+0x4>

080017e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <MemManage_Handler+0x4>

080017e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ea:	e7fe      	b.n	80017ea <BusFault_Handler+0x4>

080017ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <UsageFault_Handler+0x4>

080017f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001820:	f000 f96a 	bl	8001af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}

08001828 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800182c:	4802      	ldr	r0, [pc, #8]	; (8001838 <I2C1_EV_IRQHandler+0x10>)
 800182e:	f001 f8ed 	bl	8002a0c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	200002e8 	.word	0x200002e8

0800183c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <OTG_FS_IRQHandler+0x10>)
 8001842:	f003 f925 	bl	8004a90 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20001868 	.word	0x20001868

08001850 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
	return 1;
 8001854:	2301      	movs	r3, #1
}
 8001856:	4618      	mov	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <_kill>:

int _kill(int pid, int sig)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800186a:	f009 fad7 	bl	800ae1c <__errno>
 800186e:	4603      	mov	r3, r0
 8001870:	2216      	movs	r2, #22
 8001872:	601a      	str	r2, [r3, #0]
	return -1;
 8001874:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <_exit>:

void _exit (int status)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001888:	f04f 31ff 	mov.w	r1, #4294967295
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ffe7 	bl	8001860 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001892:	e7fe      	b.n	8001892 <_exit+0x12>

08001894 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	e00a      	b.n	80018bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018a6:	f3af 8000 	nop.w
 80018aa:	4601      	mov	r1, r0
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	60ba      	str	r2, [r7, #8]
 80018b2:	b2ca      	uxtb	r2, r1
 80018b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	3301      	adds	r3, #1
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	dbf0      	blt.n	80018a6 <_read+0x12>
	}

return len;
 80018c4:	687b      	ldr	r3, [r7, #4]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b086      	sub	sp, #24
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	60f8      	str	r0, [r7, #12]
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	e009      	b.n	80018f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	60ba      	str	r2, [r7, #8]
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	3301      	adds	r3, #1
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	dbf1      	blt.n	80018e0 <_write+0x12>
	}
	return len;
 80018fc:	687b      	ldr	r3, [r7, #4]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <_close>:

int _close(int file)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
	return -1;
 800190e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800192e:	605a      	str	r2, [r3, #4]
	return 0;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <_isatty>:

int _isatty(int file)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
	return 1;
 8001946:	2301      	movs	r3, #1
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
	return 0;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001978:	4a14      	ldr	r2, [pc, #80]	; (80019cc <_sbrk+0x5c>)
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <_sbrk+0x60>)
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001984:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <_sbrk+0x64>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d102      	bne.n	8001992 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800198c:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <_sbrk+0x64>)
 800198e:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <_sbrk+0x68>)
 8001990:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001992:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <_sbrk+0x64>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	429a      	cmp	r2, r3
 800199e:	d207      	bcs.n	80019b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a0:	f009 fa3c 	bl	800ae1c <__errno>
 80019a4:	4603      	mov	r3, r0
 80019a6:	220c      	movs	r2, #12
 80019a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295
 80019ae:	e009      	b.n	80019c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <_sbrk+0x64>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019b6:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <_sbrk+0x64>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	4a05      	ldr	r2, [pc, #20]	; (80019d4 <_sbrk+0x64>)
 80019c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019c2:	68fb      	ldr	r3, [r7, #12]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20020000 	.word	0x20020000
 80019d0:	00000400 	.word	0x00000400
 80019d4:	20000380 	.word	0x20000380
 80019d8:	20001fa8 	.word	0x20001fa8

080019dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <SystemInit+0x20>)
 80019e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019e6:	4a05      	ldr	r2, [pc, #20]	; (80019fc <SystemInit+0x20>)
 80019e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a04:	480d      	ldr	r0, [pc, #52]	; (8001a3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a06:	490e      	ldr	r1, [pc, #56]	; (8001a40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a08:	4a0e      	ldr	r2, [pc, #56]	; (8001a44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a0c:	e002      	b.n	8001a14 <LoopCopyDataInit>

08001a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a12:	3304      	adds	r3, #4

08001a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a18:	d3f9      	bcc.n	8001a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1a:	4a0b      	ldr	r2, [pc, #44]	; (8001a48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a1c:	4c0b      	ldr	r4, [pc, #44]	; (8001a4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a20:	e001      	b.n	8001a26 <LoopFillZerobss>

08001a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a24:	3204      	adds	r2, #4

08001a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a28:	d3fb      	bcc.n	8001a22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a2a:	f7ff ffd7 	bl	80019dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a2e:	f009 f9fb 	bl	800ae28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a32:	f7ff fc75 	bl	8001320 <main>
  bx  lr    
 8001a36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a40:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8001a44:	0800e0c4 	.word	0x0800e0c4
  ldr r2, =_sbss
 8001a48:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 8001a4c:	20001fa4 	.word	0x20001fa4

08001a50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a50:	e7fe      	b.n	8001a50 <ADC_IRQHandler>
	...

08001a54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a58:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <HAL_Init+0x40>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a0d      	ldr	r2, [pc, #52]	; (8001a94 <HAL_Init+0x40>)
 8001a5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <HAL_Init+0x40>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <HAL_Init+0x40>)
 8001a6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a70:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <HAL_Init+0x40>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a07      	ldr	r2, [pc, #28]	; (8001a94 <HAL_Init+0x40>)
 8001a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a7c:	2003      	movs	r0, #3
 8001a7e:	f000 f94f 	bl	8001d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a82:	2000      	movs	r0, #0
 8001a84:	f000 f808 	bl	8001a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a88:	f7ff fddc 	bl	8001644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40023c00 	.word	0x40023c00

08001a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <HAL_InitTick+0x54>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <HAL_InitTick+0x58>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 f967 	bl	8001d8a <HAL_SYSTICK_Config>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e00e      	b.n	8001ae4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b0f      	cmp	r3, #15
 8001aca:	d80a      	bhi.n	8001ae2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001acc:	2200      	movs	r2, #0
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad4:	f000 f92f 	bl	8001d36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ad8:	4a06      	ldr	r2, [pc, #24]	; (8001af4 <HAL_InitTick+0x5c>)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	e000      	b.n	8001ae4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20000000 	.word	0x20000000
 8001af0:	20000008 	.word	0x20000008
 8001af4:	20000004 	.word	0x20000004

08001af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_IncTick+0x20>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_IncTick+0x24>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4413      	add	r3, r2
 8001b08:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <HAL_IncTick+0x24>)
 8001b0a:	6013      	str	r3, [r2, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20000008 	.word	0x20000008
 8001b1c:	20000384 	.word	0x20000384

08001b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return uwTick;
 8001b24:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <HAL_GetTick+0x14>)
 8001b26:	681b      	ldr	r3, [r3, #0]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	20000384 	.word	0x20000384

08001b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b40:	f7ff ffee 	bl	8001b20 <HAL_GetTick>
 8001b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b50:	d005      	beq.n	8001b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b52:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <HAL_Delay+0x44>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	461a      	mov	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b5e:	bf00      	nop
 8001b60:	f7ff ffde 	bl	8001b20 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d8f7      	bhi.n	8001b60 <HAL_Delay+0x28>
  {
  }
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000008 	.word	0x20000008

08001b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b90:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bb2:	4a04      	ldr	r2, [pc, #16]	; (8001bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	60d3      	str	r3, [r2, #12]
}
 8001bb8:	bf00      	nop
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bcc:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	0a1b      	lsrs	r3, r3, #8
 8001bd2:	f003 0307 	and.w	r3, r3, #7
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	db0b      	blt.n	8001c0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	f003 021f 	and.w	r2, r3, #31
 8001bfc:	4907      	ldr	r1, [pc, #28]	; (8001c1c <__NVIC_EnableIRQ+0x38>)
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	095b      	lsrs	r3, r3, #5
 8001c04:	2001      	movs	r0, #1
 8001c06:	fa00 f202 	lsl.w	r2, r0, r2
 8001c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	e000e100 	.word	0xe000e100

08001c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	6039      	str	r1, [r7, #0]
 8001c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	db0a      	blt.n	8001c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	490c      	ldr	r1, [pc, #48]	; (8001c6c <__NVIC_SetPriority+0x4c>)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	0112      	lsls	r2, r2, #4
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	440b      	add	r3, r1
 8001c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c48:	e00a      	b.n	8001c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	4908      	ldr	r1, [pc, #32]	; (8001c70 <__NVIC_SetPriority+0x50>)
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	3b04      	subs	r3, #4
 8001c58:	0112      	lsls	r2, r2, #4
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	761a      	strb	r2, [r3, #24]
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	e000e100 	.word	0xe000e100
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b089      	sub	sp, #36	; 0x24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f1c3 0307 	rsb	r3, r3, #7
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	bf28      	it	cs
 8001c92:	2304      	movcs	r3, #4
 8001c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	2b06      	cmp	r3, #6
 8001c9c:	d902      	bls.n	8001ca4 <NVIC_EncodePriority+0x30>
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3b03      	subs	r3, #3
 8001ca2:	e000      	b.n	8001ca6 <NVIC_EncodePriority+0x32>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43da      	mvns	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc6:	43d9      	mvns	r1, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ccc:	4313      	orrs	r3, r2
         );
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3724      	adds	r7, #36	; 0x24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cec:	d301      	bcc.n	8001cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e00f      	b.n	8001d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf2:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <SysTick_Config+0x40>)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cfa:	210f      	movs	r1, #15
 8001cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001d00:	f7ff ff8e 	bl	8001c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <SysTick_Config+0x40>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0a:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <SysTick_Config+0x40>)
 8001d0c:	2207      	movs	r2, #7
 8001d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	e000e010 	.word	0xe000e010

08001d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ff29 	bl	8001b80 <__NVIC_SetPriorityGrouping>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b086      	sub	sp, #24
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	607a      	str	r2, [r7, #4]
 8001d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d48:	f7ff ff3e 	bl	8001bc8 <__NVIC_GetPriorityGrouping>
 8001d4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	6978      	ldr	r0, [r7, #20]
 8001d54:	f7ff ff8e 	bl	8001c74 <NVIC_EncodePriority>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5e:	4611      	mov	r1, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ff5d 	bl	8001c20 <__NVIC_SetPriority>
}
 8001d66:	bf00      	nop
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	4603      	mov	r3, r0
 8001d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff ff31 	bl	8001be4 <__NVIC_EnableIRQ>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff ffa2 	bl	8001cdc <SysTick_Config>
 8001d98:	4603      	mov	r3, r0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d004      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2280      	movs	r2, #128	; 0x80
 8001dba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e00c      	b.n	8001dda <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2205      	movs	r2, #5
 8001dc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0201 	bic.w	r2, r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001df4:	b2db      	uxtb	r3, r3
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
	...

08001e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b089      	sub	sp, #36	; 0x24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
 8001e1e:	e16b      	b.n	80020f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e20:	2201      	movs	r2, #1
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	f040 815a 	bne.w	80020f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d005      	beq.n	8001e56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d130      	bne.n	8001eb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	2203      	movs	r2, #3
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	091b      	lsrs	r3, r3, #4
 8001ea2:	f003 0201 	and.w	r2, r3, #1
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d017      	beq.n	8001ef4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	2203      	movs	r2, #3
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d123      	bne.n	8001f48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	08da      	lsrs	r2, r3, #3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3208      	adds	r2, #8
 8001f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	220f      	movs	r2, #15
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	691a      	ldr	r2, [r3, #16]
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	08da      	lsrs	r2, r3, #3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3208      	adds	r2, #8
 8001f42:	69b9      	ldr	r1, [r7, #24]
 8001f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	2203      	movs	r2, #3
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 0203 	and.w	r2, r3, #3
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 80b4 	beq.w	80020f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	4b60      	ldr	r3, [pc, #384]	; (8002110 <HAL_GPIO_Init+0x30c>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	4a5f      	ldr	r2, [pc, #380]	; (8002110 <HAL_GPIO_Init+0x30c>)
 8001f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f98:	6453      	str	r3, [r2, #68]	; 0x44
 8001f9a:	4b5d      	ldr	r3, [pc, #372]	; (8002110 <HAL_GPIO_Init+0x30c>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fa6:	4a5b      	ldr	r2, [pc, #364]	; (8002114 <HAL_GPIO_Init+0x310>)
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	089b      	lsrs	r3, r3, #2
 8001fac:	3302      	adds	r3, #2
 8001fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	220f      	movs	r2, #15
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a52      	ldr	r2, [pc, #328]	; (8002118 <HAL_GPIO_Init+0x314>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d02b      	beq.n	800202a <HAL_GPIO_Init+0x226>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a51      	ldr	r2, [pc, #324]	; (800211c <HAL_GPIO_Init+0x318>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d025      	beq.n	8002026 <HAL_GPIO_Init+0x222>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a50      	ldr	r2, [pc, #320]	; (8002120 <HAL_GPIO_Init+0x31c>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d01f      	beq.n	8002022 <HAL_GPIO_Init+0x21e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a4f      	ldr	r2, [pc, #316]	; (8002124 <HAL_GPIO_Init+0x320>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d019      	beq.n	800201e <HAL_GPIO_Init+0x21a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a4e      	ldr	r2, [pc, #312]	; (8002128 <HAL_GPIO_Init+0x324>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d013      	beq.n	800201a <HAL_GPIO_Init+0x216>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a4d      	ldr	r2, [pc, #308]	; (800212c <HAL_GPIO_Init+0x328>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d00d      	beq.n	8002016 <HAL_GPIO_Init+0x212>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a4c      	ldr	r2, [pc, #304]	; (8002130 <HAL_GPIO_Init+0x32c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d007      	beq.n	8002012 <HAL_GPIO_Init+0x20e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a4b      	ldr	r2, [pc, #300]	; (8002134 <HAL_GPIO_Init+0x330>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d101      	bne.n	800200e <HAL_GPIO_Init+0x20a>
 800200a:	2307      	movs	r3, #7
 800200c:	e00e      	b.n	800202c <HAL_GPIO_Init+0x228>
 800200e:	2308      	movs	r3, #8
 8002010:	e00c      	b.n	800202c <HAL_GPIO_Init+0x228>
 8002012:	2306      	movs	r3, #6
 8002014:	e00a      	b.n	800202c <HAL_GPIO_Init+0x228>
 8002016:	2305      	movs	r3, #5
 8002018:	e008      	b.n	800202c <HAL_GPIO_Init+0x228>
 800201a:	2304      	movs	r3, #4
 800201c:	e006      	b.n	800202c <HAL_GPIO_Init+0x228>
 800201e:	2303      	movs	r3, #3
 8002020:	e004      	b.n	800202c <HAL_GPIO_Init+0x228>
 8002022:	2302      	movs	r3, #2
 8002024:	e002      	b.n	800202c <HAL_GPIO_Init+0x228>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <HAL_GPIO_Init+0x228>
 800202a:	2300      	movs	r3, #0
 800202c:	69fa      	ldr	r2, [r7, #28]
 800202e:	f002 0203 	and.w	r2, r2, #3
 8002032:	0092      	lsls	r2, r2, #2
 8002034:	4093      	lsls	r3, r2
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800203c:	4935      	ldr	r1, [pc, #212]	; (8002114 <HAL_GPIO_Init+0x310>)
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	089b      	lsrs	r3, r3, #2
 8002042:	3302      	adds	r3, #2
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800204a:	4b3b      	ldr	r3, [pc, #236]	; (8002138 <HAL_GPIO_Init+0x334>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	43db      	mvns	r3, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4013      	ands	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800206e:	4a32      	ldr	r2, [pc, #200]	; (8002138 <HAL_GPIO_Init+0x334>)
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002074:	4b30      	ldr	r3, [pc, #192]	; (8002138 <HAL_GPIO_Init+0x334>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002098:	4a27      	ldr	r2, [pc, #156]	; (8002138 <HAL_GPIO_Init+0x334>)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800209e:	4b26      	ldr	r3, [pc, #152]	; (8002138 <HAL_GPIO_Init+0x334>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020c2:	4a1d      	ldr	r2, [pc, #116]	; (8002138 <HAL_GPIO_Init+0x334>)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020c8:	4b1b      	ldr	r3, [pc, #108]	; (8002138 <HAL_GPIO_Init+0x334>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020ec:	4a12      	ldr	r2, [pc, #72]	; (8002138 <HAL_GPIO_Init+0x334>)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3301      	adds	r3, #1
 80020f6:	61fb      	str	r3, [r7, #28]
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	2b0f      	cmp	r3, #15
 80020fc:	f67f ae90 	bls.w	8001e20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002100:	bf00      	nop
 8002102:	bf00      	nop
 8002104:	3724      	adds	r7, #36	; 0x24
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	40023800 	.word	0x40023800
 8002114:	40013800 	.word	0x40013800
 8002118:	40020000 	.word	0x40020000
 800211c:	40020400 	.word	0x40020400
 8002120:	40020800 	.word	0x40020800
 8002124:	40020c00 	.word	0x40020c00
 8002128:	40021000 	.word	0x40021000
 800212c:	40021400 	.word	0x40021400
 8002130:	40021800 	.word	0x40021800
 8002134:	40021c00 	.word	0x40021c00
 8002138:	40013c00 	.word	0x40013c00

0800213c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e12b      	b.n	80023a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d106      	bne.n	8002168 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7ff fa96 	bl	8001694 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2224      	movs	r2, #36	; 0x24
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0201 	bic.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800218e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800219e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021a0:	f004 fa14 	bl	80065cc <HAL_RCC_GetPCLK1Freq>
 80021a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	4a81      	ldr	r2, [pc, #516]	; (80023b0 <HAL_I2C_Init+0x274>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d807      	bhi.n	80021c0 <HAL_I2C_Init+0x84>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4a80      	ldr	r2, [pc, #512]	; (80023b4 <HAL_I2C_Init+0x278>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	bf94      	ite	ls
 80021b8:	2301      	movls	r3, #1
 80021ba:	2300      	movhi	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	e006      	b.n	80021ce <HAL_I2C_Init+0x92>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4a7d      	ldr	r2, [pc, #500]	; (80023b8 <HAL_I2C_Init+0x27c>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	bf94      	ite	ls
 80021c8:	2301      	movls	r3, #1
 80021ca:	2300      	movhi	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e0e7      	b.n	80023a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	4a78      	ldr	r2, [pc, #480]	; (80023bc <HAL_I2C_Init+0x280>)
 80021da:	fba2 2303 	umull	r2, r3, r2, r3
 80021de:	0c9b      	lsrs	r3, r3, #18
 80021e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	4a6a      	ldr	r2, [pc, #424]	; (80023b0 <HAL_I2C_Init+0x274>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d802      	bhi.n	8002210 <HAL_I2C_Init+0xd4>
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	3301      	adds	r3, #1
 800220e:	e009      	b.n	8002224 <HAL_I2C_Init+0xe8>
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002216:	fb02 f303 	mul.w	r3, r2, r3
 800221a:	4a69      	ldr	r2, [pc, #420]	; (80023c0 <HAL_I2C_Init+0x284>)
 800221c:	fba2 2303 	umull	r2, r3, r2, r3
 8002220:	099b      	lsrs	r3, r3, #6
 8002222:	3301      	adds	r3, #1
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	430b      	orrs	r3, r1
 800222a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002236:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	495c      	ldr	r1, [pc, #368]	; (80023b0 <HAL_I2C_Init+0x274>)
 8002240:	428b      	cmp	r3, r1
 8002242:	d819      	bhi.n	8002278 <HAL_I2C_Init+0x13c>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	1e59      	subs	r1, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002252:	1c59      	adds	r1, r3, #1
 8002254:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002258:	400b      	ands	r3, r1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00a      	beq.n	8002274 <HAL_I2C_Init+0x138>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	1e59      	subs	r1, r3, #1
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	fbb1 f3f3 	udiv	r3, r1, r3
 800226c:	3301      	adds	r3, #1
 800226e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002272:	e051      	b.n	8002318 <HAL_I2C_Init+0x1dc>
 8002274:	2304      	movs	r3, #4
 8002276:	e04f      	b.n	8002318 <HAL_I2C_Init+0x1dc>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d111      	bne.n	80022a4 <HAL_I2C_Init+0x168>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	1e58      	subs	r0, r3, #1
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6859      	ldr	r1, [r3, #4]
 8002288:	460b      	mov	r3, r1
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	440b      	add	r3, r1
 800228e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002292:	3301      	adds	r3, #1
 8002294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002298:	2b00      	cmp	r3, #0
 800229a:	bf0c      	ite	eq
 800229c:	2301      	moveq	r3, #1
 800229e:	2300      	movne	r3, #0
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	e012      	b.n	80022ca <HAL_I2C_Init+0x18e>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	1e58      	subs	r0, r3, #1
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6859      	ldr	r1, [r3, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	0099      	lsls	r1, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ba:	3301      	adds	r3, #1
 80022bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	bf0c      	ite	eq
 80022c4:	2301      	moveq	r3, #1
 80022c6:	2300      	movne	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_I2C_Init+0x196>
 80022ce:	2301      	movs	r3, #1
 80022d0:	e022      	b.n	8002318 <HAL_I2C_Init+0x1dc>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10e      	bne.n	80022f8 <HAL_I2C_Init+0x1bc>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	1e58      	subs	r0, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6859      	ldr	r1, [r3, #4]
 80022e2:	460b      	mov	r3, r1
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	440b      	add	r3, r1
 80022e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ec:	3301      	adds	r3, #1
 80022ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022f6:	e00f      	b.n	8002318 <HAL_I2C_Init+0x1dc>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	1e58      	subs	r0, r3, #1
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6859      	ldr	r1, [r3, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	0099      	lsls	r1, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	fbb0 f3f3 	udiv	r3, r0, r3
 800230e:	3301      	adds	r3, #1
 8002310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002314:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	6809      	ldr	r1, [r1, #0]
 800231c:	4313      	orrs	r3, r2
 800231e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69da      	ldr	r2, [r3, #28]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002346:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6911      	ldr	r1, [r2, #16]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	68d2      	ldr	r2, [r2, #12]
 8002352:	4311      	orrs	r1, r2
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6812      	ldr	r2, [r2, #0]
 8002358:	430b      	orrs	r3, r1
 800235a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695a      	ldr	r2, [r3, #20]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0201 	orr.w	r2, r2, #1
 8002386:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2220      	movs	r2, #32
 8002392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	000186a0 	.word	0x000186a0
 80023b4:	001e847f 	.word	0x001e847f
 80023b8:	003d08ff 	.word	0x003d08ff
 80023bc:	431bde83 	.word	0x431bde83
 80023c0:	10624dd3 	.word	0x10624dd3

080023c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	607a      	str	r2, [r7, #4]
 80023ce:	461a      	mov	r2, r3
 80023d0:	460b      	mov	r3, r1
 80023d2:	817b      	strh	r3, [r7, #10]
 80023d4:	4613      	mov	r3, r2
 80023d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023d8:	f7ff fba2 	bl	8001b20 <HAL_GetTick>
 80023dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b20      	cmp	r3, #32
 80023e8:	f040 80e0 	bne.w	80025ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	2319      	movs	r3, #25
 80023f2:	2201      	movs	r2, #1
 80023f4:	4970      	ldr	r1, [pc, #448]	; (80025b8 <HAL_I2C_Master_Transmit+0x1f4>)
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f001 ffd0 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002402:	2302      	movs	r3, #2
 8002404:	e0d3      	b.n	80025ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <HAL_I2C_Master_Transmit+0x50>
 8002410:	2302      	movs	r3, #2
 8002412:	e0cc      	b.n	80025ae <HAL_I2C_Master_Transmit+0x1ea>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b01      	cmp	r3, #1
 8002428:	d007      	beq.n	800243a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 0201 	orr.w	r2, r2, #1
 8002438:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002448:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2221      	movs	r2, #33	; 0x21
 800244e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2210      	movs	r2, #16
 8002456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	893a      	ldrh	r2, [r7, #8]
 800246a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002470:	b29a      	uxth	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4a50      	ldr	r2, [pc, #320]	; (80025bc <HAL_I2C_Master_Transmit+0x1f8>)
 800247a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800247c:	8979      	ldrh	r1, [r7, #10]
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	6a3a      	ldr	r2, [r7, #32]
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f001 fd92 	bl	8003fac <I2C_MasterRequestWrite>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e08d      	b.n	80025ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002492:	2300      	movs	r3, #0
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	613b      	str	r3, [r7, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024a8:	e066      	b.n	8002578 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	6a39      	ldr	r1, [r7, #32]
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f002 f84a 	bl	8004548 <I2C_WaitOnTXEFlagUntilTimeout>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00d      	beq.n	80024d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d107      	bne.n	80024d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e06b      	b.n	80025ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	781a      	ldrb	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fe:	3b01      	subs	r3, #1
 8002500:	b29a      	uxth	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b04      	cmp	r3, #4
 8002512:	d11b      	bne.n	800254c <HAL_I2C_Master_Transmit+0x188>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002518:	2b00      	cmp	r3, #0
 800251a:	d017      	beq.n	800254c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	781a      	ldrb	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002536:	b29b      	uxth	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	6a39      	ldr	r1, [r7, #32]
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f002 f83a 	bl	80045ca <I2C_WaitOnBTFFlagUntilTimeout>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00d      	beq.n	8002578 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	2b04      	cmp	r3, #4
 8002562:	d107      	bne.n	8002574 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002572:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e01a      	b.n	80025ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257c:	2b00      	cmp	r3, #0
 800257e:	d194      	bne.n	80024aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800258e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2220      	movs	r2, #32
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	e000      	b.n	80025ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025ac:	2302      	movs	r3, #2
  }
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	00100002 	.word	0x00100002
 80025bc:	ffff0000 	.word	0xffff0000

080025c0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08c      	sub	sp, #48	; 0x30
 80025c4:	af02      	add	r7, sp, #8
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	607a      	str	r2, [r7, #4]
 80025ca:	461a      	mov	r2, r3
 80025cc:	460b      	mov	r3, r1
 80025ce:	817b      	strh	r3, [r7, #10]
 80025d0:	4613      	mov	r3, r2
 80025d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025d4:	f7ff faa4 	bl	8001b20 <HAL_GetTick>
 80025d8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b20      	cmp	r3, #32
 80025e4:	f040 820b 	bne.w	80029fe <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	2319      	movs	r3, #25
 80025ee:	2201      	movs	r2, #1
 80025f0:	497c      	ldr	r1, [pc, #496]	; (80027e4 <HAL_I2C_Master_Receive+0x224>)
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f001 fed2 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80025fe:	2302      	movs	r3, #2
 8002600:	e1fe      	b.n	8002a00 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002608:	2b01      	cmp	r3, #1
 800260a:	d101      	bne.n	8002610 <HAL_I2C_Master_Receive+0x50>
 800260c:	2302      	movs	r3, #2
 800260e:	e1f7      	b.n	8002a00 <HAL_I2C_Master_Receive+0x440>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b01      	cmp	r3, #1
 8002624:	d007      	beq.n	8002636 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f042 0201 	orr.w	r2, r2, #1
 8002634:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002644:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2222      	movs	r2, #34	; 0x22
 800264a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2210      	movs	r2, #16
 8002652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	893a      	ldrh	r2, [r7, #8]
 8002666:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266c:	b29a      	uxth	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	4a5c      	ldr	r2, [pc, #368]	; (80027e8 <HAL_I2C_Master_Receive+0x228>)
 8002676:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002678:	8979      	ldrh	r1, [r7, #10]
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f001 fd16 	bl	80040b0 <I2C_MasterRequestRead>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e1b8      	b.n	8002a00 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002692:	2b00      	cmp	r3, #0
 8002694:	d113      	bne.n	80026be <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002696:	2300      	movs	r3, #0
 8002698:	623b      	str	r3, [r7, #32]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	623b      	str	r3, [r7, #32]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	623b      	str	r3, [r7, #32]
 80026aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	e18c      	b.n	80029d8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d11b      	bne.n	80026fe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	61fb      	str	r3, [r7, #28]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	61fb      	str	r3, [r7, #28]
 80026ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	e16c      	b.n	80029d8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002702:	2b02      	cmp	r3, #2
 8002704:	d11b      	bne.n	800273e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002714:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002724:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002726:	2300      	movs	r3, #0
 8002728:	61bb      	str	r3, [r7, #24]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	61bb      	str	r3, [r7, #24]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	61bb      	str	r3, [r7, #24]
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	e14c      	b.n	80029d8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800274c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	617b      	str	r3, [r7, #20]
 8002762:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002764:	e138      	b.n	80029d8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276a:	2b03      	cmp	r3, #3
 800276c:	f200 80f1 	bhi.w	8002952 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002774:	2b01      	cmp	r3, #1
 8002776:	d123      	bne.n	80027c0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800277a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f001 ff97 	bl	80046b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e139      	b.n	8002a00 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	691a      	ldr	r2, [r3, #16]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a8:	3b01      	subs	r3, #1
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027be:	e10b      	b.n	80029d8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d14e      	bne.n	8002866 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ce:	2200      	movs	r2, #0
 80027d0:	4906      	ldr	r1, [pc, #24]	; (80027ec <HAL_I2C_Master_Receive+0x22c>)
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f001 fde2 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d008      	beq.n	80027f0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e10e      	b.n	8002a00 <HAL_I2C_Master_Receive+0x440>
 80027e2:	bf00      	nop
 80027e4:	00100002 	.word	0x00100002
 80027e8:	ffff0000 	.word	0xffff0000
 80027ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	691a      	ldr	r2, [r3, #16]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	1c5a      	adds	r2, r3, #1
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281c:	3b01      	subs	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002828:	b29b      	uxth	r3, r3
 800282a:	3b01      	subs	r3, #1
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	691a      	ldr	r2, [r3, #16]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284e:	3b01      	subs	r3, #1
 8002850:	b29a      	uxth	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285a:	b29b      	uxth	r3, r3
 800285c:	3b01      	subs	r3, #1
 800285e:	b29a      	uxth	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002864:	e0b8      	b.n	80029d8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286c:	2200      	movs	r2, #0
 800286e:	4966      	ldr	r1, [pc, #408]	; (8002a08 <HAL_I2C_Master_Receive+0x448>)
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f001 fd93 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e0bf      	b.n	8002a00 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800288e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	691a      	ldr	r2, [r3, #16]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c8:	2200      	movs	r2, #0
 80028ca:	494f      	ldr	r1, [pc, #316]	; (8002a08 <HAL_I2C_Master_Receive+0x448>)
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f001 fd65 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e091      	b.n	8002a00 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	691a      	ldr	r2, [r3, #16]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	1c5a      	adds	r2, r3, #1
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002908:	3b01      	subs	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002914:	b29b      	uxth	r3, r3
 8002916:	3b01      	subs	r3, #1
 8002918:	b29a      	uxth	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	1c5a      	adds	r2, r3, #1
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002946:	b29b      	uxth	r3, r3
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002950:	e042      	b.n	80029d8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002954:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f001 feaa 	bl	80046b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e04c      	b.n	8002a00 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298e:	b29b      	uxth	r3, r3
 8002990:	3b01      	subs	r3, #1
 8002992:	b29a      	uxth	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d118      	bne.n	80029d8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	b2d2      	uxtb	r2, r2
 80029b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c2:	3b01      	subs	r3, #1
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f47f aec2 	bne.w	8002766 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2220      	movs	r2, #32
 80029e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	e000      	b.n	8002a00 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80029fe:	2302      	movs	r3, #2
  }
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3728      	adds	r7, #40	; 0x28
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	00010004 	.word	0x00010004

08002a0c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002a14:	2300      	movs	r3, #0
 8002a16:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a24:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a2c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a34:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
 8002a38:	2b10      	cmp	r3, #16
 8002a3a:	d003      	beq.n	8002a44 <HAL_I2C_EV_IRQHandler+0x38>
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
 8002a3e:	2b40      	cmp	r3, #64	; 0x40
 8002a40:	f040 80c1 	bne.w	8002bc6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10d      	bne.n	8002a7a <HAL_I2C_EV_IRQHandler+0x6e>
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002a64:	d003      	beq.n	8002a6e <HAL_I2C_EV_IRQHandler+0x62>
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002a6c:	d101      	bne.n	8002a72 <HAL_I2C_EV_IRQHandler+0x66>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <HAL_I2C_EV_IRQHandler+0x68>
 8002a72:	2300      	movs	r3, #0
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	f000 8132 	beq.w	8002cde <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00c      	beq.n	8002a9e <HAL_I2C_EV_IRQHandler+0x92>
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	0a5b      	lsrs	r3, r3, #9
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d006      	beq.n	8002a9e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f001 fe92 	bl	80047ba <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 fcdc 	bl	8003454 <I2C_Master_SB>
 8002a9c:	e092      	b.n	8002bc4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	08db      	lsrs	r3, r3, #3
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d009      	beq.n	8002abe <HAL_I2C_EV_IRQHandler+0xb2>
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	0a5b      	lsrs	r3, r3, #9
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 fd52 	bl	8003560 <I2C_Master_ADD10>
 8002abc:	e082      	b.n	8002bc4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	085b      	lsrs	r3, r3, #1
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d009      	beq.n	8002ade <HAL_I2C_EV_IRQHandler+0xd2>
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	0a5b      	lsrs	r3, r3, #9
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 fd6c 	bl	80035b4 <I2C_Master_ADDR>
 8002adc:	e072      	b.n	8002bc4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	089b      	lsrs	r3, r3, #2
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d03b      	beq.n	8002b62 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002af4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002af8:	f000 80f3 	beq.w	8002ce2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	09db      	lsrs	r3, r3, #7
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00f      	beq.n	8002b28 <HAL_I2C_EV_IRQHandler+0x11c>
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	0a9b      	lsrs	r3, r3, #10
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d009      	beq.n	8002b28 <HAL_I2C_EV_IRQHandler+0x11c>
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	089b      	lsrs	r3, r3, #2
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d103      	bne.n	8002b28 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f94c 	bl	8002dbe <I2C_MasterTransmit_TXE>
 8002b26:	e04d      	b.n	8002bc4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	089b      	lsrs	r3, r3, #2
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 80d6 	beq.w	8002ce2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	0a5b      	lsrs	r3, r3, #9
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 80cf 	beq.w	8002ce2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002b44:	7bbb      	ldrb	r3, [r7, #14]
 8002b46:	2b21      	cmp	r3, #33	; 0x21
 8002b48:	d103      	bne.n	8002b52 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f9d3 	bl	8002ef6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b50:	e0c7      	b.n	8002ce2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
 8002b54:	2b40      	cmp	r3, #64	; 0x40
 8002b56:	f040 80c4 	bne.w	8002ce2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 fa41 	bl	8002fe2 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b60:	e0bf      	b.n	8002ce2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b70:	f000 80b7 	beq.w	8002ce2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	099b      	lsrs	r3, r3, #6
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00f      	beq.n	8002ba0 <HAL_I2C_EV_IRQHandler+0x194>
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	0a9b      	lsrs	r3, r3, #10
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d009      	beq.n	8002ba0 <HAL_I2C_EV_IRQHandler+0x194>
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	089b      	lsrs	r3, r3, #2
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d103      	bne.n	8002ba0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 fab6 	bl	800310a <I2C_MasterReceive_RXNE>
 8002b9e:	e011      	b.n	8002bc4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	089b      	lsrs	r3, r3, #2
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 809a 	beq.w	8002ce2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	0a5b      	lsrs	r3, r3, #9
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 8093 	beq.w	8002ce2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 fb5f 	bl	8003280 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bc2:	e08e      	b.n	8002ce2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002bc4:	e08d      	b.n	8002ce2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d004      	beq.n	8002bd8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	61fb      	str	r3, [r7, #28]
 8002bd6:	e007      	b.n	8002be8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	085b      	lsrs	r3, r3, #1
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d012      	beq.n	8002c1a <HAL_I2C_EV_IRQHandler+0x20e>
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	0a5b      	lsrs	r3, r3, #9
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00c      	beq.n	8002c1a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002c10:	69b9      	ldr	r1, [r7, #24]
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 ff1d 	bl	8003a52 <I2C_Slave_ADDR>
 8002c18:	e066      	b.n	8002ce8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	091b      	lsrs	r3, r3, #4
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d009      	beq.n	8002c3a <HAL_I2C_EV_IRQHandler+0x22e>
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	0a5b      	lsrs	r3, r3, #9
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 ff58 	bl	8003ae8 <I2C_Slave_STOPF>
 8002c38:	e056      	b.n	8002ce8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c3a:	7bbb      	ldrb	r3, [r7, #14]
 8002c3c:	2b21      	cmp	r3, #33	; 0x21
 8002c3e:	d002      	beq.n	8002c46 <HAL_I2C_EV_IRQHandler+0x23a>
 8002c40:	7bbb      	ldrb	r3, [r7, #14]
 8002c42:	2b29      	cmp	r3, #41	; 0x29
 8002c44:	d125      	bne.n	8002c92 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	09db      	lsrs	r3, r3, #7
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00f      	beq.n	8002c72 <HAL_I2C_EV_IRQHandler+0x266>
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	0a9b      	lsrs	r3, r3, #10
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d009      	beq.n	8002c72 <HAL_I2C_EV_IRQHandler+0x266>
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	089b      	lsrs	r3, r3, #2
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d103      	bne.n	8002c72 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 fe33 	bl	80038d6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c70:	e039      	b.n	8002ce6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	089b      	lsrs	r3, r3, #2
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d033      	beq.n	8002ce6 <HAL_I2C_EV_IRQHandler+0x2da>
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	0a5b      	lsrs	r3, r3, #9
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d02d      	beq.n	8002ce6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 fe60 	bl	8003950 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c90:	e029      	b.n	8002ce6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	099b      	lsrs	r3, r3, #6
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00f      	beq.n	8002cbe <HAL_I2C_EV_IRQHandler+0x2b2>
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	0a9b      	lsrs	r3, r3, #10
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d009      	beq.n	8002cbe <HAL_I2C_EV_IRQHandler+0x2b2>
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	089b      	lsrs	r3, r3, #2
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d103      	bne.n	8002cbe <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fe6b 	bl	8003992 <I2C_SlaveReceive_RXNE>
 8002cbc:	e014      	b.n	8002ce8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	089b      	lsrs	r3, r3, #2
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00e      	beq.n	8002ce8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	0a5b      	lsrs	r3, r3, #9
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d008      	beq.n	8002ce8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 fe99 	bl	8003a0e <I2C_SlaveReceive_BTF>
 8002cdc:	e004      	b.n	8002ce8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002cde:	bf00      	nop
 8002ce0:	e002      	b.n	8002ce8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ce2:	bf00      	nop
 8002ce4:	e000      	b.n	8002ce8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ce6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002ce8:	3720      	adds	r7, #32
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	460b      	mov	r3, r1
 8002d48:	70fb      	strb	r3, [r7, #3]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dcc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dd4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dda:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d150      	bne.n	8002e86 <I2C_MasterTransmit_TXE+0xc8>
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
 8002de6:	2b21      	cmp	r3, #33	; 0x21
 8002de8:	d14d      	bne.n	8002e86 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d01d      	beq.n	8002e2c <I2C_MasterTransmit_TXE+0x6e>
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2b20      	cmp	r3, #32
 8002df4:	d01a      	beq.n	8002e2c <I2C_MasterTransmit_TXE+0x6e>
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002dfc:	d016      	beq.n	8002e2c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e0c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2211      	movs	r2, #17
 8002e12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f7ff ff62 	bl	8002cee <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e2a:	e060      	b.n	8002eee <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e3a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e4a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2220      	movs	r2, #32
 8002e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b40      	cmp	r3, #64	; 0x40
 8002e64:	d107      	bne.n	8002e76 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff ff7d 	bl	8002d6e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e74:	e03b      	b.n	8002eee <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff ff35 	bl	8002cee <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e84:	e033      	b.n	8002eee <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
 8002e88:	2b21      	cmp	r3, #33	; 0x21
 8002e8a:	d005      	beq.n	8002e98 <I2C_MasterTransmit_TXE+0xda>
 8002e8c:	7bbb      	ldrb	r3, [r7, #14]
 8002e8e:	2b40      	cmp	r3, #64	; 0x40
 8002e90:	d12d      	bne.n	8002eee <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	2b22      	cmp	r3, #34	; 0x22
 8002e96:	d12a      	bne.n	8002eee <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d108      	bne.n	8002eb4 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eb0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002eb2:	e01c      	b.n	8002eee <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b40      	cmp	r3, #64	; 0x40
 8002ebe:	d103      	bne.n	8002ec8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f88e 	bl	8002fe2 <I2C_MemoryTransmit_TXE_BTF>
}
 8002ec6:	e012      	b.n	8002eee <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	781a      	ldrb	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002eec:	e7ff      	b.n	8002eee <I2C_MasterTransmit_TXE+0x130>
 8002eee:	bf00      	nop
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f02:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b21      	cmp	r3, #33	; 0x21
 8002f0e:	d164      	bne.n	8002fda <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d012      	beq.n	8002f40 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	781a      	ldrb	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	3b01      	subs	r3, #1
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002f3e:	e04c      	b.n	8002fda <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2b08      	cmp	r3, #8
 8002f44:	d01d      	beq.n	8002f82 <I2C_MasterTransmit_BTF+0x8c>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2b20      	cmp	r3, #32
 8002f4a:	d01a      	beq.n	8002f82 <I2C_MasterTransmit_BTF+0x8c>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f52:	d016      	beq.n	8002f82 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f62:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2211      	movs	r2, #17
 8002f68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2220      	movs	r2, #32
 8002f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff feb7 	bl	8002cee <HAL_I2C_MasterTxCpltCallback>
}
 8002f80:	e02b      	b.n	8002fda <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f90:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b40      	cmp	r3, #64	; 0x40
 8002fba:	d107      	bne.n	8002fcc <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7ff fed2 	bl	8002d6e <HAL_I2C_MemTxCpltCallback>
}
 8002fca:	e006      	b.n	8002fda <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7ff fe8a 	bl	8002cee <HAL_I2C_MasterTxCpltCallback>
}
 8002fda:	bf00      	nop
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b084      	sub	sp, #16
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d11d      	bne.n	8003036 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d10b      	bne.n	800301a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003006:	b2da      	uxtb	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003012:	1c9a      	adds	r2, r3, #2
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003018:	e073      	b.n	8003102 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800301e:	b29b      	uxth	r3, r3
 8003020:	121b      	asrs	r3, r3, #8
 8003022:	b2da      	uxtb	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800302e:	1c5a      	adds	r2, r3, #1
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003034:	e065      	b.n	8003102 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800303a:	2b01      	cmp	r3, #1
 800303c:	d10b      	bne.n	8003056 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003042:	b2da      	uxtb	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800304e:	1c5a      	adds	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003054:	e055      	b.n	8003102 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800305a:	2b02      	cmp	r3, #2
 800305c:	d151      	bne.n	8003102 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	2b22      	cmp	r3, #34	; 0x22
 8003062:	d10d      	bne.n	8003080 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003072:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800307e:	e040      	b.n	8003102 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003084:	b29b      	uxth	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d015      	beq.n	80030b6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800308a:	7bfb      	ldrb	r3, [r7, #15]
 800308c:	2b21      	cmp	r3, #33	; 0x21
 800308e:	d112      	bne.n	80030b6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	781a      	ldrb	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	1c5a      	adds	r2, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80030b4:	e025      	b.n	8003102 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d120      	bne.n	8003102 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
 80030c2:	2b21      	cmp	r3, #33	; 0x21
 80030c4:	d11d      	bne.n	8003102 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030d4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030e4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7ff fe36 	bl	8002d6e <HAL_I2C_MemTxCpltCallback>
}
 8003102:	bf00      	nop
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b084      	sub	sp, #16
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b22      	cmp	r3, #34	; 0x22
 800311c:	f040 80ac 	bne.w	8003278 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003124:	b29b      	uxth	r3, r3
 8003126:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2b03      	cmp	r3, #3
 800312c:	d921      	bls.n	8003172 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	691a      	ldr	r2, [r3, #16]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	b2d2      	uxtb	r2, r2
 800313a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003158:	b29b      	uxth	r3, r3
 800315a:	2b03      	cmp	r3, #3
 800315c:	f040 808c 	bne.w	8003278 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800316e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003170:	e082      	b.n	8003278 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003176:	2b02      	cmp	r3, #2
 8003178:	d075      	beq.n	8003266 <I2C_MasterReceive_RXNE+0x15c>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d002      	beq.n	8003186 <I2C_MasterReceive_RXNE+0x7c>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d16f      	bne.n	8003266 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f001 fa60 	bl	800464c <I2C_WaitOnSTOPRequestThroughIT>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d142      	bne.n	8003218 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031a0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031b0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	691a      	ldr	r2, [r3, #16]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	3b01      	subs	r3, #1
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b40      	cmp	r3, #64	; 0x40
 80031ea:	d10a      	bne.n	8003202 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff fdc1 	bl	8002d82 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003200:	e03a      	b.n	8003278 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2212      	movs	r2, #18
 800320e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7ff fd76 	bl	8002d02 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003216:	e02f      	b.n	8003278 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003226:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691a      	ldr	r2, [r3, #16]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	1c5a      	adds	r2, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003244:	b29b      	uxth	r3, r3
 8003246:	3b01      	subs	r3, #1
 8003248:	b29a      	uxth	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2220      	movs	r2, #32
 8003252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7ff fd99 	bl	8002d96 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003264:	e008      	b.n	8003278 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003274:	605a      	str	r2, [r3, #4]
}
 8003276:	e7ff      	b.n	8003278 <I2C_MasterReceive_RXNE+0x16e>
 8003278:	bf00      	nop
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003292:	b29b      	uxth	r3, r3
 8003294:	2b04      	cmp	r3, #4
 8003296:	d11b      	bne.n	80032d0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032a6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691a      	ldr	r2, [r3, #16]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80032ce:	e0bd      	b.n	800344c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	2b03      	cmp	r3, #3
 80032d8:	d129      	bne.n	800332e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032e8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d00a      	beq.n	8003306 <I2C_MasterReceive_BTF+0x86>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d007      	beq.n	8003306 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003304:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003322:	b29b      	uxth	r3, r3
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800332c:	e08e      	b.n	800344c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003332:	b29b      	uxth	r3, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d176      	bne.n	8003426 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d002      	beq.n	8003344 <I2C_MasterReceive_BTF+0xc4>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2b10      	cmp	r3, #16
 8003342:	d108      	bne.n	8003356 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	e019      	b.n	800338a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2b04      	cmp	r3, #4
 800335a:	d002      	beq.n	8003362 <I2C_MasterReceive_BTF+0xe2>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2b02      	cmp	r3, #2
 8003360:	d108      	bne.n	8003374 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	e00a      	b.n	800338a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2b10      	cmp	r3, #16
 8003378:	d007      	beq.n	800338a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003388:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	691a      	ldr	r2, [r3, #16]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	b2d2      	uxtb	r2, r2
 8003396:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	691a      	ldr	r2, [r3, #16]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	1c5a      	adds	r2, r3, #1
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	3b01      	subs	r3, #1
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80033e4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b40      	cmp	r3, #64	; 0x40
 80033f8:	d10a      	bne.n	8003410 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f7ff fcba 	bl	8002d82 <HAL_I2C_MemRxCpltCallback>
}
 800340e:	e01d      	b.n	800344c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2212      	movs	r2, #18
 800341c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff fc6f 	bl	8002d02 <HAL_I2C_MasterRxCpltCallback>
}
 8003424:	e012      	b.n	800344c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003442:	b29b      	uxth	r3, r3
 8003444:	3b01      	subs	r3, #1
 8003446:	b29a      	uxth	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800344c:	bf00      	nop
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b40      	cmp	r3, #64	; 0x40
 8003466:	d117      	bne.n	8003498 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800346c:	2b00      	cmp	r3, #0
 800346e:	d109      	bne.n	8003484 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003474:	b2db      	uxtb	r3, r3
 8003476:	461a      	mov	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003480:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003482:	e067      	b.n	8003554 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003488:	b2db      	uxtb	r3, r3
 800348a:	f043 0301 	orr.w	r3, r3, #1
 800348e:	b2da      	uxtb	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	611a      	str	r2, [r3, #16]
}
 8003496:	e05d      	b.n	8003554 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034a0:	d133      	bne.n	800350a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b21      	cmp	r3, #33	; 0x21
 80034ac:	d109      	bne.n	80034c2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	461a      	mov	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034be:	611a      	str	r2, [r3, #16]
 80034c0:	e008      	b.n	80034d4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d004      	beq.n	80034e6 <I2C_Master_SB+0x92>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d108      	bne.n	80034f8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d032      	beq.n	8003554 <I2C_Master_SB+0x100>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d02d      	beq.n	8003554 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003506:	605a      	str	r2, [r3, #4]
}
 8003508:	e024      	b.n	8003554 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10e      	bne.n	8003530 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	b29b      	uxth	r3, r3
 8003518:	11db      	asrs	r3, r3, #7
 800351a:	b2db      	uxtb	r3, r3
 800351c:	f003 0306 	and.w	r3, r3, #6
 8003520:	b2db      	uxtb	r3, r3
 8003522:	f063 030f 	orn	r3, r3, #15
 8003526:	b2da      	uxtb	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	611a      	str	r2, [r3, #16]
}
 800352e:	e011      	b.n	8003554 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003534:	2b01      	cmp	r3, #1
 8003536:	d10d      	bne.n	8003554 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353c:	b29b      	uxth	r3, r3
 800353e:	11db      	asrs	r3, r3, #7
 8003540:	b2db      	uxtb	r3, r3
 8003542:	f003 0306 	and.w	r3, r3, #6
 8003546:	b2db      	uxtb	r3, r3
 8003548:	f063 030e 	orn	r3, r3, #14
 800354c:	b2da      	uxtb	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	611a      	str	r2, [r3, #16]
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356c:	b2da      	uxtb	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003578:	2b00      	cmp	r3, #0
 800357a:	d004      	beq.n	8003586 <I2C_Master_ADD10+0x26>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003582:	2b00      	cmp	r3, #0
 8003584:	d108      	bne.n	8003598 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00c      	beq.n	80035a8 <I2C_Master_ADD10+0x48>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003594:	2b00      	cmp	r3, #0
 8003596:	d007      	beq.n	80035a8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035a6:	605a      	str	r2, [r3, #4]
  }
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b091      	sub	sp, #68	; 0x44
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ca:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b22      	cmp	r3, #34	; 0x22
 80035dc:	f040 8169 	bne.w	80038b2 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10f      	bne.n	8003608 <I2C_Master_ADDR+0x54>
 80035e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80035ec:	2b40      	cmp	r3, #64	; 0x40
 80035ee:	d10b      	bne.n	8003608 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f0:	2300      	movs	r3, #0
 80035f2:	633b      	str	r3, [r7, #48]	; 0x30
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	633b      	str	r3, [r7, #48]	; 0x30
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	633b      	str	r3, [r7, #48]	; 0x30
 8003604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003606:	e160      	b.n	80038ca <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800360c:	2b00      	cmp	r3, #0
 800360e:	d11d      	bne.n	800364c <I2C_Master_ADDR+0x98>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003618:	d118      	bne.n	800364c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800361a:	2300      	movs	r3, #0
 800361c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800362e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800363e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003644:	1c5a      	adds	r2, r3, #1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	651a      	str	r2, [r3, #80]	; 0x50
 800364a:	e13e      	b.n	80038ca <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003650:	b29b      	uxth	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d113      	bne.n	800367e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003656:	2300      	movs	r3, #0
 8003658:	62bb      	str	r3, [r7, #40]	; 0x28
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	62bb      	str	r3, [r7, #40]	; 0x28
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	62bb      	str	r3, [r7, #40]	; 0x28
 800366a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	e115      	b.n	80038aa <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003682:	b29b      	uxth	r3, r3
 8003684:	2b01      	cmp	r3, #1
 8003686:	f040 808a 	bne.w	800379e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800368a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003690:	d137      	bne.n	8003702 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036a0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036b0:	d113      	bne.n	80036da <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036c0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036c2:	2300      	movs	r3, #0
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	e0e7      	b.n	80038aa <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036da:	2300      	movs	r3, #0
 80036dc:	623b      	str	r3, [r7, #32]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	623b      	str	r3, [r7, #32]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	623b      	str	r3, [r7, #32]
 80036ee:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	e0d3      	b.n	80038aa <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003704:	2b08      	cmp	r3, #8
 8003706:	d02e      	beq.n	8003766 <I2C_Master_ADDR+0x1b2>
 8003708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370a:	2b20      	cmp	r3, #32
 800370c:	d02b      	beq.n	8003766 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800370e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003710:	2b12      	cmp	r3, #18
 8003712:	d102      	bne.n	800371a <I2C_Master_ADDR+0x166>
 8003714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003716:	2b01      	cmp	r3, #1
 8003718:	d125      	bne.n	8003766 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800371a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371c:	2b04      	cmp	r3, #4
 800371e:	d00e      	beq.n	800373e <I2C_Master_ADDR+0x18a>
 8003720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003722:	2b02      	cmp	r3, #2
 8003724:	d00b      	beq.n	800373e <I2C_Master_ADDR+0x18a>
 8003726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003728:	2b10      	cmp	r3, #16
 800372a:	d008      	beq.n	800373e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	e007      	b.n	800374e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800374c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	61fb      	str	r3, [r7, #28]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	61fb      	str	r3, [r7, #28]
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	e0a1      	b.n	80038aa <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003774:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003776:	2300      	movs	r3, #0
 8003778:	61bb      	str	r3, [r7, #24]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	61bb      	str	r3, [r7, #24]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	61bb      	str	r3, [r7, #24]
 800378a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	e085      	b.n	80038aa <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d14d      	bne.n	8003844 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80037a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d016      	beq.n	80037dc <I2C_Master_ADDR+0x228>
 80037ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d013      	beq.n	80037dc <I2C_Master_ADDR+0x228>
 80037b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b6:	2b10      	cmp	r3, #16
 80037b8:	d010      	beq.n	80037dc <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037c8:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	e007      	b.n	80037ec <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037ea:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037fa:	d117      	bne.n	800382c <I2C_Master_ADDR+0x278>
 80037fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003802:	d00b      	beq.n	800381c <I2C_Master_ADDR+0x268>
 8003804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003806:	2b01      	cmp	r3, #1
 8003808:	d008      	beq.n	800381c <I2C_Master_ADDR+0x268>
 800380a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380c:	2b08      	cmp	r3, #8
 800380e:	d005      	beq.n	800381c <I2C_Master_ADDR+0x268>
 8003810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003812:	2b10      	cmp	r3, #16
 8003814:	d002      	beq.n	800381c <I2C_Master_ADDR+0x268>
 8003816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003818:	2b20      	cmp	r3, #32
 800381a:	d107      	bne.n	800382c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800382a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	617b      	str	r3, [r7, #20]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	e032      	b.n	80038aa <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003852:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800385e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003862:	d117      	bne.n	8003894 <I2C_Master_ADDR+0x2e0>
 8003864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003866:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800386a:	d00b      	beq.n	8003884 <I2C_Master_ADDR+0x2d0>
 800386c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386e:	2b01      	cmp	r3, #1
 8003870:	d008      	beq.n	8003884 <I2C_Master_ADDR+0x2d0>
 8003872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003874:	2b08      	cmp	r3, #8
 8003876:	d005      	beq.n	8003884 <I2C_Master_ADDR+0x2d0>
 8003878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387a:	2b10      	cmp	r3, #16
 800387c:	d002      	beq.n	8003884 <I2C_Master_ADDR+0x2d0>
 800387e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003880:	2b20      	cmp	r3, #32
 8003882:	d107      	bne.n	8003894 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003892:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003894:	2300      	movs	r3, #0
 8003896:	613b      	str	r3, [r7, #16]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	613b      	str	r3, [r7, #16]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	613b      	str	r3, [r7, #16]
 80038a8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80038b0:	e00b      	b.n	80038ca <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b2:	2300      	movs	r3, #0
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	68fb      	ldr	r3, [r7, #12]
}
 80038c8:	e7ff      	b.n	80038ca <I2C_Master_ADDR+0x316>
 80038ca:	bf00      	nop
 80038cc:	3744      	adds	r7, #68	; 0x44
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b084      	sub	sp, #16
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d02b      	beq.n	8003948 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	781a      	ldrb	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003918:	b29b      	uxth	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d114      	bne.n	8003948 <I2C_SlaveTransmit_TXE+0x72>
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	2b29      	cmp	r3, #41	; 0x29
 8003922:	d111      	bne.n	8003948 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003932:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2221      	movs	r2, #33	; 0x21
 8003938:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2228      	movs	r2, #40	; 0x28
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff f9e7 	bl	8002d16 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003948:	bf00      	nop
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395c:	b29b      	uxth	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d011      	beq.n	8003986 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	781a      	ldrb	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	1c5a      	adds	r2, r3, #1
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397c:	b29b      	uxth	r3, r3
 800397e:	3b01      	subs	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b084      	sub	sp, #16
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d02c      	beq.n	8003a06 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d114      	bne.n	8003a06 <I2C_SlaveReceive_RXNE+0x74>
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	2b2a      	cmp	r3, #42	; 0x2a
 80039e0:	d111      	bne.n	8003a06 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039f0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2222      	movs	r2, #34	; 0x22
 80039f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2228      	movs	r2, #40	; 0x28
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7ff f992 	bl	8002d2a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003a06:	bf00      	nop
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b083      	sub	sp, #12
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d012      	beq.n	8003a46 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	691a      	ldr	r2, [r3, #16]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b084      	sub	sp, #16
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
 8003a5a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a6c:	2b28      	cmp	r3, #40	; 0x28
 8003a6e:	d127      	bne.n	8003ac0 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a7e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	089b      	lsrs	r3, r3, #2
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	09db      	lsrs	r3, r3, #7
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d103      	bne.n	8003aa4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	81bb      	strh	r3, [r7, #12]
 8003aa2:	e002      	b.n	8003aaa <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003ab2:	89ba      	ldrh	r2, [r7, #12]
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff f940 	bl	8002d3e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003abe:	e00e      	b.n	8003ade <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	60bb      	str	r3, [r7, #8]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	60bb      	str	r3, [r7, #8]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	60bb      	str	r3, [r7, #8]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003ade:	bf00      	nop
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b06:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60bb      	str	r3, [r7, #8]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	60bb      	str	r3, [r7, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0201 	orr.w	r2, r2, #1
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b34:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b44:	d172      	bne.n	8003c2c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b46:	7bfb      	ldrb	r3, [r7, #15]
 8003b48:	2b22      	cmp	r3, #34	; 0x22
 8003b4a:	d002      	beq.n	8003b52 <I2C_Slave_STOPF+0x6a>
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
 8003b4e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b50:	d135      	bne.n	8003bbe <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d005      	beq.n	8003b76 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	f043 0204 	orr.w	r2, r3, #4
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b84:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fe f92b 	bl	8001de6 <HAL_DMA_GetState>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d049      	beq.n	8003c2a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9a:	4a69      	ldr	r2, [pc, #420]	; (8003d40 <I2C_Slave_STOPF+0x258>)
 8003b9c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fe f8fd 	bl	8001da2 <HAL_DMA_Abort_IT>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d03d      	beq.n	8003c2a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bb8:	4610      	mov	r0, r2
 8003bba:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003bbc:	e035      	b.n	8003c2a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d005      	beq.n	8003be2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	f043 0204 	orr.w	r2, r3, #4
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bf0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fe f8f5 	bl	8001de6 <HAL_DMA_GetState>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d014      	beq.n	8003c2c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c06:	4a4e      	ldr	r2, [pc, #312]	; (8003d40 <I2C_Slave_STOPF+0x258>)
 8003c08:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fe f8c7 	bl	8001da2 <HAL_DMA_Abort_IT>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d008      	beq.n	8003c2c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c24:	4610      	mov	r0, r2
 8003c26:	4798      	blx	r3
 8003c28:	e000      	b.n	8003c2c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c2a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d03e      	beq.n	8003cb4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d112      	bne.n	8003c6a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691a      	ldr	r2, [r3, #16]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	3b01      	subs	r3, #1
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c74:	2b40      	cmp	r3, #64	; 0x40
 8003c76:	d112      	bne.n	8003c9e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691a      	ldr	r2, [r3, #16]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cac:	f043 0204 	orr.w	r2, r3, #4
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f843 	bl	8003d48 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003cc2:	e039      	b.n	8003d38 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
 8003cc6:	2b2a      	cmp	r3, #42	; 0x2a
 8003cc8:	d109      	bne.n	8003cde <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2228      	movs	r2, #40	; 0x28
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7ff f826 	bl	8002d2a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b28      	cmp	r3, #40	; 0x28
 8003ce8:	d111      	bne.n	8003d0e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a15      	ldr	r2, [pc, #84]	; (8003d44 <I2C_Slave_STOPF+0x25c>)
 8003cee:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7ff f827 	bl	8002d5a <HAL_I2C_ListenCpltCallback>
}
 8003d0c:	e014      	b.n	8003d38 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	2b22      	cmp	r3, #34	; 0x22
 8003d14:	d002      	beq.n	8003d1c <I2C_Slave_STOPF+0x234>
 8003d16:	7bfb      	ldrb	r3, [r7, #15]
 8003d18:	2b22      	cmp	r3, #34	; 0x22
 8003d1a:	d10d      	bne.n	8003d38 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2220      	movs	r2, #32
 8003d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7fe fff9 	bl	8002d2a <HAL_I2C_SlaveRxCpltCallback>
}
 8003d38:	bf00      	nop
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	0800424d 	.word	0x0800424d
 8003d44:	ffff0000 	.word	0xffff0000

08003d48 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d56:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d5e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003d60:	7bbb      	ldrb	r3, [r7, #14]
 8003d62:	2b10      	cmp	r3, #16
 8003d64:	d002      	beq.n	8003d6c <I2C_ITError+0x24>
 8003d66:	7bbb      	ldrb	r3, [r7, #14]
 8003d68:	2b40      	cmp	r3, #64	; 0x40
 8003d6a:	d10a      	bne.n	8003d82 <I2C_ITError+0x3a>
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
 8003d6e:	2b22      	cmp	r3, #34	; 0x22
 8003d70:	d107      	bne.n	8003d82 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d80:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d82:	7bfb      	ldrb	r3, [r7, #15]
 8003d84:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d88:	2b28      	cmp	r3, #40	; 0x28
 8003d8a:	d107      	bne.n	8003d9c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2228      	movs	r2, #40	; 0x28
 8003d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d9a:	e015      	b.n	8003dc8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003da6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003daa:	d00a      	beq.n	8003dc2 <I2C_ITError+0x7a>
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
 8003dae:	2b60      	cmp	r3, #96	; 0x60
 8003db0:	d007      	beq.n	8003dc2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2220      	movs	r2, #32
 8003db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dd6:	d162      	bne.n	8003e9e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003de6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d020      	beq.n	8003e38 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfa:	4a6a      	ldr	r2, [pc, #424]	; (8003fa4 <I2C_ITError+0x25c>)
 8003dfc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fd ffcd 	bl	8001da2 <HAL_DMA_Abort_IT>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 8089 	beq.w	8003f22 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0201 	bic.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e32:	4610      	mov	r0, r2
 8003e34:	4798      	blx	r3
 8003e36:	e074      	b.n	8003f22 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3c:	4a59      	ldr	r2, [pc, #356]	; (8003fa4 <I2C_ITError+0x25c>)
 8003e3e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7fd ffac 	bl	8001da2 <HAL_DMA_Abort_IT>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d068      	beq.n	8003f22 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5a:	2b40      	cmp	r3, #64	; 0x40
 8003e5c:	d10b      	bne.n	8003e76 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	b2d2      	uxtb	r2, r2
 8003e6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	1c5a      	adds	r2, r3, #1
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0201 	bic.w	r2, r2, #1
 8003e84:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e98:	4610      	mov	r0, r2
 8003e9a:	4798      	blx	r3
 8003e9c:	e041      	b.n	8003f22 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b60      	cmp	r3, #96	; 0x60
 8003ea8:	d125      	bne.n	8003ef6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec2:	2b40      	cmp	r3, #64	; 0x40
 8003ec4:	d10b      	bne.n	8003ede <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	691a      	ldr	r2, [r3, #16]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	1c5a      	adds	r2, r3, #1
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0201 	bic.w	r2, r2, #1
 8003eec:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7fe ff5b 	bl	8002daa <HAL_I2C_AbortCpltCallback>
 8003ef4:	e015      	b.n	8003f22 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f00:	2b40      	cmp	r3, #64	; 0x40
 8003f02:	d10b      	bne.n	8003f1c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	691a      	ldr	r2, [r3, #16]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7fe ff3a 	bl	8002d96 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10e      	bne.n	8003f50 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d109      	bne.n	8003f50 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d104      	bne.n	8003f50 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d007      	beq.n	8003f60 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f5e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f66:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d113      	bne.n	8003f9c <I2C_ITError+0x254>
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
 8003f76:	2b28      	cmp	r3, #40	; 0x28
 8003f78:	d110      	bne.n	8003f9c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a0a      	ldr	r2, [pc, #40]	; (8003fa8 <I2C_ITError+0x260>)
 8003f7e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7fe fedf 	bl	8002d5a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003f9c:	bf00      	nop
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	0800424d 	.word	0x0800424d
 8003fa8:	ffff0000 	.word	0xffff0000

08003fac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b088      	sub	sp, #32
 8003fb0:	af02      	add	r7, sp, #8
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	607a      	str	r2, [r7, #4]
 8003fb6:	603b      	str	r3, [r7, #0]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d006      	beq.n	8003fd6 <I2C_MasterRequestWrite+0x2a>
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d003      	beq.n	8003fd6 <I2C_MasterRequestWrite+0x2a>
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fd4:	d108      	bne.n	8003fe8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	e00b      	b.n	8004000 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fec:	2b12      	cmp	r3, #18
 8003fee:	d107      	bne.n	8004000 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ffe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 f9c5 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00d      	beq.n	8004034 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004026:	d103      	bne.n	8004030 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800402e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e035      	b.n	80040a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800403c:	d108      	bne.n	8004050 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800403e:	897b      	ldrh	r3, [r7, #10]
 8004040:	b2db      	uxtb	r3, r3
 8004042:	461a      	mov	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800404c:	611a      	str	r2, [r3, #16]
 800404e:	e01b      	b.n	8004088 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004050:	897b      	ldrh	r3, [r7, #10]
 8004052:	11db      	asrs	r3, r3, #7
 8004054:	b2db      	uxtb	r3, r3
 8004056:	f003 0306 	and.w	r3, r3, #6
 800405a:	b2db      	uxtb	r3, r3
 800405c:	f063 030f 	orn	r3, r3, #15
 8004060:	b2da      	uxtb	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	490e      	ldr	r1, [pc, #56]	; (80040a8 <I2C_MasterRequestWrite+0xfc>)
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 f9eb 	bl	800444a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e010      	b.n	80040a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800407e:	897b      	ldrh	r3, [r7, #10]
 8004080:	b2da      	uxtb	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	4907      	ldr	r1, [pc, #28]	; (80040ac <I2C_MasterRequestWrite+0x100>)
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 f9db 	bl	800444a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	00010008 	.word	0x00010008
 80040ac:	00010002 	.word	0x00010002

080040b0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b088      	sub	sp, #32
 80040b4:	af02      	add	r7, sp, #8
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	607a      	str	r2, [r7, #4]
 80040ba:	603b      	str	r3, [r7, #0]
 80040bc:	460b      	mov	r3, r1
 80040be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040d4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d006      	beq.n	80040ea <I2C_MasterRequestRead+0x3a>
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d003      	beq.n	80040ea <I2C_MasterRequestRead+0x3a>
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040e8:	d108      	bne.n	80040fc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	e00b      	b.n	8004114 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004100:	2b11      	cmp	r3, #17
 8004102:	d107      	bne.n	8004114 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004112:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f000 f93b 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00d      	beq.n	8004148 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800413a:	d103      	bne.n	8004144 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004142:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e079      	b.n	800423c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004150:	d108      	bne.n	8004164 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004152:	897b      	ldrh	r3, [r7, #10]
 8004154:	b2db      	uxtb	r3, r3
 8004156:	f043 0301 	orr.w	r3, r3, #1
 800415a:	b2da      	uxtb	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	611a      	str	r2, [r3, #16]
 8004162:	e05f      	b.n	8004224 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004164:	897b      	ldrh	r3, [r7, #10]
 8004166:	11db      	asrs	r3, r3, #7
 8004168:	b2db      	uxtb	r3, r3
 800416a:	f003 0306 	and.w	r3, r3, #6
 800416e:	b2db      	uxtb	r3, r3
 8004170:	f063 030f 	orn	r3, r3, #15
 8004174:	b2da      	uxtb	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	4930      	ldr	r1, [pc, #192]	; (8004244 <I2C_MasterRequestRead+0x194>)
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 f961 	bl	800444a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e054      	b.n	800423c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004192:	897b      	ldrh	r3, [r7, #10]
 8004194:	b2da      	uxtb	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	4929      	ldr	r1, [pc, #164]	; (8004248 <I2C_MasterRequestRead+0x198>)
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 f951 	bl	800444a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e044      	b.n	800423c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b2:	2300      	movs	r3, #0
 80041b4:	613b      	str	r3, [r7, #16]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	613b      	str	r3, [r7, #16]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	613b      	str	r3, [r7, #16]
 80041c6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041d6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 f8d9 	bl	800439c <I2C_WaitOnFlagUntilTimeout>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00d      	beq.n	800420c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041fe:	d103      	bne.n	8004208 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004206:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e017      	b.n	800423c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800420c:	897b      	ldrh	r3, [r7, #10]
 800420e:	11db      	asrs	r3, r3, #7
 8004210:	b2db      	uxtb	r3, r3
 8004212:	f003 0306 	and.w	r3, r3, #6
 8004216:	b2db      	uxtb	r3, r3
 8004218:	f063 030e 	orn	r3, r3, #14
 800421c:	b2da      	uxtb	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	4907      	ldr	r1, [pc, #28]	; (8004248 <I2C_MasterRequestRead+0x198>)
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 f90d 	bl	800444a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e000      	b.n	800423c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3718      	adds	r7, #24
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	00010008 	.word	0x00010008
 8004248:	00010002 	.word	0x00010002

0800424c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004264:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004266:	4b4b      	ldr	r3, [pc, #300]	; (8004394 <I2C_DMAAbort+0x148>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	08db      	lsrs	r3, r3, #3
 800426c:	4a4a      	ldr	r2, [pc, #296]	; (8004398 <I2C_DMAAbort+0x14c>)
 800426e:	fba2 2303 	umull	r2, r3, r2, r3
 8004272:	0a1a      	lsrs	r2, r3, #8
 8004274:	4613      	mov	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	00da      	lsls	r2, r3, #3
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d106      	bne.n	8004294 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	f043 0220 	orr.w	r2, r3, #32
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004292:	e00a      	b.n	80042aa <I2C_DMAAbort+0x5e>
    }
    count--;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	3b01      	subs	r3, #1
 8004298:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a8:	d0ea      	beq.n	8004280 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b6:	2200      	movs	r2, #0
 80042b8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c6:	2200      	movs	r2, #0
 80042c8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042d8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	2200      	movs	r2, #0
 80042de:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ec:	2200      	movs	r2, #0
 80042ee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d003      	beq.n	8004300 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fc:	2200      	movs	r2, #0
 80042fe:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0201 	bic.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b60      	cmp	r3, #96	; 0x60
 800431a:	d10e      	bne.n	800433a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	2220      	movs	r2, #32
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	2200      	movs	r2, #0
 8004330:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004332:	6978      	ldr	r0, [r7, #20]
 8004334:	f7fe fd39 	bl	8002daa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004338:	e027      	b.n	800438a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800433a:	7cfb      	ldrb	r3, [r7, #19]
 800433c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004340:	2b28      	cmp	r3, #40	; 0x28
 8004342:	d117      	bne.n	8004374 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 0201 	orr.w	r2, r2, #1
 8004352:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004362:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	2200      	movs	r2, #0
 8004368:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2228      	movs	r2, #40	; 0x28
 800436e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004372:	e007      	b.n	8004384 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	2220      	movs	r2, #32
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004384:	6978      	ldr	r0, [r7, #20]
 8004386:	f7fe fd06 	bl	8002d96 <HAL_I2C_ErrorCallback>
}
 800438a:	bf00      	nop
 800438c:	3718      	adds	r7, #24
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	20000000 	.word	0x20000000
 8004398:	14f8b589 	.word	0x14f8b589

0800439c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	4613      	mov	r3, r2
 80043aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043ac:	e025      	b.n	80043fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b4:	d021      	beq.n	80043fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b6:	f7fd fbb3 	bl	8001b20 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d302      	bcc.n	80043cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d116      	bne.n	80043fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	f043 0220 	orr.w	r2, r3, #32
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e023      	b.n	8004442 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	0c1b      	lsrs	r3, r3, #16
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b01      	cmp	r3, #1
 8004402:	d10d      	bne.n	8004420 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	43da      	mvns	r2, r3
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	4013      	ands	r3, r2
 8004410:	b29b      	uxth	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	bf0c      	ite	eq
 8004416:	2301      	moveq	r3, #1
 8004418:	2300      	movne	r3, #0
 800441a:	b2db      	uxtb	r3, r3
 800441c:	461a      	mov	r2, r3
 800441e:	e00c      	b.n	800443a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	43da      	mvns	r2, r3
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	4013      	ands	r3, r2
 800442c:	b29b      	uxth	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	bf0c      	ite	eq
 8004432:	2301      	moveq	r3, #1
 8004434:	2300      	movne	r3, #0
 8004436:	b2db      	uxtb	r3, r3
 8004438:	461a      	mov	r2, r3
 800443a:	79fb      	ldrb	r3, [r7, #7]
 800443c:	429a      	cmp	r2, r3
 800443e:	d0b6      	beq.n	80043ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b084      	sub	sp, #16
 800444e:	af00      	add	r7, sp, #0
 8004450:	60f8      	str	r0, [r7, #12]
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	607a      	str	r2, [r7, #4]
 8004456:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004458:	e051      	b.n	80044fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004468:	d123      	bne.n	80044b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004478:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004482:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2220      	movs	r2, #32
 800448e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	f043 0204 	orr.w	r2, r3, #4
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e046      	b.n	8004540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b8:	d021      	beq.n	80044fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ba:	f7fd fb31 	bl	8001b20 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d302      	bcc.n	80044d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d116      	bne.n	80044fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2220      	movs	r2, #32
 80044da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	f043 0220 	orr.w	r2, r3, #32
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e020      	b.n	8004540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	0c1b      	lsrs	r3, r3, #16
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b01      	cmp	r3, #1
 8004506:	d10c      	bne.n	8004522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	43da      	mvns	r2, r3
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	4013      	ands	r3, r2
 8004514:	b29b      	uxth	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	bf14      	ite	ne
 800451a:	2301      	movne	r3, #1
 800451c:	2300      	moveq	r3, #0
 800451e:	b2db      	uxtb	r3, r3
 8004520:	e00b      	b.n	800453a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	43da      	mvns	r2, r3
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	4013      	ands	r3, r2
 800452e:	b29b      	uxth	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	bf14      	ite	ne
 8004534:	2301      	movne	r3, #1
 8004536:	2300      	moveq	r3, #0
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d18d      	bne.n	800445a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004554:	e02d      	b.n	80045b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 f900 	bl	800475c <I2C_IsAcknowledgeFailed>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e02d      	b.n	80045c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456c:	d021      	beq.n	80045b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800456e:	f7fd fad7 	bl	8001b20 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	429a      	cmp	r2, r3
 800457c:	d302      	bcc.n	8004584 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d116      	bne.n	80045b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2220      	movs	r2, #32
 800458e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	f043 0220 	orr.w	r2, r3, #32
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e007      	b.n	80045c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045bc:	2b80      	cmp	r3, #128	; 0x80
 80045be:	d1ca      	bne.n	8004556 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b084      	sub	sp, #16
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045d6:	e02d      	b.n	8004634 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 f8bf 	bl	800475c <I2C_IsAcknowledgeFailed>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e02d      	b.n	8004644 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ee:	d021      	beq.n	8004634 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f0:	f7fd fa96 	bl	8001b20 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d302      	bcc.n	8004606 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d116      	bne.n	8004634 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004620:	f043 0220 	orr.w	r2, r3, #32
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e007      	b.n	8004644 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	f003 0304 	and.w	r3, r3, #4
 800463e:	2b04      	cmp	r3, #4
 8004640:	d1ca      	bne.n	80045d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004658:	4b13      	ldr	r3, [pc, #76]	; (80046a8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	08db      	lsrs	r3, r3, #3
 800465e:	4a13      	ldr	r2, [pc, #76]	; (80046ac <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004660:	fba2 2303 	umull	r2, r3, r2, r3
 8004664:	0a1a      	lsrs	r2, r3, #8
 8004666:	4613      	mov	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	3b01      	subs	r3, #1
 8004672:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d107      	bne.n	800468a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	f043 0220 	orr.w	r2, r3, #32
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e008      	b.n	800469c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004698:	d0e9      	beq.n	800466e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr
 80046a8:	20000000 	.word	0x20000000
 80046ac:	14f8b589 	.word	0x14f8b589

080046b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046bc:	e042      	b.n	8004744 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	f003 0310 	and.w	r3, r3, #16
 80046c8:	2b10      	cmp	r3, #16
 80046ca:	d119      	bne.n	8004700 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f06f 0210 	mvn.w	r2, #16
 80046d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2220      	movs	r2, #32
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e029      	b.n	8004754 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004700:	f7fd fa0e 	bl	8001b20 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	429a      	cmp	r2, r3
 800470e:	d302      	bcc.n	8004716 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d116      	bne.n	8004744 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	f043 0220 	orr.w	r2, r3, #32
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e007      	b.n	8004754 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474e:	2b40      	cmp	r3, #64	; 0x40
 8004750:	d1b5      	bne.n	80046be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800476e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004772:	d11b      	bne.n	80047ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800477c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004798:	f043 0204 	orr.w	r2, r3, #4
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e000      	b.n	80047ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80047ca:	d103      	bne.n	80047d4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80047d2:	e007      	b.n	80047e4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80047dc:	d102      	bne.n	80047e4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2208      	movs	r2, #8
 80047e2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80047f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047f2:	b08f      	sub	sp, #60	; 0x3c
 80047f4:	af0a      	add	r7, sp, #40	; 0x28
 80047f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e10f      	b.n	8004a22 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b00      	cmp	r3, #0
 8004812:	d106      	bne.n	8004822 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f005 ffdb 	bl	800a7d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2203      	movs	r2, #3
 8004826:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004832:	2b00      	cmp	r3, #0
 8004834:	d102      	bne.n	800483c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4618      	mov	r0, r3
 8004842:	f002 fac2 	bl	8006dca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	603b      	str	r3, [r7, #0]
 800484c:	687e      	ldr	r6, [r7, #4]
 800484e:	466d      	mov	r5, sp
 8004850:	f106 0410 	add.w	r4, r6, #16
 8004854:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004856:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004858:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800485a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800485c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004860:	e885 0003 	stmia.w	r5, {r0, r1}
 8004864:	1d33      	adds	r3, r6, #4
 8004866:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004868:	6838      	ldr	r0, [r7, #0]
 800486a:	f002 f999 	bl	8006ba0 <USB_CoreInit>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d005      	beq.n	8004880 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e0d0      	b.n	8004a22 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2100      	movs	r1, #0
 8004886:	4618      	mov	r0, r3
 8004888:	f002 fab0 	bl	8006dec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800488c:	2300      	movs	r3, #0
 800488e:	73fb      	strb	r3, [r7, #15]
 8004890:	e04a      	b.n	8004928 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004892:	7bfa      	ldrb	r2, [r7, #15]
 8004894:	6879      	ldr	r1, [r7, #4]
 8004896:	4613      	mov	r3, r2
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	4413      	add	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	440b      	add	r3, r1
 80048a0:	333d      	adds	r3, #61	; 0x3d
 80048a2:	2201      	movs	r2, #1
 80048a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80048a6:	7bfa      	ldrb	r2, [r7, #15]
 80048a8:	6879      	ldr	r1, [r7, #4]
 80048aa:	4613      	mov	r3, r2
 80048ac:	00db      	lsls	r3, r3, #3
 80048ae:	4413      	add	r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	440b      	add	r3, r1
 80048b4:	333c      	adds	r3, #60	; 0x3c
 80048b6:	7bfa      	ldrb	r2, [r7, #15]
 80048b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80048ba:	7bfa      	ldrb	r2, [r7, #15]
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
 80048be:	b298      	uxth	r0, r3
 80048c0:	6879      	ldr	r1, [r7, #4]
 80048c2:	4613      	mov	r3, r2
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	4413      	add	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	440b      	add	r3, r1
 80048cc:	3344      	adds	r3, #68	; 0x44
 80048ce:	4602      	mov	r2, r0
 80048d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80048d2:	7bfa      	ldrb	r2, [r7, #15]
 80048d4:	6879      	ldr	r1, [r7, #4]
 80048d6:	4613      	mov	r3, r2
 80048d8:	00db      	lsls	r3, r3, #3
 80048da:	4413      	add	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	440b      	add	r3, r1
 80048e0:	3340      	adds	r3, #64	; 0x40
 80048e2:	2200      	movs	r2, #0
 80048e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80048e6:	7bfa      	ldrb	r2, [r7, #15]
 80048e8:	6879      	ldr	r1, [r7, #4]
 80048ea:	4613      	mov	r3, r2
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	4413      	add	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	440b      	add	r3, r1
 80048f4:	3348      	adds	r3, #72	; 0x48
 80048f6:	2200      	movs	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80048fa:	7bfa      	ldrb	r2, [r7, #15]
 80048fc:	6879      	ldr	r1, [r7, #4]
 80048fe:	4613      	mov	r3, r2
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	4413      	add	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	440b      	add	r3, r1
 8004908:	334c      	adds	r3, #76	; 0x4c
 800490a:	2200      	movs	r2, #0
 800490c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800490e:	7bfa      	ldrb	r2, [r7, #15]
 8004910:	6879      	ldr	r1, [r7, #4]
 8004912:	4613      	mov	r3, r2
 8004914:	00db      	lsls	r3, r3, #3
 8004916:	4413      	add	r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	440b      	add	r3, r1
 800491c:	3354      	adds	r3, #84	; 0x54
 800491e:	2200      	movs	r2, #0
 8004920:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004922:	7bfb      	ldrb	r3, [r7, #15]
 8004924:	3301      	adds	r3, #1
 8004926:	73fb      	strb	r3, [r7, #15]
 8004928:	7bfa      	ldrb	r2, [r7, #15]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	429a      	cmp	r2, r3
 8004930:	d3af      	bcc.n	8004892 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004932:	2300      	movs	r3, #0
 8004934:	73fb      	strb	r3, [r7, #15]
 8004936:	e044      	b.n	80049c2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004938:	7bfa      	ldrb	r2, [r7, #15]
 800493a:	6879      	ldr	r1, [r7, #4]
 800493c:	4613      	mov	r3, r2
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	4413      	add	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	440b      	add	r3, r1
 8004946:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800494a:	2200      	movs	r2, #0
 800494c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800494e:	7bfa      	ldrb	r2, [r7, #15]
 8004950:	6879      	ldr	r1, [r7, #4]
 8004952:	4613      	mov	r3, r2
 8004954:	00db      	lsls	r3, r3, #3
 8004956:	4413      	add	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	440b      	add	r3, r1
 800495c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004960:	7bfa      	ldrb	r2, [r7, #15]
 8004962:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004964:	7bfa      	ldrb	r2, [r7, #15]
 8004966:	6879      	ldr	r1, [r7, #4]
 8004968:	4613      	mov	r3, r2
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	4413      	add	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	440b      	add	r3, r1
 8004972:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004976:	2200      	movs	r2, #0
 8004978:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800497a:	7bfa      	ldrb	r2, [r7, #15]
 800497c:	6879      	ldr	r1, [r7, #4]
 800497e:	4613      	mov	r3, r2
 8004980:	00db      	lsls	r3, r3, #3
 8004982:	4413      	add	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	440b      	add	r3, r1
 8004988:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800498c:	2200      	movs	r2, #0
 800498e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004990:	7bfa      	ldrb	r2, [r7, #15]
 8004992:	6879      	ldr	r1, [r7, #4]
 8004994:	4613      	mov	r3, r2
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	4413      	add	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	440b      	add	r3, r1
 800499e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80049a6:	7bfa      	ldrb	r2, [r7, #15]
 80049a8:	6879      	ldr	r1, [r7, #4]
 80049aa:	4613      	mov	r3, r2
 80049ac:	00db      	lsls	r3, r3, #3
 80049ae:	4413      	add	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	440b      	add	r3, r1
 80049b4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
 80049be:	3301      	adds	r3, #1
 80049c0:	73fb      	strb	r3, [r7, #15]
 80049c2:	7bfa      	ldrb	r2, [r7, #15]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d3b5      	bcc.n	8004938 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	603b      	str	r3, [r7, #0]
 80049d2:	687e      	ldr	r6, [r7, #4]
 80049d4:	466d      	mov	r5, sp
 80049d6:	f106 0410 	add.w	r4, r6, #16
 80049da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80049e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80049ea:	1d33      	adds	r3, r6, #4
 80049ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049ee:	6838      	ldr	r0, [r7, #0]
 80049f0:	f002 fa48 	bl	8006e84 <USB_DevInit>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d005      	beq.n	8004a06 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2202      	movs	r2, #2
 80049fe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e00d      	b.n	8004a22 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f003 fb97 	bl	800814e <USB_DevDisconnect>

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a2a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b084      	sub	sp, #16
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d101      	bne.n	8004a46 <HAL_PCD_Start+0x1c>
 8004a42:	2302      	movs	r3, #2
 8004a44:	e020      	b.n	8004a88 <HAL_PCD_Start+0x5e>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d109      	bne.n	8004a6a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d005      	beq.n	8004a6a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f002 f99a 	bl	8006da8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f003 fb47 	bl	800810c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004a90:	b590      	push	{r4, r7, lr}
 8004a92:	b08d      	sub	sp, #52	; 0x34
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a9e:	6a3b      	ldr	r3, [r7, #32]
 8004aa0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f003 fc05 	bl	80082b6 <USB_GetMode>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f040 848a 	bne.w	80053c8 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f003 fb69 	bl	8008190 <USB_ReadInterrupts>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 8480 	beq.w	80053c6 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	0a1b      	lsrs	r3, r3, #8
 8004ad0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f003 fb56 	bl	8008190 <USB_ReadInterrupts>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d107      	bne.n	8004afe <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	695a      	ldr	r2, [r3, #20]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f002 0202 	and.w	r2, r2, #2
 8004afc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f003 fb44 	bl	8008190 <USB_ReadInterrupts>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	f003 0310 	and.w	r3, r3, #16
 8004b0e:	2b10      	cmp	r3, #16
 8004b10:	d161      	bne.n	8004bd6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	699a      	ldr	r2, [r3, #24]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 0210 	bic.w	r2, r2, #16
 8004b20:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004b22:	6a3b      	ldr	r3, [r7, #32]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	f003 020f 	and.w	r2, r3, #15
 8004b2e:	4613      	mov	r3, r2
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	4413      	add	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	3304      	adds	r3, #4
 8004b40:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	0c5b      	lsrs	r3, r3, #17
 8004b46:	f003 030f 	and.w	r3, r3, #15
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d124      	bne.n	8004b98 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004b54:	4013      	ands	r3, r2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d035      	beq.n	8004bc6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	091b      	lsrs	r3, r3, #4
 8004b62:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004b64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	6a38      	ldr	r0, [r7, #32]
 8004b6e:	f003 f97b 	bl	8007e68 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	691a      	ldr	r2, [r3, #16]
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	091b      	lsrs	r3, r3, #4
 8004b7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b7e:	441a      	add	r2, r3
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	6a1a      	ldr	r2, [r3, #32]
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	091b      	lsrs	r3, r3, #4
 8004b8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b90:	441a      	add	r2, r3
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	621a      	str	r2, [r3, #32]
 8004b96:	e016      	b.n	8004bc6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	0c5b      	lsrs	r3, r3, #17
 8004b9c:	f003 030f 	and.w	r3, r3, #15
 8004ba0:	2b06      	cmp	r3, #6
 8004ba2:	d110      	bne.n	8004bc6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004baa:	2208      	movs	r2, #8
 8004bac:	4619      	mov	r1, r3
 8004bae:	6a38      	ldr	r0, [r7, #32]
 8004bb0:	f003 f95a 	bl	8007e68 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	6a1a      	ldr	r2, [r3, #32]
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	091b      	lsrs	r3, r3, #4
 8004bbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bc0:	441a      	add	r2, r3
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	699a      	ldr	r2, [r3, #24]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f042 0210 	orr.w	r2, r2, #16
 8004bd4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f003 fad8 	bl	8008190 <USB_ReadInterrupts>
 8004be0:	4603      	mov	r3, r0
 8004be2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004be6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004bea:	f040 80a7 	bne.w	8004d3c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f003 fadd 	bl	80081b6 <USB_ReadDevAllOutEpInterrupt>
 8004bfc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004bfe:	e099      	b.n	8004d34 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 808e 	beq.w	8004d28 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c12:	b2d2      	uxtb	r2, r2
 8004c14:	4611      	mov	r1, r2
 8004c16:	4618      	mov	r0, r3
 8004c18:	f003 fb01 	bl	800821e <USB_ReadDevOutEPInterrupt>
 8004c1c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00c      	beq.n	8004c42 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c34:	461a      	mov	r2, r3
 8004c36:	2301      	movs	r3, #1
 8004c38:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004c3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 fec3 	bl	80059c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f003 0308 	and.w	r3, r3, #8
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00c      	beq.n	8004c66 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c58:	461a      	mov	r2, r3
 8004c5a:	2308      	movs	r3, #8
 8004c5c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004c5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 ff99 	bl	8005b98 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	f003 0310 	and.w	r3, r3, #16
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d008      	beq.n	8004c82 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	2310      	movs	r3, #16
 8004c80:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d030      	beq.n	8004cee <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c94:	2b80      	cmp	r3, #128	; 0x80
 8004c96:	d109      	bne.n	8004cac <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	69fa      	ldr	r2, [r7, #28]
 8004ca2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ca6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004caa:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cae:	4613      	mov	r3, r2
 8004cb0:	00db      	lsls	r3, r3, #3
 8004cb2:	4413      	add	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	3304      	adds	r3, #4
 8004cc0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	78db      	ldrb	r3, [r3, #3]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d108      	bne.n	8004cdc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f005 fe92 	bl	800aa00 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce8:	461a      	mov	r2, r3
 8004cea:	2302      	movs	r3, #2
 8004cec:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	f003 0320 	and.w	r3, r3, #32
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d008      	beq.n	8004d0a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d04:	461a      	mov	r2, r3
 8004d06:	2320      	movs	r3, #32
 8004d08:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d009      	beq.n	8004d28 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d20:	461a      	mov	r2, r3
 8004d22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d26:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d30:	085b      	lsrs	r3, r3, #1
 8004d32:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f47f af62 	bne.w	8004c00 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f003 fa25 	bl	8008190 <USB_ReadInterrupts>
 8004d46:	4603      	mov	r3, r0
 8004d48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d50:	f040 80db 	bne.w	8004f0a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f003 fa46 	bl	80081ea <USB_ReadDevAllInEpInterrupt>
 8004d5e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004d64:	e0cd      	b.n	8004f02 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 80c2 	beq.w	8004ef6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d78:	b2d2      	uxtb	r2, r2
 8004d7a:	4611      	mov	r1, r2
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f003 fa6c 	bl	800825a <USB_ReadDevInEPInterrupt>
 8004d82:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d057      	beq.n	8004e3e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	f003 030f 	and.w	r3, r3, #15
 8004d94:	2201      	movs	r2, #1
 8004d96:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	43db      	mvns	r3, r3
 8004da8:	69f9      	ldr	r1, [r7, #28]
 8004daa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dae:	4013      	ands	r3, r2
 8004db0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	015a      	lsls	r2, r3, #5
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	4413      	add	r3, r2
 8004dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d132      	bne.n	8004e32 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004dcc:	6879      	ldr	r1, [r7, #4]
 8004dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	4413      	add	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	440b      	add	r3, r1
 8004dda:	334c      	adds	r3, #76	; 0x4c
 8004ddc:	6819      	ldr	r1, [r3, #0]
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004de2:	4613      	mov	r3, r2
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	4413      	add	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4403      	add	r3, r0
 8004dec:	3348      	adds	r3, #72	; 0x48
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4419      	add	r1, r3
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004df6:	4613      	mov	r3, r2
 8004df8:	00db      	lsls	r3, r3, #3
 8004dfa:	4413      	add	r3, r2
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4403      	add	r3, r0
 8004e00:	334c      	adds	r3, #76	; 0x4c
 8004e02:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d113      	bne.n	8004e32 <HAL_PCD_IRQHandler+0x3a2>
 8004e0a:	6879      	ldr	r1, [r7, #4]
 8004e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e0e:	4613      	mov	r3, r2
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	4413      	add	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	440b      	add	r3, r1
 8004e18:	3354      	adds	r3, #84	; 0x54
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d108      	bne.n	8004e32 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6818      	ldr	r0, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	f003 fa73 	bl	8008318 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	4619      	mov	r1, r3
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f005 fd5c 	bl	800a8f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	f003 0308 	and.w	r3, r3, #8
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d008      	beq.n	8004e5a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e54:	461a      	mov	r2, r3
 8004e56:	2308      	movs	r3, #8
 8004e58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f003 0310 	and.w	r3, r3, #16
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d008      	beq.n	8004e76 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e70:	461a      	mov	r2, r3
 8004e72:	2310      	movs	r3, #16
 8004e74:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d008      	beq.n	8004e92 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	2340      	movs	r3, #64	; 0x40
 8004e90:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d023      	beq.n	8004ee4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004e9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e9e:	6a38      	ldr	r0, [r7, #32]
 8004ea0:	f002 f954 	bl	800714c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	4413      	add	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	3338      	adds	r3, #56	; 0x38
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	3304      	adds	r3, #4
 8004eb6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	78db      	ldrb	r3, [r3, #3]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d108      	bne.n	8004ed2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	4619      	mov	r1, r3
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f005 fda9 	bl	800aa24 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ede:	461a      	mov	r2, r3
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004eee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 fcdb 	bl	80058ac <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	3301      	adds	r3, #1
 8004efa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efe:	085b      	lsrs	r3, r3, #1
 8004f00:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f47f af2e 	bne.w	8004d66 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f003 f93e 	bl	8008190 <USB_ReadInterrupts>
 8004f14:	4603      	mov	r3, r0
 8004f16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f1e:	d122      	bne.n	8004f66 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	69fa      	ldr	r2, [r7, #28]
 8004f2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f2e:	f023 0301 	bic.w	r3, r3, #1
 8004f32:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d108      	bne.n	8004f50 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004f46:	2100      	movs	r1, #0
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 fec3 	bl	8005cd4 <HAL_PCDEx_LPM_Callback>
 8004f4e:	e002      	b.n	8004f56 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f005 fd47 	bl	800a9e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	695a      	ldr	r2, [r3, #20]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004f64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f003 f910 	bl	8008190 <USB_ReadInterrupts>
 8004f70:	4603      	mov	r3, r0
 8004f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f7a:	d112      	bne.n	8004fa2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d102      	bne.n	8004f92 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f005 fd03 	bl	800a998 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	695a      	ldr	r2, [r3, #20]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004fa0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f003 f8f2 	bl	8008190 <USB_ReadInterrupts>
 8004fac:	4603      	mov	r3, r0
 8004fae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fb6:	f040 80b7 	bne.w	8005128 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	69fa      	ldr	r2, [r7, #28]
 8004fc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fc8:	f023 0301 	bic.w	r3, r3, #1
 8004fcc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2110      	movs	r1, #16
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f002 f8b9 	bl	800714c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fda:	2300      	movs	r3, #0
 8004fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fde:	e046      	b.n	800506e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fec:	461a      	mov	r2, r3
 8004fee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ff2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005004:	0151      	lsls	r1, r2, #5
 8005006:	69fa      	ldr	r2, [r7, #28]
 8005008:	440a      	add	r2, r1
 800500a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800500e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005012:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005016:	015a      	lsls	r2, r3, #5
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	4413      	add	r3, r2
 800501c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005020:	461a      	mov	r2, r3
 8005022:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005026:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	4413      	add	r3, r2
 8005030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005038:	0151      	lsls	r1, r2, #5
 800503a:	69fa      	ldr	r2, [r7, #28]
 800503c:	440a      	add	r2, r1
 800503e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005042:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005046:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	4413      	add	r3, r2
 8005050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005058:	0151      	lsls	r1, r2, #5
 800505a:	69fa      	ldr	r2, [r7, #28]
 800505c:	440a      	add	r2, r1
 800505e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005062:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005066:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800506a:	3301      	adds	r3, #1
 800506c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005074:	429a      	cmp	r2, r3
 8005076:	d3b3      	bcc.n	8004fe0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	69fa      	ldr	r2, [r7, #28]
 8005082:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005086:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800508a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005090:	2b00      	cmp	r3, #0
 8005092:	d016      	beq.n	80050c2 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800509a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800509e:	69fa      	ldr	r2, [r7, #28]
 80050a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050a4:	f043 030b 	orr.w	r3, r3, #11
 80050a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b4:	69fa      	ldr	r2, [r7, #28]
 80050b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050ba:	f043 030b 	orr.w	r3, r3, #11
 80050be:	6453      	str	r3, [r2, #68]	; 0x44
 80050c0:	e015      	b.n	80050ee <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	69fa      	ldr	r2, [r7, #28]
 80050cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80050d4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80050d8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	69fa      	ldr	r2, [r7, #28]
 80050e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050e8:	f043 030b 	orr.w	r3, r3, #11
 80050ec:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	69fa      	ldr	r2, [r7, #28]
 80050f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050fc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005100:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6818      	ldr	r0, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005112:	461a      	mov	r2, r3
 8005114:	f003 f900 	bl	8008318 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	695a      	ldr	r2, [r3, #20]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005126:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4618      	mov	r0, r3
 800512e:	f003 f82f 	bl	8008190 <USB_ReadInterrupts>
 8005132:	4603      	mov	r3, r0
 8005134:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005138:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800513c:	d124      	bne.n	8005188 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4618      	mov	r0, r3
 8005144:	f003 f8c5 	bl	80082d2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4618      	mov	r0, r3
 800514e:	f002 f87a 	bl	8007246 <USB_GetDevSpeed>
 8005152:	4603      	mov	r3, r0
 8005154:	461a      	mov	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681c      	ldr	r4, [r3, #0]
 800515e:	f001 fa29 	bl	80065b4 <HAL_RCC_GetHCLKFreq>
 8005162:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005168:	b2db      	uxtb	r3, r3
 800516a:	461a      	mov	r2, r3
 800516c:	4620      	mov	r0, r4
 800516e:	f001 fd79 	bl	8006c64 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f005 fbe7 	bl	800a946 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	695a      	ldr	r2, [r3, #20]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005186:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4618      	mov	r0, r3
 800518e:	f002 ffff 	bl	8008190 <USB_ReadInterrupts>
 8005192:	4603      	mov	r3, r0
 8005194:	f003 0308 	and.w	r3, r3, #8
 8005198:	2b08      	cmp	r3, #8
 800519a:	d10a      	bne.n	80051b2 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f005 fbc4 	bl	800a92a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	695a      	ldr	r2, [r3, #20]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f002 0208 	and.w	r2, r2, #8
 80051b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f002 ffea 	bl	8008190 <USB_ReadInterrupts>
 80051bc:	4603      	mov	r3, r0
 80051be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c2:	2b80      	cmp	r3, #128	; 0x80
 80051c4:	d122      	bne.n	800520c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80051c6:	6a3b      	ldr	r3, [r7, #32]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80051d2:	2301      	movs	r3, #1
 80051d4:	627b      	str	r3, [r7, #36]	; 0x24
 80051d6:	e014      	b.n	8005202 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80051d8:	6879      	ldr	r1, [r7, #4]
 80051da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051dc:	4613      	mov	r3, r2
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	4413      	add	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	440b      	add	r3, r1
 80051e6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d105      	bne.n	80051fc <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	4619      	mov	r1, r3
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fb27 	bl	800584a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	3301      	adds	r3, #1
 8005200:	627b      	str	r3, [r7, #36]	; 0x24
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005208:	429a      	cmp	r2, r3
 800520a:	d3e5      	bcc.n	80051d8 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4618      	mov	r0, r3
 8005212:	f002 ffbd 	bl	8008190 <USB_ReadInterrupts>
 8005216:	4603      	mov	r3, r0
 8005218:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800521c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005220:	d13b      	bne.n	800529a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005222:	2301      	movs	r3, #1
 8005224:	627b      	str	r3, [r7, #36]	; 0x24
 8005226:	e02b      	b.n	8005280 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005238:	6879      	ldr	r1, [r7, #4]
 800523a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800523c:	4613      	mov	r3, r2
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	4413      	add	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	440b      	add	r3, r1
 8005246:	3340      	adds	r3, #64	; 0x40
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d115      	bne.n	800527a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800524e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005250:	2b00      	cmp	r3, #0
 8005252:	da12      	bge.n	800527a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005254:	6879      	ldr	r1, [r7, #4]
 8005256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005258:	4613      	mov	r3, r2
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	4413      	add	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	440b      	add	r3, r1
 8005262:	333f      	adds	r3, #63	; 0x3f
 8005264:	2201      	movs	r2, #1
 8005266:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	b2db      	uxtb	r3, r3
 800526c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005270:	b2db      	uxtb	r3, r3
 8005272:	4619      	mov	r1, r3
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 fae8 	bl	800584a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	3301      	adds	r3, #1
 800527e:	627b      	str	r3, [r7, #36]	; 0x24
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005286:	429a      	cmp	r2, r3
 8005288:	d3ce      	bcc.n	8005228 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	695a      	ldr	r2, [r3, #20]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005298:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4618      	mov	r0, r3
 80052a0:	f002 ff76 	bl	8008190 <USB_ReadInterrupts>
 80052a4:	4603      	mov	r3, r0
 80052a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052ae:	d155      	bne.n	800535c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80052b0:	2301      	movs	r3, #1
 80052b2:	627b      	str	r3, [r7, #36]	; 0x24
 80052b4:	e045      	b.n	8005342 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	015a      	lsls	r2, r3, #5
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	4413      	add	r3, r2
 80052be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80052c6:	6879      	ldr	r1, [r7, #4]
 80052c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ca:	4613      	mov	r3, r2
 80052cc:	00db      	lsls	r3, r3, #3
 80052ce:	4413      	add	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	440b      	add	r3, r1
 80052d4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d12e      	bne.n	800533c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80052de:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	da2b      	bge.n	800533c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80052f0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d121      	bne.n	800533c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80052f8:	6879      	ldr	r1, [r7, #4]
 80052fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052fc:	4613      	mov	r3, r2
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	4413      	add	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	440b      	add	r3, r1
 8005306:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800530a:	2201      	movs	r2, #1
 800530c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10a      	bne.n	800533c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	69fa      	ldr	r2, [r7, #28]
 8005330:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005334:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005338:	6053      	str	r3, [r2, #4]
            break;
 800533a:	e007      	b.n	800534c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800533c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533e:	3301      	adds	r3, #1
 8005340:	627b      	str	r3, [r7, #36]	; 0x24
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005348:	429a      	cmp	r2, r3
 800534a:	d3b4      	bcc.n	80052b6 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	695a      	ldr	r2, [r3, #20]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800535a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4618      	mov	r0, r3
 8005362:	f002 ff15 	bl	8008190 <USB_ReadInterrupts>
 8005366:	4603      	mov	r3, r0
 8005368:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800536c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005370:	d10a      	bne.n	8005388 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f005 fb68 	bl	800aa48 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	695a      	ldr	r2, [r3, #20]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005386:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4618      	mov	r0, r3
 800538e:	f002 feff 	bl	8008190 <USB_ReadInterrupts>
 8005392:	4603      	mov	r3, r0
 8005394:	f003 0304 	and.w	r3, r3, #4
 8005398:	2b04      	cmp	r3, #4
 800539a:	d115      	bne.n	80053c8 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	f003 0304 	and.w	r3, r3, #4
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d002      	beq.n	80053b4 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f005 fb58 	bl	800aa64 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6859      	ldr	r1, [r3, #4]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	605a      	str	r2, [r3, #4]
 80053c4:	e000      	b.n	80053c8 <HAL_PCD_IRQHandler+0x938>
      return;
 80053c6:	bf00      	nop
    }
  }
}
 80053c8:	3734      	adds	r7, #52	; 0x34
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd90      	pop	{r4, r7, pc}

080053ce <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b082      	sub	sp, #8
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	460b      	mov	r3, r1
 80053d8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d101      	bne.n	80053e8 <HAL_PCD_SetAddress+0x1a>
 80053e4:	2302      	movs	r3, #2
 80053e6:	e013      	b.n	8005410 <HAL_PCD_SetAddress+0x42>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	78fa      	ldrb	r2, [r7, #3]
 80053f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	78fa      	ldrb	r2, [r7, #3]
 80053fe:	4611      	mov	r1, r2
 8005400:	4618      	mov	r0, r3
 8005402:	f002 fe5d 	bl	80080c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	4608      	mov	r0, r1
 8005422:	4611      	mov	r1, r2
 8005424:	461a      	mov	r2, r3
 8005426:	4603      	mov	r3, r0
 8005428:	70fb      	strb	r3, [r7, #3]
 800542a:	460b      	mov	r3, r1
 800542c:	803b      	strh	r3, [r7, #0]
 800542e:	4613      	mov	r3, r2
 8005430:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005436:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800543a:	2b00      	cmp	r3, #0
 800543c:	da0f      	bge.n	800545e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800543e:	78fb      	ldrb	r3, [r7, #3]
 8005440:	f003 020f 	and.w	r2, r3, #15
 8005444:	4613      	mov	r3, r2
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	4413      	add	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	3338      	adds	r3, #56	; 0x38
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	4413      	add	r3, r2
 8005452:	3304      	adds	r3, #4
 8005454:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2201      	movs	r2, #1
 800545a:	705a      	strb	r2, [r3, #1]
 800545c:	e00f      	b.n	800547e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800545e:	78fb      	ldrb	r3, [r7, #3]
 8005460:	f003 020f 	and.w	r2, r3, #15
 8005464:	4613      	mov	r3, r2
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	4413      	add	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	4413      	add	r3, r2
 8005474:	3304      	adds	r3, #4
 8005476:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800547e:	78fb      	ldrb	r3, [r7, #3]
 8005480:	f003 030f 	and.w	r3, r3, #15
 8005484:	b2da      	uxtb	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800548a:	883a      	ldrh	r2, [r7, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	78ba      	ldrb	r2, [r7, #2]
 8005494:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	785b      	ldrb	r3, [r3, #1]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d004      	beq.n	80054a8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80054a8:	78bb      	ldrb	r3, [r7, #2]
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d102      	bne.n	80054b4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d101      	bne.n	80054c2 <HAL_PCD_EP_Open+0xaa>
 80054be:	2302      	movs	r3, #2
 80054c0:	e00e      	b.n	80054e0 <HAL_PCD_EP_Open+0xc8>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68f9      	ldr	r1, [r7, #12]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f001 fedd 	bl	8007290 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80054de:	7afb      	ldrb	r3, [r7, #11]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	460b      	mov	r3, r1
 80054f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80054f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	da0f      	bge.n	800551c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054fc:	78fb      	ldrb	r3, [r7, #3]
 80054fe:	f003 020f 	and.w	r2, r3, #15
 8005502:	4613      	mov	r3, r2
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	4413      	add	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	3338      	adds	r3, #56	; 0x38
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	4413      	add	r3, r2
 8005510:	3304      	adds	r3, #4
 8005512:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2201      	movs	r2, #1
 8005518:	705a      	strb	r2, [r3, #1]
 800551a:	e00f      	b.n	800553c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800551c:	78fb      	ldrb	r3, [r7, #3]
 800551e:	f003 020f 	and.w	r2, r3, #15
 8005522:	4613      	mov	r3, r2
 8005524:	00db      	lsls	r3, r3, #3
 8005526:	4413      	add	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	4413      	add	r3, r2
 8005532:	3304      	adds	r3, #4
 8005534:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800553c:	78fb      	ldrb	r3, [r7, #3]
 800553e:	f003 030f 	and.w	r3, r3, #15
 8005542:	b2da      	uxtb	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800554e:	2b01      	cmp	r3, #1
 8005550:	d101      	bne.n	8005556 <HAL_PCD_EP_Close+0x6e>
 8005552:	2302      	movs	r3, #2
 8005554:	e00e      	b.n	8005574 <HAL_PCD_EP_Close+0x8c>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68f9      	ldr	r1, [r7, #12]
 8005564:	4618      	mov	r0, r3
 8005566:	f001 ff1b 	bl	80073a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	607a      	str	r2, [r7, #4]
 8005586:	603b      	str	r3, [r7, #0]
 8005588:	460b      	mov	r3, r1
 800558a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800558c:	7afb      	ldrb	r3, [r7, #11]
 800558e:	f003 020f 	and.w	r2, r3, #15
 8005592:	4613      	mov	r3, r2
 8005594:	00db      	lsls	r3, r3, #3
 8005596:	4413      	add	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	4413      	add	r3, r2
 80055a2:	3304      	adds	r3, #4
 80055a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	683a      	ldr	r2, [r7, #0]
 80055b0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	2200      	movs	r2, #0
 80055b6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	2200      	movs	r2, #0
 80055bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055be:	7afb      	ldrb	r3, [r7, #11]
 80055c0:	f003 030f 	and.w	r3, r3, #15
 80055c4:	b2da      	uxtb	r2, r3
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d102      	bne.n	80055d8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80055d8:	7afb      	ldrb	r3, [r7, #11]
 80055da:	f003 030f 	and.w	r3, r3, #15
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d109      	bne.n	80055f6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6818      	ldr	r0, [r3, #0]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	461a      	mov	r2, r3
 80055ee:	6979      	ldr	r1, [r7, #20]
 80055f0:	f002 f9fa 	bl	80079e8 <USB_EP0StartXfer>
 80055f4:	e008      	b.n	8005608 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6818      	ldr	r0, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	461a      	mov	r2, r3
 8005602:	6979      	ldr	r1, [r7, #20]
 8005604:	f001 ffa8 	bl	8007558 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3718      	adds	r7, #24
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005612:	b480      	push	{r7}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
 800561a:	460b      	mov	r3, r1
 800561c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800561e:	78fb      	ldrb	r3, [r7, #3]
 8005620:	f003 020f 	and.w	r2, r3, #15
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	4613      	mov	r3, r2
 8005628:	00db      	lsls	r3, r3, #3
 800562a:	4413      	add	r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	440b      	add	r3, r1
 8005630:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005634:	681b      	ldr	r3, [r3, #0]
}
 8005636:	4618      	mov	r0, r3
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005642:	b580      	push	{r7, lr}
 8005644:	b086      	sub	sp, #24
 8005646:	af00      	add	r7, sp, #0
 8005648:	60f8      	str	r0, [r7, #12]
 800564a:	607a      	str	r2, [r7, #4]
 800564c:	603b      	str	r3, [r7, #0]
 800564e:	460b      	mov	r3, r1
 8005650:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005652:	7afb      	ldrb	r3, [r7, #11]
 8005654:	f003 020f 	and.w	r2, r3, #15
 8005658:	4613      	mov	r3, r2
 800565a:	00db      	lsls	r3, r3, #3
 800565c:	4413      	add	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	3338      	adds	r3, #56	; 0x38
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	4413      	add	r3, r2
 8005666:	3304      	adds	r3, #4
 8005668:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	683a      	ldr	r2, [r7, #0]
 8005674:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	2200      	movs	r2, #0
 800567a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	2201      	movs	r2, #1
 8005680:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005682:	7afb      	ldrb	r3, [r7, #11]
 8005684:	f003 030f 	and.w	r3, r3, #15
 8005688:	b2da      	uxtb	r2, r3
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d102      	bne.n	800569c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800569c:	7afb      	ldrb	r3, [r7, #11]
 800569e:	f003 030f 	and.w	r3, r3, #15
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d109      	bne.n	80056ba <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6818      	ldr	r0, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	461a      	mov	r2, r3
 80056b2:	6979      	ldr	r1, [r7, #20]
 80056b4:	f002 f998 	bl	80079e8 <USB_EP0StartXfer>
 80056b8:	e008      	b.n	80056cc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6818      	ldr	r0, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	461a      	mov	r2, r3
 80056c6:	6979      	ldr	r1, [r7, #20]
 80056c8:	f001 ff46 	bl	8007558 <USB_EPStartXfer>
  }

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3718      	adds	r7, #24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b084      	sub	sp, #16
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
 80056de:	460b      	mov	r3, r1
 80056e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80056e2:	78fb      	ldrb	r3, [r7, #3]
 80056e4:	f003 020f 	and.w	r2, r3, #15
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d901      	bls.n	80056f4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e050      	b.n	8005796 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80056f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	da0f      	bge.n	800571c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056fc:	78fb      	ldrb	r3, [r7, #3]
 80056fe:	f003 020f 	and.w	r2, r3, #15
 8005702:	4613      	mov	r3, r2
 8005704:	00db      	lsls	r3, r3, #3
 8005706:	4413      	add	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	3338      	adds	r3, #56	; 0x38
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	4413      	add	r3, r2
 8005710:	3304      	adds	r3, #4
 8005712:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2201      	movs	r2, #1
 8005718:	705a      	strb	r2, [r3, #1]
 800571a:	e00d      	b.n	8005738 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800571c:	78fa      	ldrb	r2, [r7, #3]
 800571e:	4613      	mov	r3, r2
 8005720:	00db      	lsls	r3, r3, #3
 8005722:	4413      	add	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	4413      	add	r3, r2
 800572e:	3304      	adds	r3, #4
 8005730:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2201      	movs	r2, #1
 800573c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800573e:	78fb      	ldrb	r3, [r7, #3]
 8005740:	f003 030f 	and.w	r3, r3, #15
 8005744:	b2da      	uxtb	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005750:	2b01      	cmp	r3, #1
 8005752:	d101      	bne.n	8005758 <HAL_PCD_EP_SetStall+0x82>
 8005754:	2302      	movs	r3, #2
 8005756:	e01e      	b.n	8005796 <HAL_PCD_EP_SetStall+0xc0>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68f9      	ldr	r1, [r7, #12]
 8005766:	4618      	mov	r0, r3
 8005768:	f002 fbd6 	bl	8007f18 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800576c:	78fb      	ldrb	r3, [r7, #3]
 800576e:	f003 030f 	and.w	r3, r3, #15
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10a      	bne.n	800578c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6818      	ldr	r0, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	b2d9      	uxtb	r1, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005786:	461a      	mov	r2, r3
 8005788:	f002 fdc6 	bl	8008318 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b084      	sub	sp, #16
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
 80057a6:	460b      	mov	r3, r1
 80057a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80057aa:	78fb      	ldrb	r3, [r7, #3]
 80057ac:	f003 020f 	and.w	r2, r3, #15
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d901      	bls.n	80057bc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e042      	b.n	8005842 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80057bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	da0f      	bge.n	80057e4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057c4:	78fb      	ldrb	r3, [r7, #3]
 80057c6:	f003 020f 	and.w	r2, r3, #15
 80057ca:	4613      	mov	r3, r2
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	4413      	add	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	3338      	adds	r3, #56	; 0x38
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	4413      	add	r3, r2
 80057d8:	3304      	adds	r3, #4
 80057da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2201      	movs	r2, #1
 80057e0:	705a      	strb	r2, [r3, #1]
 80057e2:	e00f      	b.n	8005804 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057e4:	78fb      	ldrb	r3, [r7, #3]
 80057e6:	f003 020f 	and.w	r2, r3, #15
 80057ea:	4613      	mov	r3, r2
 80057ec:	00db      	lsls	r3, r3, #3
 80057ee:	4413      	add	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	4413      	add	r3, r2
 80057fa:	3304      	adds	r3, #4
 80057fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800580a:	78fb      	ldrb	r3, [r7, #3]
 800580c:	f003 030f 	and.w	r3, r3, #15
 8005810:	b2da      	uxtb	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800581c:	2b01      	cmp	r3, #1
 800581e:	d101      	bne.n	8005824 <HAL_PCD_EP_ClrStall+0x86>
 8005820:	2302      	movs	r3, #2
 8005822:	e00e      	b.n	8005842 <HAL_PCD_EP_ClrStall+0xa4>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68f9      	ldr	r1, [r7, #12]
 8005832:	4618      	mov	r0, r3
 8005834:	f002 fbde 	bl	8007ff4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b084      	sub	sp, #16
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	460b      	mov	r3, r1
 8005854:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005856:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800585a:	2b00      	cmp	r3, #0
 800585c:	da0c      	bge.n	8005878 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800585e:	78fb      	ldrb	r3, [r7, #3]
 8005860:	f003 020f 	and.w	r2, r3, #15
 8005864:	4613      	mov	r3, r2
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	4413      	add	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	3338      	adds	r3, #56	; 0x38
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	4413      	add	r3, r2
 8005872:	3304      	adds	r3, #4
 8005874:	60fb      	str	r3, [r7, #12]
 8005876:	e00c      	b.n	8005892 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005878:	78fb      	ldrb	r3, [r7, #3]
 800587a:	f003 020f 	and.w	r2, r3, #15
 800587e:	4613      	mov	r3, r2
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	4413      	add	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	4413      	add	r3, r2
 800588e:	3304      	adds	r3, #4
 8005890:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68f9      	ldr	r1, [r7, #12]
 8005898:	4618      	mov	r0, r3
 800589a:	f002 f9fd 	bl	8007c98 <USB_EPStopXfer>
 800589e:	4603      	mov	r3, r0
 80058a0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80058a2:	7afb      	ldrb	r3, [r7, #11]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b08a      	sub	sp, #40	; 0x28
 80058b0:	af02      	add	r7, sp, #8
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80058c0:	683a      	ldr	r2, [r7, #0]
 80058c2:	4613      	mov	r3, r2
 80058c4:	00db      	lsls	r3, r3, #3
 80058c6:	4413      	add	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	3338      	adds	r3, #56	; 0x38
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	4413      	add	r3, r2
 80058d0:	3304      	adds	r3, #4
 80058d2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6a1a      	ldr	r2, [r3, #32]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d901      	bls.n	80058e4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e06c      	b.n	80059be <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	699a      	ldr	r2, [r3, #24]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	69fa      	ldr	r2, [r7, #28]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d902      	bls.n	8005900 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	3303      	adds	r3, #3
 8005904:	089b      	lsrs	r3, r3, #2
 8005906:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005908:	e02b      	b.n	8005962 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	699a      	ldr	r2, [r3, #24]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	69fa      	ldr	r2, [r7, #28]
 800591c:	429a      	cmp	r2, r3
 800591e:	d902      	bls.n	8005926 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	3303      	adds	r3, #3
 800592a:	089b      	lsrs	r3, r3, #2
 800592c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6919      	ldr	r1, [r3, #16]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	b2da      	uxtb	r2, r3
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800593e:	b2db      	uxtb	r3, r3
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	4603      	mov	r3, r0
 8005944:	6978      	ldr	r0, [r7, #20]
 8005946:	f002 fa51 	bl	8007dec <USB_WritePacket>

    ep->xfer_buff  += len;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	691a      	ldr	r2, [r3, #16]
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	441a      	add	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6a1a      	ldr	r2, [r3, #32]
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	441a      	add	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	4413      	add	r3, r2
 800596a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	b29b      	uxth	r3, r3
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	429a      	cmp	r2, r3
 8005976:	d809      	bhi.n	800598c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6a1a      	ldr	r2, [r3, #32]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005980:	429a      	cmp	r2, r3
 8005982:	d203      	bcs.n	800598c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1be      	bne.n	800590a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	699a      	ldr	r2, [r3, #24]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	429a      	cmp	r2, r3
 8005996:	d811      	bhi.n	80059bc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	f003 030f 	and.w	r3, r3, #15
 800599e:	2201      	movs	r2, #1
 80059a0:	fa02 f303 	lsl.w	r3, r2, r3
 80059a4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	43db      	mvns	r3, r3
 80059b2:	6939      	ldr	r1, [r7, #16]
 80059b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059b8:	4013      	ands	r3, r2
 80059ba:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3720      	adds	r7, #32
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
	...

080059c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b088      	sub	sp, #32
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	333c      	adds	r3, #60	; 0x3c
 80059e0:	3304      	adds	r3, #4
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d17b      	bne.n	8005af6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	f003 0308 	and.w	r3, r3, #8
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d015      	beq.n	8005a34 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	4a61      	ldr	r2, [pc, #388]	; (8005b90 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	f240 80b9 	bls.w	8005b84 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 80b3 	beq.w	8005b84 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	015a      	lsls	r2, r3, #5
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a30:	6093      	str	r3, [r2, #8]
 8005a32:	e0a7      	b.n	8005b84 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	f003 0320 	and.w	r3, r3, #32
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d009      	beq.n	8005a52 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	2320      	movs	r3, #32
 8005a4e:	6093      	str	r3, [r2, #8]
 8005a50:	e098      	b.n	8005b84 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f040 8093 	bne.w	8005b84 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	4a4b      	ldr	r2, [pc, #300]	; (8005b90 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d90f      	bls.n	8005a86 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00a      	beq.n	8005a86 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a82:	6093      	str	r3, [r2, #8]
 8005a84:	e07e      	b.n	8005b84 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005a86:	683a      	ldr	r2, [r7, #0]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	4413      	add	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	4413      	add	r3, r2
 8005a98:	3304      	adds	r3, #4
 8005a9a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	69da      	ldr	r2, [r3, #28]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	0159      	lsls	r1, r3, #5
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	440b      	add	r3, r1
 8005aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ab2:	1ad2      	subs	r2, r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d114      	bne.n	8005ae8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d109      	bne.n	8005ada <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6818      	ldr	r0, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	2101      	movs	r1, #1
 8005ad4:	f002 fc20 	bl	8008318 <USB_EP0_OutStart>
 8005ad8:	e006      	b.n	8005ae8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	691a      	ldr	r2, [r3, #16]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	441a      	add	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	4619      	mov	r1, r3
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f004 fee6 	bl	800a8c0 <HAL_PCD_DataOutStageCallback>
 8005af4:	e046      	b.n	8005b84 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	4a26      	ldr	r2, [pc, #152]	; (8005b94 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d124      	bne.n	8005b48 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00a      	beq.n	8005b1e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b14:	461a      	mov	r2, r3
 8005b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b1a:	6093      	str	r3, [r2, #8]
 8005b1c:	e032      	b.n	8005b84 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	f003 0320 	and.w	r3, r3, #32
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d008      	beq.n	8005b3a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b34:	461a      	mov	r2, r3
 8005b36:	2320      	movs	r3, #32
 8005b38:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	4619      	mov	r1, r3
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f004 febd 	bl	800a8c0 <HAL_PCD_DataOutStageCallback>
 8005b46:	e01d      	b.n	8005b84 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d114      	bne.n	8005b78 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005b4e:	6879      	ldr	r1, [r7, #4]
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	4613      	mov	r3, r2
 8005b54:	00db      	lsls	r3, r3, #3
 8005b56:	4413      	add	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	440b      	add	r3, r1
 8005b5c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d108      	bne.n	8005b78 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6818      	ldr	r0, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005b70:	461a      	mov	r2, r3
 8005b72:	2100      	movs	r1, #0
 8005b74:	f002 fbd0 	bl	8008318 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f004 fe9e 	bl	800a8c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3720      	adds	r7, #32
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	4f54300a 	.word	0x4f54300a
 8005b94:	4f54310a 	.word	0x4f54310a

08005b98 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	333c      	adds	r3, #60	; 0x3c
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	4a15      	ldr	r2, [pc, #84]	; (8005c20 <PCD_EP_OutSetupPacket_int+0x88>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d90e      	bls.n	8005bec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d009      	beq.n	8005bec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be4:	461a      	mov	r2, r3
 8005be6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f004 fe55 	bl	800a89c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	4a0a      	ldr	r2, [pc, #40]	; (8005c20 <PCD_EP_OutSetupPacket_int+0x88>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d90c      	bls.n	8005c14 <PCD_EP_OutSetupPacket_int+0x7c>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d108      	bne.n	8005c14 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6818      	ldr	r0, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	2101      	movs	r1, #1
 8005c10:	f002 fb82 	bl	8008318 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3718      	adds	r7, #24
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	4f54300a 	.word	0x4f54300a

08005c24 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	70fb      	strb	r3, [r7, #3]
 8005c30:	4613      	mov	r3, r2
 8005c32:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005c3c:	78fb      	ldrb	r3, [r7, #3]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d107      	bne.n	8005c52 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005c42:	883b      	ldrh	r3, [r7, #0]
 8005c44:	0419      	lsls	r1, r3, #16
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68ba      	ldr	r2, [r7, #8]
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	629a      	str	r2, [r3, #40]	; 0x28
 8005c50:	e028      	b.n	8005ca4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c58:	0c1b      	lsrs	r3, r3, #16
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005c60:	2300      	movs	r3, #0
 8005c62:	73fb      	strb	r3, [r7, #15]
 8005c64:	e00d      	b.n	8005c82 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	7bfb      	ldrb	r3, [r7, #15]
 8005c6c:	3340      	adds	r3, #64	; 0x40
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	4413      	add	r3, r2
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	0c1b      	lsrs	r3, r3, #16
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	4413      	add	r3, r2
 8005c7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005c7c:	7bfb      	ldrb	r3, [r7, #15]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	73fb      	strb	r3, [r7, #15]
 8005c82:	7bfa      	ldrb	r2, [r7, #15]
 8005c84:	78fb      	ldrb	r3, [r7, #3]
 8005c86:	3b01      	subs	r3, #1
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d3ec      	bcc.n	8005c66 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005c8c:	883b      	ldrh	r3, [r7, #0]
 8005c8e:	0418      	lsls	r0, r3, #16
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6819      	ldr	r1, [r3, #0]
 8005c94:	78fb      	ldrb	r3, [r7, #3]
 8005c96:	3b01      	subs	r3, #1
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	4302      	orrs	r2, r0
 8005c9c:	3340      	adds	r3, #64	; 0x40
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	440b      	add	r3, r1
 8005ca2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b083      	sub	sp, #12
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	460b      	mov	r3, r1
 8005cbc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	887a      	ldrh	r2, [r7, #2]
 8005cc4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	460b      	mov	r3, r1
 8005cde:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e267      	b.n	80061ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d075      	beq.n	8005df6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d0a:	4b88      	ldr	r3, [pc, #544]	; (8005f2c <HAL_RCC_OscConfig+0x240>)
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f003 030c 	and.w	r3, r3, #12
 8005d12:	2b04      	cmp	r3, #4
 8005d14:	d00c      	beq.n	8005d30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d16:	4b85      	ldr	r3, [pc, #532]	; (8005f2c <HAL_RCC_OscConfig+0x240>)
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d1e:	2b08      	cmp	r3, #8
 8005d20:	d112      	bne.n	8005d48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d22:	4b82      	ldr	r3, [pc, #520]	; (8005f2c <HAL_RCC_OscConfig+0x240>)
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d2e:	d10b      	bne.n	8005d48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d30:	4b7e      	ldr	r3, [pc, #504]	; (8005f2c <HAL_RCC_OscConfig+0x240>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d05b      	beq.n	8005df4 <HAL_RCC_OscConfig+0x108>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d157      	bne.n	8005df4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e242      	b.n	80061ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d50:	d106      	bne.n	8005d60 <HAL_RCC_OscConfig+0x74>
 8005d52:	4b76      	ldr	r3, [pc, #472]	; (8005f2c <HAL_RCC_OscConfig+0x240>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a75      	ldr	r2, [pc, #468]	; (8005f2c <HAL_RCC_OscConfig+0x240>)
 8005d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d5c:	6013      	str	r3, [r2, #0]
 8005d5e:	e01d      	b.n	8005d9c <HAL_RCC_OscConfig+0xb0>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d68:	d10c      	bne.n	8005d84 <HAL_RCC_OscConfig+0x98>
 8005d6a:	4b70      	ldr	r3, [pc, #448]	; (8005f2c <HAL_RCC_OscConfig+0x240>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a6f      	ldr	r2, [pc, #444]	; (8005f2c <HAL_RCC_OscConfig+0x240>)
 8005d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d74:	6013      	str	r3, [r2, #0]
 8005d76:	4b6d      	ldr	r3, [pc, #436]	; (8005f2c <HAL_RCC_OscConfig+0x240>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a6c      	ldr	r2, [pc, #432]	; (8005f2c <HAL_RCC_OscConfig+0x240>)
 8005d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d80:	6013      	str	r3, [r2, #0]
 8005d82:	e00b      	b.n	8005d9c <HAL_RCC_OscConfig+0xb0>
 8005d84:	4b69      	ldr	r3, [pc, #420]	; (8005f2c <HAL_RCC_OscConfig+0x240>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a68      	ldr	r2, [pc, #416]	; (8005f2c <HAL_RCC_OscConfig+0x240>)
 8005d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d8e:	6013      	str	r3, [r2, #0]
 8005d90:	4b66      	ldr	r3, [pc, #408]	; (8005f2c <HAL_RCC_OscConfig+0x240>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a65      	ldr	r2, [pc, #404]	; (8005f2c <HAL_RCC_OscConfig+0x240>)
 8005d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d013      	beq.n	8005dcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005da4:	f7fb febc 	bl	8001b20 <HAL_GetTick>
 8005da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005daa:	e008      	b.n	8005dbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005dac:	f7fb feb8 	bl	8001b20 <HAL_GetTick>
 8005db0:	4602      	mov	r2, r0
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	2b64      	cmp	r3, #100	; 0x64
 8005db8:	d901      	bls.n	8005dbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e207      	b.n	80061ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dbe:	4b5b      	ldr	r3, [pc, #364]	; (8005f2c <HAL_RCC_OscConfig+0x240>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d0f0      	beq.n	8005dac <HAL_RCC_OscConfig+0xc0>
 8005dca:	e014      	b.n	8005df6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dcc:	f7fb fea8 	bl	8001b20 <HAL_GetTick>
 8005dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dd2:	e008      	b.n	8005de6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005dd4:	f7fb fea4 	bl	8001b20 <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	2b64      	cmp	r3, #100	; 0x64
 8005de0:	d901      	bls.n	8005de6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e1f3      	b.n	80061ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005de6:	4b51      	ldr	r3, [pc, #324]	; (8005f2c <HAL_RCC_OscConfig+0x240>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1f0      	bne.n	8005dd4 <HAL_RCC_OscConfig+0xe8>
 8005df2:	e000      	b.n	8005df6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0302 	and.w	r3, r3, #2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d063      	beq.n	8005eca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e02:	4b4a      	ldr	r3, [pc, #296]	; (8005f2c <HAL_RCC_OscConfig+0x240>)
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f003 030c 	and.w	r3, r3, #12
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00b      	beq.n	8005e26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e0e:	4b47      	ldr	r3, [pc, #284]	; (8005f2c <HAL_RCC_OscConfig+0x240>)
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e16:	2b08      	cmp	r3, #8
 8005e18:	d11c      	bne.n	8005e54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e1a:	4b44      	ldr	r3, [pc, #272]	; (8005f2c <HAL_RCC_OscConfig+0x240>)
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d116      	bne.n	8005e54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e26:	4b41      	ldr	r3, [pc, #260]	; (8005f2c <HAL_RCC_OscConfig+0x240>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d005      	beq.n	8005e3e <HAL_RCC_OscConfig+0x152>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d001      	beq.n	8005e3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e1c7      	b.n	80061ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e3e:	4b3b      	ldr	r3, [pc, #236]	; (8005f2c <HAL_RCC_OscConfig+0x240>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	00db      	lsls	r3, r3, #3
 8005e4c:	4937      	ldr	r1, [pc, #220]	; (8005f2c <HAL_RCC_OscConfig+0x240>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e52:	e03a      	b.n	8005eca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d020      	beq.n	8005e9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e5c:	4b34      	ldr	r3, [pc, #208]	; (8005f30 <HAL_RCC_OscConfig+0x244>)
 8005e5e:	2201      	movs	r2, #1
 8005e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e62:	f7fb fe5d 	bl	8001b20 <HAL_GetTick>
 8005e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e68:	e008      	b.n	8005e7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e6a:	f7fb fe59 	bl	8001b20 <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d901      	bls.n	8005e7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e1a8      	b.n	80061ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e7c:	4b2b      	ldr	r3, [pc, #172]	; (8005f2c <HAL_RCC_OscConfig+0x240>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0302 	and.w	r3, r3, #2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d0f0      	beq.n	8005e6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e88:	4b28      	ldr	r3, [pc, #160]	; (8005f2c <HAL_RCC_OscConfig+0x240>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	00db      	lsls	r3, r3, #3
 8005e96:	4925      	ldr	r1, [pc, #148]	; (8005f2c <HAL_RCC_OscConfig+0x240>)
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	600b      	str	r3, [r1, #0]
 8005e9c:	e015      	b.n	8005eca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e9e:	4b24      	ldr	r3, [pc, #144]	; (8005f30 <HAL_RCC_OscConfig+0x244>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea4:	f7fb fe3c 	bl	8001b20 <HAL_GetTick>
 8005ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eaa:	e008      	b.n	8005ebe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005eac:	f7fb fe38 	bl	8001b20 <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d901      	bls.n	8005ebe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e187      	b.n	80061ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ebe:	4b1b      	ldr	r3, [pc, #108]	; (8005f2c <HAL_RCC_OscConfig+0x240>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0302 	and.w	r3, r3, #2
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1f0      	bne.n	8005eac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0308 	and.w	r3, r3, #8
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d036      	beq.n	8005f44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d016      	beq.n	8005f0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ede:	4b15      	ldr	r3, [pc, #84]	; (8005f34 <HAL_RCC_OscConfig+0x248>)
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ee4:	f7fb fe1c 	bl	8001b20 <HAL_GetTick>
 8005ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eea:	e008      	b.n	8005efe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005eec:	f7fb fe18 	bl	8001b20 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e167      	b.n	80061ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005efe:	4b0b      	ldr	r3, [pc, #44]	; (8005f2c <HAL_RCC_OscConfig+0x240>)
 8005f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f02:	f003 0302 	and.w	r3, r3, #2
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d0f0      	beq.n	8005eec <HAL_RCC_OscConfig+0x200>
 8005f0a:	e01b      	b.n	8005f44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f0c:	4b09      	ldr	r3, [pc, #36]	; (8005f34 <HAL_RCC_OscConfig+0x248>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f12:	f7fb fe05 	bl	8001b20 <HAL_GetTick>
 8005f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f18:	e00e      	b.n	8005f38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f1a:	f7fb fe01 	bl	8001b20 <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d907      	bls.n	8005f38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e150      	b.n	80061ce <HAL_RCC_OscConfig+0x4e2>
 8005f2c:	40023800 	.word	0x40023800
 8005f30:	42470000 	.word	0x42470000
 8005f34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f38:	4b88      	ldr	r3, [pc, #544]	; (800615c <HAL_RCC_OscConfig+0x470>)
 8005f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f3c:	f003 0302 	and.w	r3, r3, #2
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1ea      	bne.n	8005f1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0304 	and.w	r3, r3, #4
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f000 8097 	beq.w	8006080 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f52:	2300      	movs	r3, #0
 8005f54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f56:	4b81      	ldr	r3, [pc, #516]	; (800615c <HAL_RCC_OscConfig+0x470>)
 8005f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10f      	bne.n	8005f82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f62:	2300      	movs	r3, #0
 8005f64:	60bb      	str	r3, [r7, #8]
 8005f66:	4b7d      	ldr	r3, [pc, #500]	; (800615c <HAL_RCC_OscConfig+0x470>)
 8005f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6a:	4a7c      	ldr	r2, [pc, #496]	; (800615c <HAL_RCC_OscConfig+0x470>)
 8005f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f70:	6413      	str	r3, [r2, #64]	; 0x40
 8005f72:	4b7a      	ldr	r3, [pc, #488]	; (800615c <HAL_RCC_OscConfig+0x470>)
 8005f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f7a:	60bb      	str	r3, [r7, #8]
 8005f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f82:	4b77      	ldr	r3, [pc, #476]	; (8006160 <HAL_RCC_OscConfig+0x474>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d118      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f8e:	4b74      	ldr	r3, [pc, #464]	; (8006160 <HAL_RCC_OscConfig+0x474>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a73      	ldr	r2, [pc, #460]	; (8006160 <HAL_RCC_OscConfig+0x474>)
 8005f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f9a:	f7fb fdc1 	bl	8001b20 <HAL_GetTick>
 8005f9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fa0:	e008      	b.n	8005fb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fa2:	f7fb fdbd 	bl	8001b20 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d901      	bls.n	8005fb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e10c      	b.n	80061ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fb4:	4b6a      	ldr	r3, [pc, #424]	; (8006160 <HAL_RCC_OscConfig+0x474>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d0f0      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d106      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x2ea>
 8005fc8:	4b64      	ldr	r3, [pc, #400]	; (800615c <HAL_RCC_OscConfig+0x470>)
 8005fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fcc:	4a63      	ldr	r2, [pc, #396]	; (800615c <HAL_RCC_OscConfig+0x470>)
 8005fce:	f043 0301 	orr.w	r3, r3, #1
 8005fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8005fd4:	e01c      	b.n	8006010 <HAL_RCC_OscConfig+0x324>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	2b05      	cmp	r3, #5
 8005fdc:	d10c      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x30c>
 8005fde:	4b5f      	ldr	r3, [pc, #380]	; (800615c <HAL_RCC_OscConfig+0x470>)
 8005fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe2:	4a5e      	ldr	r2, [pc, #376]	; (800615c <HAL_RCC_OscConfig+0x470>)
 8005fe4:	f043 0304 	orr.w	r3, r3, #4
 8005fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8005fea:	4b5c      	ldr	r3, [pc, #368]	; (800615c <HAL_RCC_OscConfig+0x470>)
 8005fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fee:	4a5b      	ldr	r2, [pc, #364]	; (800615c <HAL_RCC_OscConfig+0x470>)
 8005ff0:	f043 0301 	orr.w	r3, r3, #1
 8005ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ff6:	e00b      	b.n	8006010 <HAL_RCC_OscConfig+0x324>
 8005ff8:	4b58      	ldr	r3, [pc, #352]	; (800615c <HAL_RCC_OscConfig+0x470>)
 8005ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffc:	4a57      	ldr	r2, [pc, #348]	; (800615c <HAL_RCC_OscConfig+0x470>)
 8005ffe:	f023 0301 	bic.w	r3, r3, #1
 8006002:	6713      	str	r3, [r2, #112]	; 0x70
 8006004:	4b55      	ldr	r3, [pc, #340]	; (800615c <HAL_RCC_OscConfig+0x470>)
 8006006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006008:	4a54      	ldr	r2, [pc, #336]	; (800615c <HAL_RCC_OscConfig+0x470>)
 800600a:	f023 0304 	bic.w	r3, r3, #4
 800600e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d015      	beq.n	8006044 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006018:	f7fb fd82 	bl	8001b20 <HAL_GetTick>
 800601c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800601e:	e00a      	b.n	8006036 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006020:	f7fb fd7e 	bl	8001b20 <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	f241 3288 	movw	r2, #5000	; 0x1388
 800602e:	4293      	cmp	r3, r2
 8006030:	d901      	bls.n	8006036 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e0cb      	b.n	80061ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006036:	4b49      	ldr	r3, [pc, #292]	; (800615c <HAL_RCC_OscConfig+0x470>)
 8006038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	2b00      	cmp	r3, #0
 8006040:	d0ee      	beq.n	8006020 <HAL_RCC_OscConfig+0x334>
 8006042:	e014      	b.n	800606e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006044:	f7fb fd6c 	bl	8001b20 <HAL_GetTick>
 8006048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800604a:	e00a      	b.n	8006062 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800604c:	f7fb fd68 	bl	8001b20 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	f241 3288 	movw	r2, #5000	; 0x1388
 800605a:	4293      	cmp	r3, r2
 800605c:	d901      	bls.n	8006062 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e0b5      	b.n	80061ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006062:	4b3e      	ldr	r3, [pc, #248]	; (800615c <HAL_RCC_OscConfig+0x470>)
 8006064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006066:	f003 0302 	and.w	r3, r3, #2
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1ee      	bne.n	800604c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800606e:	7dfb      	ldrb	r3, [r7, #23]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d105      	bne.n	8006080 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006074:	4b39      	ldr	r3, [pc, #228]	; (800615c <HAL_RCC_OscConfig+0x470>)
 8006076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006078:	4a38      	ldr	r2, [pc, #224]	; (800615c <HAL_RCC_OscConfig+0x470>)
 800607a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800607e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 80a1 	beq.w	80061cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800608a:	4b34      	ldr	r3, [pc, #208]	; (800615c <HAL_RCC_OscConfig+0x470>)
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f003 030c 	and.w	r3, r3, #12
 8006092:	2b08      	cmp	r3, #8
 8006094:	d05c      	beq.n	8006150 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	2b02      	cmp	r3, #2
 800609c:	d141      	bne.n	8006122 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800609e:	4b31      	ldr	r3, [pc, #196]	; (8006164 <HAL_RCC_OscConfig+0x478>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a4:	f7fb fd3c 	bl	8001b20 <HAL_GetTick>
 80060a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060aa:	e008      	b.n	80060be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060ac:	f7fb fd38 	bl	8001b20 <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d901      	bls.n	80060be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e087      	b.n	80061ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060be:	4b27      	ldr	r3, [pc, #156]	; (800615c <HAL_RCC_OscConfig+0x470>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1f0      	bne.n	80060ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	69da      	ldr	r2, [r3, #28]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	431a      	orrs	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d8:	019b      	lsls	r3, r3, #6
 80060da:	431a      	orrs	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e0:	085b      	lsrs	r3, r3, #1
 80060e2:	3b01      	subs	r3, #1
 80060e4:	041b      	lsls	r3, r3, #16
 80060e6:	431a      	orrs	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ec:	061b      	lsls	r3, r3, #24
 80060ee:	491b      	ldr	r1, [pc, #108]	; (800615c <HAL_RCC_OscConfig+0x470>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060f4:	4b1b      	ldr	r3, [pc, #108]	; (8006164 <HAL_RCC_OscConfig+0x478>)
 80060f6:	2201      	movs	r2, #1
 80060f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060fa:	f7fb fd11 	bl	8001b20 <HAL_GetTick>
 80060fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006100:	e008      	b.n	8006114 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006102:	f7fb fd0d 	bl	8001b20 <HAL_GetTick>
 8006106:	4602      	mov	r2, r0
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	2b02      	cmp	r3, #2
 800610e:	d901      	bls.n	8006114 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e05c      	b.n	80061ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006114:	4b11      	ldr	r3, [pc, #68]	; (800615c <HAL_RCC_OscConfig+0x470>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d0f0      	beq.n	8006102 <HAL_RCC_OscConfig+0x416>
 8006120:	e054      	b.n	80061cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006122:	4b10      	ldr	r3, [pc, #64]	; (8006164 <HAL_RCC_OscConfig+0x478>)
 8006124:	2200      	movs	r2, #0
 8006126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006128:	f7fb fcfa 	bl	8001b20 <HAL_GetTick>
 800612c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800612e:	e008      	b.n	8006142 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006130:	f7fb fcf6 	bl	8001b20 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	2b02      	cmp	r3, #2
 800613c:	d901      	bls.n	8006142 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e045      	b.n	80061ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006142:	4b06      	ldr	r3, [pc, #24]	; (800615c <HAL_RCC_OscConfig+0x470>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1f0      	bne.n	8006130 <HAL_RCC_OscConfig+0x444>
 800614e:	e03d      	b.n	80061cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d107      	bne.n	8006168 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e038      	b.n	80061ce <HAL_RCC_OscConfig+0x4e2>
 800615c:	40023800 	.word	0x40023800
 8006160:	40007000 	.word	0x40007000
 8006164:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006168:	4b1b      	ldr	r3, [pc, #108]	; (80061d8 <HAL_RCC_OscConfig+0x4ec>)
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d028      	beq.n	80061c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006180:	429a      	cmp	r2, r3
 8006182:	d121      	bne.n	80061c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800618e:	429a      	cmp	r2, r3
 8006190:	d11a      	bne.n	80061c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006198:	4013      	ands	r3, r2
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800619e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d111      	bne.n	80061c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ae:	085b      	lsrs	r3, r3, #1
 80061b0:	3b01      	subs	r3, #1
 80061b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d107      	bne.n	80061c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d001      	beq.n	80061cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e000      	b.n	80061ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3718      	adds	r7, #24
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	40023800 	.word	0x40023800

080061dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d101      	bne.n	80061f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e0cc      	b.n	800638a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061f0:	4b68      	ldr	r3, [pc, #416]	; (8006394 <HAL_RCC_ClockConfig+0x1b8>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0307 	and.w	r3, r3, #7
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d90c      	bls.n	8006218 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061fe:	4b65      	ldr	r3, [pc, #404]	; (8006394 <HAL_RCC_ClockConfig+0x1b8>)
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	b2d2      	uxtb	r2, r2
 8006204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006206:	4b63      	ldr	r3, [pc, #396]	; (8006394 <HAL_RCC_ClockConfig+0x1b8>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0307 	and.w	r3, r3, #7
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	429a      	cmp	r2, r3
 8006212:	d001      	beq.n	8006218 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e0b8      	b.n	800638a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0302 	and.w	r3, r3, #2
 8006220:	2b00      	cmp	r3, #0
 8006222:	d020      	beq.n	8006266 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0304 	and.w	r3, r3, #4
 800622c:	2b00      	cmp	r3, #0
 800622e:	d005      	beq.n	800623c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006230:	4b59      	ldr	r3, [pc, #356]	; (8006398 <HAL_RCC_ClockConfig+0x1bc>)
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	4a58      	ldr	r2, [pc, #352]	; (8006398 <HAL_RCC_ClockConfig+0x1bc>)
 8006236:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800623a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0308 	and.w	r3, r3, #8
 8006244:	2b00      	cmp	r3, #0
 8006246:	d005      	beq.n	8006254 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006248:	4b53      	ldr	r3, [pc, #332]	; (8006398 <HAL_RCC_ClockConfig+0x1bc>)
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	4a52      	ldr	r2, [pc, #328]	; (8006398 <HAL_RCC_ClockConfig+0x1bc>)
 800624e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006252:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006254:	4b50      	ldr	r3, [pc, #320]	; (8006398 <HAL_RCC_ClockConfig+0x1bc>)
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	494d      	ldr	r1, [pc, #308]	; (8006398 <HAL_RCC_ClockConfig+0x1bc>)
 8006262:	4313      	orrs	r3, r2
 8006264:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	2b00      	cmp	r3, #0
 8006270:	d044      	beq.n	80062fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d107      	bne.n	800628a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800627a:	4b47      	ldr	r3, [pc, #284]	; (8006398 <HAL_RCC_ClockConfig+0x1bc>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d119      	bne.n	80062ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e07f      	b.n	800638a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	2b02      	cmp	r3, #2
 8006290:	d003      	beq.n	800629a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006296:	2b03      	cmp	r3, #3
 8006298:	d107      	bne.n	80062aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800629a:	4b3f      	ldr	r3, [pc, #252]	; (8006398 <HAL_RCC_ClockConfig+0x1bc>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d109      	bne.n	80062ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e06f      	b.n	800638a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062aa:	4b3b      	ldr	r3, [pc, #236]	; (8006398 <HAL_RCC_ClockConfig+0x1bc>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e067      	b.n	800638a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062ba:	4b37      	ldr	r3, [pc, #220]	; (8006398 <HAL_RCC_ClockConfig+0x1bc>)
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f023 0203 	bic.w	r2, r3, #3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	4934      	ldr	r1, [pc, #208]	; (8006398 <HAL_RCC_ClockConfig+0x1bc>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062cc:	f7fb fc28 	bl	8001b20 <HAL_GetTick>
 80062d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062d2:	e00a      	b.n	80062ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062d4:	f7fb fc24 	bl	8001b20 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	f241 3288 	movw	r2, #5000	; 0x1388
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d901      	bls.n	80062ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e04f      	b.n	800638a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ea:	4b2b      	ldr	r3, [pc, #172]	; (8006398 <HAL_RCC_ClockConfig+0x1bc>)
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f003 020c 	and.w	r2, r3, #12
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d1eb      	bne.n	80062d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062fc:	4b25      	ldr	r3, [pc, #148]	; (8006394 <HAL_RCC_ClockConfig+0x1b8>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0307 	and.w	r3, r3, #7
 8006304:	683a      	ldr	r2, [r7, #0]
 8006306:	429a      	cmp	r2, r3
 8006308:	d20c      	bcs.n	8006324 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800630a:	4b22      	ldr	r3, [pc, #136]	; (8006394 <HAL_RCC_ClockConfig+0x1b8>)
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	b2d2      	uxtb	r2, r2
 8006310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006312:	4b20      	ldr	r3, [pc, #128]	; (8006394 <HAL_RCC_ClockConfig+0x1b8>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0307 	and.w	r3, r3, #7
 800631a:	683a      	ldr	r2, [r7, #0]
 800631c:	429a      	cmp	r2, r3
 800631e:	d001      	beq.n	8006324 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e032      	b.n	800638a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 0304 	and.w	r3, r3, #4
 800632c:	2b00      	cmp	r3, #0
 800632e:	d008      	beq.n	8006342 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006330:	4b19      	ldr	r3, [pc, #100]	; (8006398 <HAL_RCC_ClockConfig+0x1bc>)
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	4916      	ldr	r1, [pc, #88]	; (8006398 <HAL_RCC_ClockConfig+0x1bc>)
 800633e:	4313      	orrs	r3, r2
 8006340:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0308 	and.w	r3, r3, #8
 800634a:	2b00      	cmp	r3, #0
 800634c:	d009      	beq.n	8006362 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800634e:	4b12      	ldr	r3, [pc, #72]	; (8006398 <HAL_RCC_ClockConfig+0x1bc>)
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	00db      	lsls	r3, r3, #3
 800635c:	490e      	ldr	r1, [pc, #56]	; (8006398 <HAL_RCC_ClockConfig+0x1bc>)
 800635e:	4313      	orrs	r3, r2
 8006360:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006362:	f000 f821 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 8006366:	4602      	mov	r2, r0
 8006368:	4b0b      	ldr	r3, [pc, #44]	; (8006398 <HAL_RCC_ClockConfig+0x1bc>)
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	091b      	lsrs	r3, r3, #4
 800636e:	f003 030f 	and.w	r3, r3, #15
 8006372:	490a      	ldr	r1, [pc, #40]	; (800639c <HAL_RCC_ClockConfig+0x1c0>)
 8006374:	5ccb      	ldrb	r3, [r1, r3]
 8006376:	fa22 f303 	lsr.w	r3, r2, r3
 800637a:	4a09      	ldr	r2, [pc, #36]	; (80063a0 <HAL_RCC_ClockConfig+0x1c4>)
 800637c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800637e:	4b09      	ldr	r3, [pc, #36]	; (80063a4 <HAL_RCC_ClockConfig+0x1c8>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4618      	mov	r0, r3
 8006384:	f7fb fb88 	bl	8001a98 <HAL_InitTick>

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	40023c00 	.word	0x40023c00
 8006398:	40023800 	.word	0x40023800
 800639c:	0800dcc4 	.word	0x0800dcc4
 80063a0:	20000000 	.word	0x20000000
 80063a4:	20000004 	.word	0x20000004

080063a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063ac:	b094      	sub	sp, #80	; 0x50
 80063ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80063b0:	2300      	movs	r3, #0
 80063b2:	647b      	str	r3, [r7, #68]	; 0x44
 80063b4:	2300      	movs	r3, #0
 80063b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063b8:	2300      	movs	r3, #0
 80063ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80063bc:	2300      	movs	r3, #0
 80063be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063c0:	4b79      	ldr	r3, [pc, #484]	; (80065a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f003 030c 	and.w	r3, r3, #12
 80063c8:	2b08      	cmp	r3, #8
 80063ca:	d00d      	beq.n	80063e8 <HAL_RCC_GetSysClockFreq+0x40>
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	f200 80e1 	bhi.w	8006594 <HAL_RCC_GetSysClockFreq+0x1ec>
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d002      	beq.n	80063dc <HAL_RCC_GetSysClockFreq+0x34>
 80063d6:	2b04      	cmp	r3, #4
 80063d8:	d003      	beq.n	80063e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80063da:	e0db      	b.n	8006594 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063dc:	4b73      	ldr	r3, [pc, #460]	; (80065ac <HAL_RCC_GetSysClockFreq+0x204>)
 80063de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80063e0:	e0db      	b.n	800659a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063e2:	4b73      	ldr	r3, [pc, #460]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80063e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80063e6:	e0d8      	b.n	800659a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063e8:	4b6f      	ldr	r3, [pc, #444]	; (80065a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063f2:	4b6d      	ldr	r3, [pc, #436]	; (80065a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d063      	beq.n	80064c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063fe:	4b6a      	ldr	r3, [pc, #424]	; (80065a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	099b      	lsrs	r3, r3, #6
 8006404:	2200      	movs	r2, #0
 8006406:	63bb      	str	r3, [r7, #56]	; 0x38
 8006408:	63fa      	str	r2, [r7, #60]	; 0x3c
 800640a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006410:	633b      	str	r3, [r7, #48]	; 0x30
 8006412:	2300      	movs	r3, #0
 8006414:	637b      	str	r3, [r7, #52]	; 0x34
 8006416:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800641a:	4622      	mov	r2, r4
 800641c:	462b      	mov	r3, r5
 800641e:	f04f 0000 	mov.w	r0, #0
 8006422:	f04f 0100 	mov.w	r1, #0
 8006426:	0159      	lsls	r1, r3, #5
 8006428:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800642c:	0150      	lsls	r0, r2, #5
 800642e:	4602      	mov	r2, r0
 8006430:	460b      	mov	r3, r1
 8006432:	4621      	mov	r1, r4
 8006434:	1a51      	subs	r1, r2, r1
 8006436:	6139      	str	r1, [r7, #16]
 8006438:	4629      	mov	r1, r5
 800643a:	eb63 0301 	sbc.w	r3, r3, r1
 800643e:	617b      	str	r3, [r7, #20]
 8006440:	f04f 0200 	mov.w	r2, #0
 8006444:	f04f 0300 	mov.w	r3, #0
 8006448:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800644c:	4659      	mov	r1, fp
 800644e:	018b      	lsls	r3, r1, #6
 8006450:	4651      	mov	r1, sl
 8006452:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006456:	4651      	mov	r1, sl
 8006458:	018a      	lsls	r2, r1, #6
 800645a:	4651      	mov	r1, sl
 800645c:	ebb2 0801 	subs.w	r8, r2, r1
 8006460:	4659      	mov	r1, fp
 8006462:	eb63 0901 	sbc.w	r9, r3, r1
 8006466:	f04f 0200 	mov.w	r2, #0
 800646a:	f04f 0300 	mov.w	r3, #0
 800646e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006472:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006476:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800647a:	4690      	mov	r8, r2
 800647c:	4699      	mov	r9, r3
 800647e:	4623      	mov	r3, r4
 8006480:	eb18 0303 	adds.w	r3, r8, r3
 8006484:	60bb      	str	r3, [r7, #8]
 8006486:	462b      	mov	r3, r5
 8006488:	eb49 0303 	adc.w	r3, r9, r3
 800648c:	60fb      	str	r3, [r7, #12]
 800648e:	f04f 0200 	mov.w	r2, #0
 8006492:	f04f 0300 	mov.w	r3, #0
 8006496:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800649a:	4629      	mov	r1, r5
 800649c:	024b      	lsls	r3, r1, #9
 800649e:	4621      	mov	r1, r4
 80064a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80064a4:	4621      	mov	r1, r4
 80064a6:	024a      	lsls	r2, r1, #9
 80064a8:	4610      	mov	r0, r2
 80064aa:	4619      	mov	r1, r3
 80064ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064ae:	2200      	movs	r2, #0
 80064b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80064b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064b8:	f7fa fb96 	bl	8000be8 <__aeabi_uldivmod>
 80064bc:	4602      	mov	r2, r0
 80064be:	460b      	mov	r3, r1
 80064c0:	4613      	mov	r3, r2
 80064c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064c4:	e058      	b.n	8006578 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064c6:	4b38      	ldr	r3, [pc, #224]	; (80065a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	099b      	lsrs	r3, r3, #6
 80064cc:	2200      	movs	r2, #0
 80064ce:	4618      	mov	r0, r3
 80064d0:	4611      	mov	r1, r2
 80064d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80064d6:	623b      	str	r3, [r7, #32]
 80064d8:	2300      	movs	r3, #0
 80064da:	627b      	str	r3, [r7, #36]	; 0x24
 80064dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80064e0:	4642      	mov	r2, r8
 80064e2:	464b      	mov	r3, r9
 80064e4:	f04f 0000 	mov.w	r0, #0
 80064e8:	f04f 0100 	mov.w	r1, #0
 80064ec:	0159      	lsls	r1, r3, #5
 80064ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064f2:	0150      	lsls	r0, r2, #5
 80064f4:	4602      	mov	r2, r0
 80064f6:	460b      	mov	r3, r1
 80064f8:	4641      	mov	r1, r8
 80064fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80064fe:	4649      	mov	r1, r9
 8006500:	eb63 0b01 	sbc.w	fp, r3, r1
 8006504:	f04f 0200 	mov.w	r2, #0
 8006508:	f04f 0300 	mov.w	r3, #0
 800650c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006510:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006514:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006518:	ebb2 040a 	subs.w	r4, r2, sl
 800651c:	eb63 050b 	sbc.w	r5, r3, fp
 8006520:	f04f 0200 	mov.w	r2, #0
 8006524:	f04f 0300 	mov.w	r3, #0
 8006528:	00eb      	lsls	r3, r5, #3
 800652a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800652e:	00e2      	lsls	r2, r4, #3
 8006530:	4614      	mov	r4, r2
 8006532:	461d      	mov	r5, r3
 8006534:	4643      	mov	r3, r8
 8006536:	18e3      	adds	r3, r4, r3
 8006538:	603b      	str	r3, [r7, #0]
 800653a:	464b      	mov	r3, r9
 800653c:	eb45 0303 	adc.w	r3, r5, r3
 8006540:	607b      	str	r3, [r7, #4]
 8006542:	f04f 0200 	mov.w	r2, #0
 8006546:	f04f 0300 	mov.w	r3, #0
 800654a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800654e:	4629      	mov	r1, r5
 8006550:	028b      	lsls	r3, r1, #10
 8006552:	4621      	mov	r1, r4
 8006554:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006558:	4621      	mov	r1, r4
 800655a:	028a      	lsls	r2, r1, #10
 800655c:	4610      	mov	r0, r2
 800655e:	4619      	mov	r1, r3
 8006560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006562:	2200      	movs	r2, #0
 8006564:	61bb      	str	r3, [r7, #24]
 8006566:	61fa      	str	r2, [r7, #28]
 8006568:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800656c:	f7fa fb3c 	bl	8000be8 <__aeabi_uldivmod>
 8006570:	4602      	mov	r2, r0
 8006572:	460b      	mov	r3, r1
 8006574:	4613      	mov	r3, r2
 8006576:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006578:	4b0b      	ldr	r3, [pc, #44]	; (80065a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	0c1b      	lsrs	r3, r3, #16
 800657e:	f003 0303 	and.w	r3, r3, #3
 8006582:	3301      	adds	r3, #1
 8006584:	005b      	lsls	r3, r3, #1
 8006586:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006588:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800658a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800658c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006590:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006592:	e002      	b.n	800659a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006594:	4b05      	ldr	r3, [pc, #20]	; (80065ac <HAL_RCC_GetSysClockFreq+0x204>)
 8006596:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006598:	bf00      	nop
    }
  }
  return sysclockfreq;
 800659a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800659c:	4618      	mov	r0, r3
 800659e:	3750      	adds	r7, #80	; 0x50
 80065a0:	46bd      	mov	sp, r7
 80065a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065a6:	bf00      	nop
 80065a8:	40023800 	.word	0x40023800
 80065ac:	00f42400 	.word	0x00f42400
 80065b0:	007a1200 	.word	0x007a1200

080065b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065b4:	b480      	push	{r7}
 80065b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065b8:	4b03      	ldr	r3, [pc, #12]	; (80065c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80065ba:	681b      	ldr	r3, [r3, #0]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	20000000 	.word	0x20000000

080065cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80065d0:	f7ff fff0 	bl	80065b4 <HAL_RCC_GetHCLKFreq>
 80065d4:	4602      	mov	r2, r0
 80065d6:	4b05      	ldr	r3, [pc, #20]	; (80065ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	0a9b      	lsrs	r3, r3, #10
 80065dc:	f003 0307 	and.w	r3, r3, #7
 80065e0:	4903      	ldr	r1, [pc, #12]	; (80065f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065e2:	5ccb      	ldrb	r3, [r1, r3]
 80065e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	40023800 	.word	0x40023800
 80065f0:	0800dcd4 	.word	0x0800dcd4

080065f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80065f8:	f7ff ffdc 	bl	80065b4 <HAL_RCC_GetHCLKFreq>
 80065fc:	4602      	mov	r2, r0
 80065fe:	4b05      	ldr	r3, [pc, #20]	; (8006614 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	0b5b      	lsrs	r3, r3, #13
 8006604:	f003 0307 	and.w	r3, r3, #7
 8006608:	4903      	ldr	r1, [pc, #12]	; (8006618 <HAL_RCC_GetPCLK2Freq+0x24>)
 800660a:	5ccb      	ldrb	r3, [r1, r3]
 800660c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006610:	4618      	mov	r0, r3
 8006612:	bd80      	pop	{r7, pc}
 8006614:	40023800 	.word	0x40023800
 8006618:	0800dcd4 	.word	0x0800dcd4

0800661c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d101      	bne.n	800662e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e03f      	b.n	80066ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d106      	bne.n	8006648 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f7fb f87e 	bl	8001744 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2224      	movs	r2, #36	; 0x24
 800664c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68da      	ldr	r2, [r3, #12]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800665e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 f829 	bl	80066b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	691a      	ldr	r2, [r3, #16]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006674:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	695a      	ldr	r2, [r3, #20]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006684:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68da      	ldr	r2, [r3, #12]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006694:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2220      	movs	r2, #32
 80066a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2220      	movs	r2, #32
 80066a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3708      	adds	r7, #8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
	...

080066b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066bc:	b0c0      	sub	sp, #256	; 0x100
 80066be:	af00      	add	r7, sp, #0
 80066c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80066d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d4:	68d9      	ldr	r1, [r3, #12]
 80066d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	ea40 0301 	orr.w	r3, r0, r1
 80066e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	431a      	orrs	r2, r3
 80066f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	431a      	orrs	r2, r3
 80066f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	4313      	orrs	r3, r2
 8006700:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006710:	f021 010c 	bic.w	r1, r1, #12
 8006714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800671e:	430b      	orrs	r3, r1
 8006720:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800672e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006732:	6999      	ldr	r1, [r3, #24]
 8006734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	ea40 0301 	orr.w	r3, r0, r1
 800673e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	4b8f      	ldr	r3, [pc, #572]	; (8006984 <UART_SetConfig+0x2cc>)
 8006748:	429a      	cmp	r2, r3
 800674a:	d005      	beq.n	8006758 <UART_SetConfig+0xa0>
 800674c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	4b8d      	ldr	r3, [pc, #564]	; (8006988 <UART_SetConfig+0x2d0>)
 8006754:	429a      	cmp	r2, r3
 8006756:	d104      	bne.n	8006762 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006758:	f7ff ff4c 	bl	80065f4 <HAL_RCC_GetPCLK2Freq>
 800675c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006760:	e003      	b.n	800676a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006762:	f7ff ff33 	bl	80065cc <HAL_RCC_GetPCLK1Freq>
 8006766:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800676a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800676e:	69db      	ldr	r3, [r3, #28]
 8006770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006774:	f040 810c 	bne.w	8006990 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800677c:	2200      	movs	r2, #0
 800677e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006782:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006786:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800678a:	4622      	mov	r2, r4
 800678c:	462b      	mov	r3, r5
 800678e:	1891      	adds	r1, r2, r2
 8006790:	65b9      	str	r1, [r7, #88]	; 0x58
 8006792:	415b      	adcs	r3, r3
 8006794:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006796:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800679a:	4621      	mov	r1, r4
 800679c:	eb12 0801 	adds.w	r8, r2, r1
 80067a0:	4629      	mov	r1, r5
 80067a2:	eb43 0901 	adc.w	r9, r3, r1
 80067a6:	f04f 0200 	mov.w	r2, #0
 80067aa:	f04f 0300 	mov.w	r3, #0
 80067ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067ba:	4690      	mov	r8, r2
 80067bc:	4699      	mov	r9, r3
 80067be:	4623      	mov	r3, r4
 80067c0:	eb18 0303 	adds.w	r3, r8, r3
 80067c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80067c8:	462b      	mov	r3, r5
 80067ca:	eb49 0303 	adc.w	r3, r9, r3
 80067ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80067d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80067e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80067e6:	460b      	mov	r3, r1
 80067e8:	18db      	adds	r3, r3, r3
 80067ea:	653b      	str	r3, [r7, #80]	; 0x50
 80067ec:	4613      	mov	r3, r2
 80067ee:	eb42 0303 	adc.w	r3, r2, r3
 80067f2:	657b      	str	r3, [r7, #84]	; 0x54
 80067f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80067f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80067fc:	f7fa f9f4 	bl	8000be8 <__aeabi_uldivmod>
 8006800:	4602      	mov	r2, r0
 8006802:	460b      	mov	r3, r1
 8006804:	4b61      	ldr	r3, [pc, #388]	; (800698c <UART_SetConfig+0x2d4>)
 8006806:	fba3 2302 	umull	r2, r3, r3, r2
 800680a:	095b      	lsrs	r3, r3, #5
 800680c:	011c      	lsls	r4, r3, #4
 800680e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006812:	2200      	movs	r2, #0
 8006814:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006818:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800681c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006820:	4642      	mov	r2, r8
 8006822:	464b      	mov	r3, r9
 8006824:	1891      	adds	r1, r2, r2
 8006826:	64b9      	str	r1, [r7, #72]	; 0x48
 8006828:	415b      	adcs	r3, r3
 800682a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800682c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006830:	4641      	mov	r1, r8
 8006832:	eb12 0a01 	adds.w	sl, r2, r1
 8006836:	4649      	mov	r1, r9
 8006838:	eb43 0b01 	adc.w	fp, r3, r1
 800683c:	f04f 0200 	mov.w	r2, #0
 8006840:	f04f 0300 	mov.w	r3, #0
 8006844:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006848:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800684c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006850:	4692      	mov	sl, r2
 8006852:	469b      	mov	fp, r3
 8006854:	4643      	mov	r3, r8
 8006856:	eb1a 0303 	adds.w	r3, sl, r3
 800685a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800685e:	464b      	mov	r3, r9
 8006860:	eb4b 0303 	adc.w	r3, fp, r3
 8006864:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006874:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006878:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800687c:	460b      	mov	r3, r1
 800687e:	18db      	adds	r3, r3, r3
 8006880:	643b      	str	r3, [r7, #64]	; 0x40
 8006882:	4613      	mov	r3, r2
 8006884:	eb42 0303 	adc.w	r3, r2, r3
 8006888:	647b      	str	r3, [r7, #68]	; 0x44
 800688a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800688e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006892:	f7fa f9a9 	bl	8000be8 <__aeabi_uldivmod>
 8006896:	4602      	mov	r2, r0
 8006898:	460b      	mov	r3, r1
 800689a:	4611      	mov	r1, r2
 800689c:	4b3b      	ldr	r3, [pc, #236]	; (800698c <UART_SetConfig+0x2d4>)
 800689e:	fba3 2301 	umull	r2, r3, r3, r1
 80068a2:	095b      	lsrs	r3, r3, #5
 80068a4:	2264      	movs	r2, #100	; 0x64
 80068a6:	fb02 f303 	mul.w	r3, r2, r3
 80068aa:	1acb      	subs	r3, r1, r3
 80068ac:	00db      	lsls	r3, r3, #3
 80068ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80068b2:	4b36      	ldr	r3, [pc, #216]	; (800698c <UART_SetConfig+0x2d4>)
 80068b4:	fba3 2302 	umull	r2, r3, r3, r2
 80068b8:	095b      	lsrs	r3, r3, #5
 80068ba:	005b      	lsls	r3, r3, #1
 80068bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80068c0:	441c      	add	r4, r3
 80068c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068c6:	2200      	movs	r2, #0
 80068c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80068d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80068d4:	4642      	mov	r2, r8
 80068d6:	464b      	mov	r3, r9
 80068d8:	1891      	adds	r1, r2, r2
 80068da:	63b9      	str	r1, [r7, #56]	; 0x38
 80068dc:	415b      	adcs	r3, r3
 80068de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80068e4:	4641      	mov	r1, r8
 80068e6:	1851      	adds	r1, r2, r1
 80068e8:	6339      	str	r1, [r7, #48]	; 0x30
 80068ea:	4649      	mov	r1, r9
 80068ec:	414b      	adcs	r3, r1
 80068ee:	637b      	str	r3, [r7, #52]	; 0x34
 80068f0:	f04f 0200 	mov.w	r2, #0
 80068f4:	f04f 0300 	mov.w	r3, #0
 80068f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80068fc:	4659      	mov	r1, fp
 80068fe:	00cb      	lsls	r3, r1, #3
 8006900:	4651      	mov	r1, sl
 8006902:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006906:	4651      	mov	r1, sl
 8006908:	00ca      	lsls	r2, r1, #3
 800690a:	4610      	mov	r0, r2
 800690c:	4619      	mov	r1, r3
 800690e:	4603      	mov	r3, r0
 8006910:	4642      	mov	r2, r8
 8006912:	189b      	adds	r3, r3, r2
 8006914:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006918:	464b      	mov	r3, r9
 800691a:	460a      	mov	r2, r1
 800691c:	eb42 0303 	adc.w	r3, r2, r3
 8006920:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006930:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006934:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006938:	460b      	mov	r3, r1
 800693a:	18db      	adds	r3, r3, r3
 800693c:	62bb      	str	r3, [r7, #40]	; 0x28
 800693e:	4613      	mov	r3, r2
 8006940:	eb42 0303 	adc.w	r3, r2, r3
 8006944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006946:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800694a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800694e:	f7fa f94b 	bl	8000be8 <__aeabi_uldivmod>
 8006952:	4602      	mov	r2, r0
 8006954:	460b      	mov	r3, r1
 8006956:	4b0d      	ldr	r3, [pc, #52]	; (800698c <UART_SetConfig+0x2d4>)
 8006958:	fba3 1302 	umull	r1, r3, r3, r2
 800695c:	095b      	lsrs	r3, r3, #5
 800695e:	2164      	movs	r1, #100	; 0x64
 8006960:	fb01 f303 	mul.w	r3, r1, r3
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	00db      	lsls	r3, r3, #3
 8006968:	3332      	adds	r3, #50	; 0x32
 800696a:	4a08      	ldr	r2, [pc, #32]	; (800698c <UART_SetConfig+0x2d4>)
 800696c:	fba2 2303 	umull	r2, r3, r2, r3
 8006970:	095b      	lsrs	r3, r3, #5
 8006972:	f003 0207 	and.w	r2, r3, #7
 8006976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4422      	add	r2, r4
 800697e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006980:	e105      	b.n	8006b8e <UART_SetConfig+0x4d6>
 8006982:	bf00      	nop
 8006984:	40011000 	.word	0x40011000
 8006988:	40011400 	.word	0x40011400
 800698c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006994:	2200      	movs	r2, #0
 8006996:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800699a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800699e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80069a2:	4642      	mov	r2, r8
 80069a4:	464b      	mov	r3, r9
 80069a6:	1891      	adds	r1, r2, r2
 80069a8:	6239      	str	r1, [r7, #32]
 80069aa:	415b      	adcs	r3, r3
 80069ac:	627b      	str	r3, [r7, #36]	; 0x24
 80069ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80069b2:	4641      	mov	r1, r8
 80069b4:	1854      	adds	r4, r2, r1
 80069b6:	4649      	mov	r1, r9
 80069b8:	eb43 0501 	adc.w	r5, r3, r1
 80069bc:	f04f 0200 	mov.w	r2, #0
 80069c0:	f04f 0300 	mov.w	r3, #0
 80069c4:	00eb      	lsls	r3, r5, #3
 80069c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069ca:	00e2      	lsls	r2, r4, #3
 80069cc:	4614      	mov	r4, r2
 80069ce:	461d      	mov	r5, r3
 80069d0:	4643      	mov	r3, r8
 80069d2:	18e3      	adds	r3, r4, r3
 80069d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80069d8:	464b      	mov	r3, r9
 80069da:	eb45 0303 	adc.w	r3, r5, r3
 80069de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80069e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80069f2:	f04f 0200 	mov.w	r2, #0
 80069f6:	f04f 0300 	mov.w	r3, #0
 80069fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80069fe:	4629      	mov	r1, r5
 8006a00:	008b      	lsls	r3, r1, #2
 8006a02:	4621      	mov	r1, r4
 8006a04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a08:	4621      	mov	r1, r4
 8006a0a:	008a      	lsls	r2, r1, #2
 8006a0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006a10:	f7fa f8ea 	bl	8000be8 <__aeabi_uldivmod>
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	4b60      	ldr	r3, [pc, #384]	; (8006b9c <UART_SetConfig+0x4e4>)
 8006a1a:	fba3 2302 	umull	r2, r3, r3, r2
 8006a1e:	095b      	lsrs	r3, r3, #5
 8006a20:	011c      	lsls	r4, r3, #4
 8006a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a26:	2200      	movs	r2, #0
 8006a28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006a30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006a34:	4642      	mov	r2, r8
 8006a36:	464b      	mov	r3, r9
 8006a38:	1891      	adds	r1, r2, r2
 8006a3a:	61b9      	str	r1, [r7, #24]
 8006a3c:	415b      	adcs	r3, r3
 8006a3e:	61fb      	str	r3, [r7, #28]
 8006a40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a44:	4641      	mov	r1, r8
 8006a46:	1851      	adds	r1, r2, r1
 8006a48:	6139      	str	r1, [r7, #16]
 8006a4a:	4649      	mov	r1, r9
 8006a4c:	414b      	adcs	r3, r1
 8006a4e:	617b      	str	r3, [r7, #20]
 8006a50:	f04f 0200 	mov.w	r2, #0
 8006a54:	f04f 0300 	mov.w	r3, #0
 8006a58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a5c:	4659      	mov	r1, fp
 8006a5e:	00cb      	lsls	r3, r1, #3
 8006a60:	4651      	mov	r1, sl
 8006a62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a66:	4651      	mov	r1, sl
 8006a68:	00ca      	lsls	r2, r1, #3
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	4603      	mov	r3, r0
 8006a70:	4642      	mov	r2, r8
 8006a72:	189b      	adds	r3, r3, r2
 8006a74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a78:	464b      	mov	r3, r9
 8006a7a:	460a      	mov	r2, r1
 8006a7c:	eb42 0303 	adc.w	r3, r2, r3
 8006a80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006a90:	f04f 0200 	mov.w	r2, #0
 8006a94:	f04f 0300 	mov.w	r3, #0
 8006a98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006a9c:	4649      	mov	r1, r9
 8006a9e:	008b      	lsls	r3, r1, #2
 8006aa0:	4641      	mov	r1, r8
 8006aa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006aa6:	4641      	mov	r1, r8
 8006aa8:	008a      	lsls	r2, r1, #2
 8006aaa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006aae:	f7fa f89b 	bl	8000be8 <__aeabi_uldivmod>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	4b39      	ldr	r3, [pc, #228]	; (8006b9c <UART_SetConfig+0x4e4>)
 8006ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8006abc:	095b      	lsrs	r3, r3, #5
 8006abe:	2164      	movs	r1, #100	; 0x64
 8006ac0:	fb01 f303 	mul.w	r3, r1, r3
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	011b      	lsls	r3, r3, #4
 8006ac8:	3332      	adds	r3, #50	; 0x32
 8006aca:	4a34      	ldr	r2, [pc, #208]	; (8006b9c <UART_SetConfig+0x4e4>)
 8006acc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad0:	095b      	lsrs	r3, r3, #5
 8006ad2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ad6:	441c      	add	r4, r3
 8006ad8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006adc:	2200      	movs	r2, #0
 8006ade:	673b      	str	r3, [r7, #112]	; 0x70
 8006ae0:	677a      	str	r2, [r7, #116]	; 0x74
 8006ae2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006ae6:	4642      	mov	r2, r8
 8006ae8:	464b      	mov	r3, r9
 8006aea:	1891      	adds	r1, r2, r2
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	415b      	adcs	r3, r3
 8006af0:	60fb      	str	r3, [r7, #12]
 8006af2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006af6:	4641      	mov	r1, r8
 8006af8:	1851      	adds	r1, r2, r1
 8006afa:	6039      	str	r1, [r7, #0]
 8006afc:	4649      	mov	r1, r9
 8006afe:	414b      	adcs	r3, r1
 8006b00:	607b      	str	r3, [r7, #4]
 8006b02:	f04f 0200 	mov.w	r2, #0
 8006b06:	f04f 0300 	mov.w	r3, #0
 8006b0a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006b0e:	4659      	mov	r1, fp
 8006b10:	00cb      	lsls	r3, r1, #3
 8006b12:	4651      	mov	r1, sl
 8006b14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b18:	4651      	mov	r1, sl
 8006b1a:	00ca      	lsls	r2, r1, #3
 8006b1c:	4610      	mov	r0, r2
 8006b1e:	4619      	mov	r1, r3
 8006b20:	4603      	mov	r3, r0
 8006b22:	4642      	mov	r2, r8
 8006b24:	189b      	adds	r3, r3, r2
 8006b26:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b28:	464b      	mov	r3, r9
 8006b2a:	460a      	mov	r2, r1
 8006b2c:	eb42 0303 	adc.w	r3, r2, r3
 8006b30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	663b      	str	r3, [r7, #96]	; 0x60
 8006b3c:	667a      	str	r2, [r7, #100]	; 0x64
 8006b3e:	f04f 0200 	mov.w	r2, #0
 8006b42:	f04f 0300 	mov.w	r3, #0
 8006b46:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006b4a:	4649      	mov	r1, r9
 8006b4c:	008b      	lsls	r3, r1, #2
 8006b4e:	4641      	mov	r1, r8
 8006b50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b54:	4641      	mov	r1, r8
 8006b56:	008a      	lsls	r2, r1, #2
 8006b58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006b5c:	f7fa f844 	bl	8000be8 <__aeabi_uldivmod>
 8006b60:	4602      	mov	r2, r0
 8006b62:	460b      	mov	r3, r1
 8006b64:	4b0d      	ldr	r3, [pc, #52]	; (8006b9c <UART_SetConfig+0x4e4>)
 8006b66:	fba3 1302 	umull	r1, r3, r3, r2
 8006b6a:	095b      	lsrs	r3, r3, #5
 8006b6c:	2164      	movs	r1, #100	; 0x64
 8006b6e:	fb01 f303 	mul.w	r3, r1, r3
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	011b      	lsls	r3, r3, #4
 8006b76:	3332      	adds	r3, #50	; 0x32
 8006b78:	4a08      	ldr	r2, [pc, #32]	; (8006b9c <UART_SetConfig+0x4e4>)
 8006b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b7e:	095b      	lsrs	r3, r3, #5
 8006b80:	f003 020f 	and.w	r2, r3, #15
 8006b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4422      	add	r2, r4
 8006b8c:	609a      	str	r2, [r3, #8]
}
 8006b8e:	bf00      	nop
 8006b90:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006b94:	46bd      	mov	sp, r7
 8006b96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b9a:	bf00      	nop
 8006b9c:	51eb851f 	.word	0x51eb851f

08006ba0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ba0:	b084      	sub	sp, #16
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b084      	sub	sp, #16
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
 8006baa:	f107 001c 	add.w	r0, r7, #28
 8006bae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d122      	bne.n	8006bfe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006bcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d105      	bne.n	8006bf2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f001 fbee 	bl	80083d4 <USB_CoreReset>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	73fb      	strb	r3, [r7, #15]
 8006bfc:	e01a      	b.n	8006c34 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f001 fbe2 	bl	80083d4 <USB_CoreReset>
 8006c10:	4603      	mov	r3, r0
 8006c12:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d106      	bne.n	8006c28 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	639a      	str	r2, [r3, #56]	; 0x38
 8006c26:	e005      	b.n	8006c34 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d10b      	bne.n	8006c52 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f043 0206 	orr.w	r2, r3, #6
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f043 0220 	orr.w	r2, r3, #32
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3710      	adds	r7, #16
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c5e:	b004      	add	sp, #16
 8006c60:	4770      	bx	lr
	...

08006c64 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	4613      	mov	r3, r2
 8006c70:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006c72:	79fb      	ldrb	r3, [r7, #7]
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d165      	bne.n	8006d44 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	4a41      	ldr	r2, [pc, #260]	; (8006d80 <USB_SetTurnaroundTime+0x11c>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d906      	bls.n	8006c8e <USB_SetTurnaroundTime+0x2a>
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	4a40      	ldr	r2, [pc, #256]	; (8006d84 <USB_SetTurnaroundTime+0x120>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d202      	bcs.n	8006c8e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006c88:	230f      	movs	r3, #15
 8006c8a:	617b      	str	r3, [r7, #20]
 8006c8c:	e062      	b.n	8006d54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	4a3c      	ldr	r2, [pc, #240]	; (8006d84 <USB_SetTurnaroundTime+0x120>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d306      	bcc.n	8006ca4 <USB_SetTurnaroundTime+0x40>
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	4a3b      	ldr	r2, [pc, #236]	; (8006d88 <USB_SetTurnaroundTime+0x124>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d202      	bcs.n	8006ca4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006c9e:	230e      	movs	r3, #14
 8006ca0:	617b      	str	r3, [r7, #20]
 8006ca2:	e057      	b.n	8006d54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	4a38      	ldr	r2, [pc, #224]	; (8006d88 <USB_SetTurnaroundTime+0x124>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d306      	bcc.n	8006cba <USB_SetTurnaroundTime+0x56>
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	4a37      	ldr	r2, [pc, #220]	; (8006d8c <USB_SetTurnaroundTime+0x128>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d202      	bcs.n	8006cba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006cb4:	230d      	movs	r3, #13
 8006cb6:	617b      	str	r3, [r7, #20]
 8006cb8:	e04c      	b.n	8006d54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	4a33      	ldr	r2, [pc, #204]	; (8006d8c <USB_SetTurnaroundTime+0x128>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d306      	bcc.n	8006cd0 <USB_SetTurnaroundTime+0x6c>
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	4a32      	ldr	r2, [pc, #200]	; (8006d90 <USB_SetTurnaroundTime+0x12c>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d802      	bhi.n	8006cd0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006cca:	230c      	movs	r3, #12
 8006ccc:	617b      	str	r3, [r7, #20]
 8006cce:	e041      	b.n	8006d54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	4a2f      	ldr	r2, [pc, #188]	; (8006d90 <USB_SetTurnaroundTime+0x12c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d906      	bls.n	8006ce6 <USB_SetTurnaroundTime+0x82>
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	4a2e      	ldr	r2, [pc, #184]	; (8006d94 <USB_SetTurnaroundTime+0x130>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d802      	bhi.n	8006ce6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006ce0:	230b      	movs	r3, #11
 8006ce2:	617b      	str	r3, [r7, #20]
 8006ce4:	e036      	b.n	8006d54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	4a2a      	ldr	r2, [pc, #168]	; (8006d94 <USB_SetTurnaroundTime+0x130>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d906      	bls.n	8006cfc <USB_SetTurnaroundTime+0x98>
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	4a29      	ldr	r2, [pc, #164]	; (8006d98 <USB_SetTurnaroundTime+0x134>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d802      	bhi.n	8006cfc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006cf6:	230a      	movs	r3, #10
 8006cf8:	617b      	str	r3, [r7, #20]
 8006cfa:	e02b      	b.n	8006d54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	4a26      	ldr	r2, [pc, #152]	; (8006d98 <USB_SetTurnaroundTime+0x134>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d906      	bls.n	8006d12 <USB_SetTurnaroundTime+0xae>
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	4a25      	ldr	r2, [pc, #148]	; (8006d9c <USB_SetTurnaroundTime+0x138>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d202      	bcs.n	8006d12 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006d0c:	2309      	movs	r3, #9
 8006d0e:	617b      	str	r3, [r7, #20]
 8006d10:	e020      	b.n	8006d54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	4a21      	ldr	r2, [pc, #132]	; (8006d9c <USB_SetTurnaroundTime+0x138>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d306      	bcc.n	8006d28 <USB_SetTurnaroundTime+0xc4>
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	4a20      	ldr	r2, [pc, #128]	; (8006da0 <USB_SetTurnaroundTime+0x13c>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d802      	bhi.n	8006d28 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006d22:	2308      	movs	r3, #8
 8006d24:	617b      	str	r3, [r7, #20]
 8006d26:	e015      	b.n	8006d54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	4a1d      	ldr	r2, [pc, #116]	; (8006da0 <USB_SetTurnaroundTime+0x13c>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d906      	bls.n	8006d3e <USB_SetTurnaroundTime+0xda>
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	4a1c      	ldr	r2, [pc, #112]	; (8006da4 <USB_SetTurnaroundTime+0x140>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d202      	bcs.n	8006d3e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006d38:	2307      	movs	r3, #7
 8006d3a:	617b      	str	r3, [r7, #20]
 8006d3c:	e00a      	b.n	8006d54 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006d3e:	2306      	movs	r3, #6
 8006d40:	617b      	str	r3, [r7, #20]
 8006d42:	e007      	b.n	8006d54 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006d44:	79fb      	ldrb	r3, [r7, #7]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d102      	bne.n	8006d50 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006d4a:	2309      	movs	r3, #9
 8006d4c:	617b      	str	r3, [r7, #20]
 8006d4e:	e001      	b.n	8006d54 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006d50:	2309      	movs	r3, #9
 8006d52:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	68da      	ldr	r2, [r3, #12]
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	029b      	lsls	r3, r3, #10
 8006d68:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006d6c:	431a      	orrs	r2, r3
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	371c      	adds	r7, #28
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr
 8006d80:	00d8acbf 	.word	0x00d8acbf
 8006d84:	00e4e1c0 	.word	0x00e4e1c0
 8006d88:	00f42400 	.word	0x00f42400
 8006d8c:	01067380 	.word	0x01067380
 8006d90:	011a499f 	.word	0x011a499f
 8006d94:	01312cff 	.word	0x01312cff
 8006d98:	014ca43f 	.word	0x014ca43f
 8006d9c:	016e3600 	.word	0x016e3600
 8006da0:	01a6ab1f 	.word	0x01a6ab1f
 8006da4:	01e84800 	.word	0x01e84800

08006da8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	f043 0201 	orr.w	r2, r3, #1
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	370c      	adds	r7, #12
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b083      	sub	sp, #12
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	f023 0201 	bic.w	r2, r3, #1
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	460b      	mov	r3, r1
 8006df6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006e08:	78fb      	ldrb	r3, [r7, #3]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d115      	bne.n	8006e3a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e1a:	2001      	movs	r0, #1
 8006e1c:	f7fa fe8c 	bl	8001b38 <HAL_Delay>
      ms++;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	3301      	adds	r3, #1
 8006e24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f001 fa45 	bl	80082b6 <USB_GetMode>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d01e      	beq.n	8006e70 <USB_SetCurrentMode+0x84>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2b31      	cmp	r3, #49	; 0x31
 8006e36:	d9f0      	bls.n	8006e1a <USB_SetCurrentMode+0x2e>
 8006e38:	e01a      	b.n	8006e70 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006e3a:	78fb      	ldrb	r3, [r7, #3]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d115      	bne.n	8006e6c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e4c:	2001      	movs	r0, #1
 8006e4e:	f7fa fe73 	bl	8001b38 <HAL_Delay>
      ms++;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	3301      	adds	r3, #1
 8006e56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f001 fa2c 	bl	80082b6 <USB_GetMode>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d005      	beq.n	8006e70 <USB_SetCurrentMode+0x84>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2b31      	cmp	r3, #49	; 0x31
 8006e68:	d9f0      	bls.n	8006e4c <USB_SetCurrentMode+0x60>
 8006e6a:	e001      	b.n	8006e70 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e005      	b.n	8006e7c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2b32      	cmp	r3, #50	; 0x32
 8006e74:	d101      	bne.n	8006e7a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e000      	b.n	8006e7c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e84:	b084      	sub	sp, #16
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b086      	sub	sp, #24
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
 8006e8e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006e92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	613b      	str	r3, [r7, #16]
 8006ea2:	e009      	b.n	8006eb8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	3340      	adds	r3, #64	; 0x40
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4413      	add	r3, r2
 8006eae:	2200      	movs	r2, #0
 8006eb0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	613b      	str	r3, [r7, #16]
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	2b0e      	cmp	r3, #14
 8006ebc:	d9f2      	bls.n	8006ea4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d11c      	bne.n	8006efe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ed2:	f043 0302 	orr.w	r3, r3, #2
 8006ed6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006edc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	639a      	str	r2, [r3, #56]	; 0x38
 8006efc:	e00b      	b.n	8006f16 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f02:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	2300      	movs	r3, #0
 8006f20:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f28:	4619      	mov	r1, r3
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f30:	461a      	mov	r2, r3
 8006f32:	680b      	ldr	r3, [r1, #0]
 8006f34:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d10c      	bne.n	8006f56 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d104      	bne.n	8006f4c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006f42:	2100      	movs	r1, #0
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 f965 	bl	8007214 <USB_SetDevSpeed>
 8006f4a:	e008      	b.n	8006f5e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006f4c:	2101      	movs	r1, #1
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 f960 	bl	8007214 <USB_SetDevSpeed>
 8006f54:	e003      	b.n	8006f5e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006f56:	2103      	movs	r1, #3
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 f95b 	bl	8007214 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f5e:	2110      	movs	r1, #16
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f8f3 	bl	800714c <USB_FlushTxFifo>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d001      	beq.n	8006f70 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 f91f 	bl	80071b4 <USB_FlushRxFifo>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d001      	beq.n	8006f80 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f86:	461a      	mov	r2, r3
 8006f88:	2300      	movs	r3, #0
 8006f8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f92:	461a      	mov	r2, r3
 8006f94:	2300      	movs	r3, #0
 8006f96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	613b      	str	r3, [r7, #16]
 8006fa8:	e043      	b.n	8007032 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	015a      	lsls	r2, r3, #5
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fc0:	d118      	bne.n	8006ff4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10a      	bne.n	8006fde <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	015a      	lsls	r2, r3, #5
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	4413      	add	r3, r2
 8006fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006fda:	6013      	str	r3, [r2, #0]
 8006fdc:	e013      	b.n	8007006 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fea:	461a      	mov	r2, r3
 8006fec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006ff0:	6013      	str	r3, [r2, #0]
 8006ff2:	e008      	b.n	8007006 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	015a      	lsls	r2, r3, #5
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007000:	461a      	mov	r2, r3
 8007002:	2300      	movs	r3, #0
 8007004:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	015a      	lsls	r2, r3, #5
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	4413      	add	r3, r2
 800700e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007012:	461a      	mov	r2, r3
 8007014:	2300      	movs	r3, #0
 8007016:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	015a      	lsls	r2, r3, #5
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	4413      	add	r3, r2
 8007020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007024:	461a      	mov	r2, r3
 8007026:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800702a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	3301      	adds	r3, #1
 8007030:	613b      	str	r3, [r7, #16]
 8007032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007034:	693a      	ldr	r2, [r7, #16]
 8007036:	429a      	cmp	r2, r3
 8007038:	d3b7      	bcc.n	8006faa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800703a:	2300      	movs	r3, #0
 800703c:	613b      	str	r3, [r7, #16]
 800703e:	e043      	b.n	80070c8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	015a      	lsls	r2, r3, #5
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	4413      	add	r3, r2
 8007048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007052:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007056:	d118      	bne.n	800708a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10a      	bne.n	8007074 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	015a      	lsls	r2, r3, #5
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	4413      	add	r3, r2
 8007066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800706a:	461a      	mov	r2, r3
 800706c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007070:	6013      	str	r3, [r2, #0]
 8007072:	e013      	b.n	800709c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	015a      	lsls	r2, r3, #5
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	4413      	add	r3, r2
 800707c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007080:	461a      	mov	r2, r3
 8007082:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007086:	6013      	str	r3, [r2, #0]
 8007088:	e008      	b.n	800709c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	015a      	lsls	r2, r3, #5
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	4413      	add	r3, r2
 8007092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007096:	461a      	mov	r2, r3
 8007098:	2300      	movs	r3, #0
 800709a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	015a      	lsls	r2, r3, #5
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	4413      	add	r3, r2
 80070a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a8:	461a      	mov	r2, r3
 80070aa:	2300      	movs	r3, #0
 80070ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	015a      	lsls	r2, r3, #5
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ba:	461a      	mov	r2, r3
 80070bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	3301      	adds	r3, #1
 80070c6:	613b      	str	r3, [r7, #16]
 80070c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d3b7      	bcc.n	8007040 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80070f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80070f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d105      	bne.n	8007104 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	f043 0210 	orr.w	r2, r3, #16
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	699a      	ldr	r2, [r3, #24]
 8007108:	4b0f      	ldr	r3, [pc, #60]	; (8007148 <USB_DevInit+0x2c4>)
 800710a:	4313      	orrs	r3, r2
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007112:	2b00      	cmp	r3, #0
 8007114:	d005      	beq.n	8007122 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	f043 0208 	orr.w	r2, r3, #8
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007124:	2b01      	cmp	r3, #1
 8007126:	d107      	bne.n	8007138 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	699b      	ldr	r3, [r3, #24]
 800712c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007130:	f043 0304 	orr.w	r3, r3, #4
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007138:	7dfb      	ldrb	r3, [r7, #23]
}
 800713a:	4618      	mov	r0, r3
 800713c:	3718      	adds	r7, #24
 800713e:	46bd      	mov	sp, r7
 8007140:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007144:	b004      	add	sp, #16
 8007146:	4770      	bx	lr
 8007148:	803c3800 	.word	0x803c3800

0800714c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007156:	2300      	movs	r3, #0
 8007158:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	3301      	adds	r3, #1
 800715e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	4a13      	ldr	r2, [pc, #76]	; (80071b0 <USB_FlushTxFifo+0x64>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d901      	bls.n	800716c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e01b      	b.n	80071a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	2b00      	cmp	r3, #0
 8007172:	daf2      	bge.n	800715a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007174:	2300      	movs	r3, #0
 8007176:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	019b      	lsls	r3, r3, #6
 800717c:	f043 0220 	orr.w	r2, r3, #32
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	3301      	adds	r3, #1
 8007188:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	4a08      	ldr	r2, [pc, #32]	; (80071b0 <USB_FlushTxFifo+0x64>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d901      	bls.n	8007196 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007192:	2303      	movs	r3, #3
 8007194:	e006      	b.n	80071a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	f003 0320 	and.w	r3, r3, #32
 800719e:	2b20      	cmp	r3, #32
 80071a0:	d0f0      	beq.n	8007184 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3714      	adds	r7, #20
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr
 80071b0:	00030d40 	.word	0x00030d40

080071b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b085      	sub	sp, #20
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071bc:	2300      	movs	r3, #0
 80071be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	3301      	adds	r3, #1
 80071c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	4a11      	ldr	r2, [pc, #68]	; (8007210 <USB_FlushRxFifo+0x5c>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d901      	bls.n	80071d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e018      	b.n	8007204 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	daf2      	bge.n	80071c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80071da:	2300      	movs	r3, #0
 80071dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2210      	movs	r2, #16
 80071e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	3301      	adds	r3, #1
 80071e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	4a08      	ldr	r2, [pc, #32]	; (8007210 <USB_FlushRxFifo+0x5c>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d901      	bls.n	80071f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80071f2:	2303      	movs	r3, #3
 80071f4:	e006      	b.n	8007204 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	f003 0310 	and.w	r3, r3, #16
 80071fe:	2b10      	cmp	r3, #16
 8007200:	d0f0      	beq.n	80071e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3714      	adds	r7, #20
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr
 8007210:	00030d40 	.word	0x00030d40

08007214 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	460b      	mov	r3, r1
 800721e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	78fb      	ldrb	r3, [r7, #3]
 800722e:	68f9      	ldr	r1, [r7, #12]
 8007230:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007234:	4313      	orrs	r3, r2
 8007236:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3714      	adds	r7, #20
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007246:	b480      	push	{r7}
 8007248:	b087      	sub	sp, #28
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	f003 0306 	and.w	r3, r3, #6
 800725e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d102      	bne.n	800726c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007266:	2300      	movs	r3, #0
 8007268:	75fb      	strb	r3, [r7, #23]
 800726a:	e00a      	b.n	8007282 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2b02      	cmp	r3, #2
 8007270:	d002      	beq.n	8007278 <USB_GetDevSpeed+0x32>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2b06      	cmp	r3, #6
 8007276:	d102      	bne.n	800727e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007278:	2302      	movs	r3, #2
 800727a:	75fb      	strb	r3, [r7, #23]
 800727c:	e001      	b.n	8007282 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800727e:	230f      	movs	r3, #15
 8007280:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007282:	7dfb      	ldrb	r3, [r7, #23]
}
 8007284:	4618      	mov	r0, r3
 8007286:	371c      	adds	r7, #28
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	785b      	ldrb	r3, [r3, #1]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d13a      	bne.n	8007322 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072b2:	69da      	ldr	r2, [r3, #28]
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	f003 030f 	and.w	r3, r3, #15
 80072bc:	2101      	movs	r1, #1
 80072be:	fa01 f303 	lsl.w	r3, r1, r3
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	68f9      	ldr	r1, [r7, #12]
 80072c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072ca:	4313      	orrs	r3, r2
 80072cc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d155      	bne.n	8007390 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	791b      	ldrb	r3, [r3, #4]
 80072fe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007300:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	059b      	lsls	r3, r3, #22
 8007306:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007308:	4313      	orrs	r3, r2
 800730a:	68ba      	ldr	r2, [r7, #8]
 800730c:	0151      	lsls	r1, r2, #5
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	440a      	add	r2, r1
 8007312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800731a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800731e:	6013      	str	r3, [r2, #0]
 8007320:	e036      	b.n	8007390 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007328:	69da      	ldr	r2, [r3, #28]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	f003 030f 	and.w	r3, r3, #15
 8007332:	2101      	movs	r1, #1
 8007334:	fa01 f303 	lsl.w	r3, r1, r3
 8007338:	041b      	lsls	r3, r3, #16
 800733a:	68f9      	ldr	r1, [r7, #12]
 800733c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007340:	4313      	orrs	r3, r2
 8007342:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	015a      	lsls	r2, r3, #5
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4413      	add	r3, r2
 800734c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007356:	2b00      	cmp	r3, #0
 8007358:	d11a      	bne.n	8007390 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	015a      	lsls	r2, r3, #5
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	4413      	add	r3, r2
 8007362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	791b      	ldrb	r3, [r3, #4]
 8007374:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007376:	430b      	orrs	r3, r1
 8007378:	4313      	orrs	r3, r2
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	0151      	lsls	r1, r2, #5
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	440a      	add	r2, r1
 8007382:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800738a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800738e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3714      	adds	r7, #20
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
	...

080073a0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	785b      	ldrb	r3, [r3, #1]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d161      	bne.n	8007480 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	015a      	lsls	r2, r3, #5
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	4413      	add	r3, r2
 80073c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073d2:	d11f      	bne.n	8007414 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	015a      	lsls	r2, r3, #5
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	4413      	add	r3, r2
 80073dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	0151      	lsls	r1, r2, #5
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	440a      	add	r2, r1
 80073ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80073f2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	015a      	lsls	r2, r3, #5
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	4413      	add	r3, r2
 80073fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	0151      	lsls	r1, r2, #5
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	440a      	add	r2, r1
 800740a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800740e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007412:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800741a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	f003 030f 	and.w	r3, r3, #15
 8007424:	2101      	movs	r1, #1
 8007426:	fa01 f303 	lsl.w	r3, r1, r3
 800742a:	b29b      	uxth	r3, r3
 800742c:	43db      	mvns	r3, r3
 800742e:	68f9      	ldr	r1, [r7, #12]
 8007430:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007434:	4013      	ands	r3, r2
 8007436:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800743e:	69da      	ldr	r2, [r3, #28]
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	f003 030f 	and.w	r3, r3, #15
 8007448:	2101      	movs	r1, #1
 800744a:	fa01 f303 	lsl.w	r3, r1, r3
 800744e:	b29b      	uxth	r3, r3
 8007450:	43db      	mvns	r3, r3
 8007452:	68f9      	ldr	r1, [r7, #12]
 8007454:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007458:	4013      	ands	r3, r2
 800745a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	015a      	lsls	r2, r3, #5
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	4413      	add	r3, r2
 8007464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	0159      	lsls	r1, r3, #5
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	440b      	add	r3, r1
 8007472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007476:	4619      	mov	r1, r3
 8007478:	4b35      	ldr	r3, [pc, #212]	; (8007550 <USB_DeactivateEndpoint+0x1b0>)
 800747a:	4013      	ands	r3, r2
 800747c:	600b      	str	r3, [r1, #0]
 800747e:	e060      	b.n	8007542 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	015a      	lsls	r2, r3, #5
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	4413      	add	r3, r2
 8007488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007492:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007496:	d11f      	bne.n	80074d8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	015a      	lsls	r2, r3, #5
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4413      	add	r3, r2
 80074a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	0151      	lsls	r1, r2, #5
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	440a      	add	r2, r1
 80074ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80074b6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	015a      	lsls	r2, r3, #5
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	4413      	add	r3, r2
 80074c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	0151      	lsls	r1, r2, #5
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	440a      	add	r2, r1
 80074ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	f003 030f 	and.w	r3, r3, #15
 80074e8:	2101      	movs	r1, #1
 80074ea:	fa01 f303 	lsl.w	r3, r1, r3
 80074ee:	041b      	lsls	r3, r3, #16
 80074f0:	43db      	mvns	r3, r3
 80074f2:	68f9      	ldr	r1, [r7, #12]
 80074f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074f8:	4013      	ands	r3, r2
 80074fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007502:	69da      	ldr	r2, [r3, #28]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	f003 030f 	and.w	r3, r3, #15
 800750c:	2101      	movs	r1, #1
 800750e:	fa01 f303 	lsl.w	r3, r1, r3
 8007512:	041b      	lsls	r3, r3, #16
 8007514:	43db      	mvns	r3, r3
 8007516:	68f9      	ldr	r1, [r7, #12]
 8007518:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800751c:	4013      	ands	r3, r2
 800751e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	015a      	lsls	r2, r3, #5
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	4413      	add	r3, r2
 8007528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	0159      	lsls	r1, r3, #5
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	440b      	add	r3, r1
 8007536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800753a:	4619      	mov	r1, r3
 800753c:	4b05      	ldr	r3, [pc, #20]	; (8007554 <USB_DeactivateEndpoint+0x1b4>)
 800753e:	4013      	ands	r3, r2
 8007540:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3714      	adds	r7, #20
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr
 8007550:	ec337800 	.word	0xec337800
 8007554:	eff37800 	.word	0xeff37800

08007558 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b08a      	sub	sp, #40	; 0x28
 800755c:	af02      	add	r7, sp, #8
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	4613      	mov	r3, r2
 8007564:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	785b      	ldrb	r3, [r3, #1]
 8007574:	2b01      	cmp	r3, #1
 8007576:	f040 815c 	bne.w	8007832 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d132      	bne.n	80075e8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	015a      	lsls	r2, r3, #5
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	4413      	add	r3, r2
 800758a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	69ba      	ldr	r2, [r7, #24]
 8007592:	0151      	lsls	r1, r2, #5
 8007594:	69fa      	ldr	r2, [r7, #28]
 8007596:	440a      	add	r2, r1
 8007598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800759c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80075a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80075a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	015a      	lsls	r2, r3, #5
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	4413      	add	r3, r2
 80075ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	69ba      	ldr	r2, [r7, #24]
 80075b6:	0151      	lsls	r1, r2, #5
 80075b8:	69fa      	ldr	r2, [r7, #28]
 80075ba:	440a      	add	r2, r1
 80075bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	015a      	lsls	r2, r3, #5
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	4413      	add	r3, r2
 80075ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	69ba      	ldr	r2, [r7, #24]
 80075d6:	0151      	lsls	r1, r2, #5
 80075d8:	69fa      	ldr	r2, [r7, #28]
 80075da:	440a      	add	r2, r1
 80075dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075e0:	0cdb      	lsrs	r3, r3, #19
 80075e2:	04db      	lsls	r3, r3, #19
 80075e4:	6113      	str	r3, [r2, #16]
 80075e6:	e074      	b.n	80076d2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	015a      	lsls	r2, r3, #5
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	4413      	add	r3, r2
 80075f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	69ba      	ldr	r2, [r7, #24]
 80075f8:	0151      	lsls	r1, r2, #5
 80075fa:	69fa      	ldr	r2, [r7, #28]
 80075fc:	440a      	add	r2, r1
 80075fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007602:	0cdb      	lsrs	r3, r3, #19
 8007604:	04db      	lsls	r3, r3, #19
 8007606:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	015a      	lsls	r2, r3, #5
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	4413      	add	r3, r2
 8007610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	69ba      	ldr	r2, [r7, #24]
 8007618:	0151      	lsls	r1, r2, #5
 800761a:	69fa      	ldr	r2, [r7, #28]
 800761c:	440a      	add	r2, r1
 800761e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007622:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007626:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800762a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	015a      	lsls	r2, r3, #5
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	4413      	add	r3, r2
 8007634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007638:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	6999      	ldr	r1, [r3, #24]
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	440b      	add	r3, r1
 8007644:	1e59      	subs	r1, r3, #1
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	fbb1 f3f3 	udiv	r3, r1, r3
 800764e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007650:	4b9d      	ldr	r3, [pc, #628]	; (80078c8 <USB_EPStartXfer+0x370>)
 8007652:	400b      	ands	r3, r1
 8007654:	69b9      	ldr	r1, [r7, #24]
 8007656:	0148      	lsls	r0, r1, #5
 8007658:	69f9      	ldr	r1, [r7, #28]
 800765a:	4401      	add	r1, r0
 800765c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007660:	4313      	orrs	r3, r2
 8007662:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	015a      	lsls	r2, r3, #5
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	4413      	add	r3, r2
 800766c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007670:	691a      	ldr	r2, [r3, #16]
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800767a:	69b9      	ldr	r1, [r7, #24]
 800767c:	0148      	lsls	r0, r1, #5
 800767e:	69f9      	ldr	r1, [r7, #28]
 8007680:	4401      	add	r1, r0
 8007682:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007686:	4313      	orrs	r3, r2
 8007688:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	791b      	ldrb	r3, [r3, #4]
 800768e:	2b01      	cmp	r3, #1
 8007690:	d11f      	bne.n	80076d2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	015a      	lsls	r2, r3, #5
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	4413      	add	r3, r2
 800769a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	69ba      	ldr	r2, [r7, #24]
 80076a2:	0151      	lsls	r1, r2, #5
 80076a4:	69fa      	ldr	r2, [r7, #28]
 80076a6:	440a      	add	r2, r1
 80076a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076ac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80076b0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	015a      	lsls	r2, r3, #5
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	4413      	add	r3, r2
 80076ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	69ba      	ldr	r2, [r7, #24]
 80076c2:	0151      	lsls	r1, r2, #5
 80076c4:	69fa      	ldr	r2, [r7, #28]
 80076c6:	440a      	add	r2, r1
 80076c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80076d0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80076d2:	79fb      	ldrb	r3, [r7, #7]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d14b      	bne.n	8007770 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	695b      	ldr	r3, [r3, #20]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d009      	beq.n	80076f4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	015a      	lsls	r2, r3, #5
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	4413      	add	r3, r2
 80076e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ec:	461a      	mov	r2, r3
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	791b      	ldrb	r3, [r3, #4]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d128      	bne.n	800774e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007708:	2b00      	cmp	r3, #0
 800770a:	d110      	bne.n	800772e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	015a      	lsls	r2, r3, #5
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	4413      	add	r3, r2
 8007714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	69ba      	ldr	r2, [r7, #24]
 800771c:	0151      	lsls	r1, r2, #5
 800771e:	69fa      	ldr	r2, [r7, #28]
 8007720:	440a      	add	r2, r1
 8007722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007726:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800772a:	6013      	str	r3, [r2, #0]
 800772c:	e00f      	b.n	800774e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	015a      	lsls	r2, r3, #5
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	4413      	add	r3, r2
 8007736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	69ba      	ldr	r2, [r7, #24]
 800773e:	0151      	lsls	r1, r2, #5
 8007740:	69fa      	ldr	r2, [r7, #28]
 8007742:	440a      	add	r2, r1
 8007744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800774c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	015a      	lsls	r2, r3, #5
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	4413      	add	r3, r2
 8007756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	69ba      	ldr	r2, [r7, #24]
 800775e:	0151      	lsls	r1, r2, #5
 8007760:	69fa      	ldr	r2, [r7, #28]
 8007762:	440a      	add	r2, r1
 8007764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007768:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800776c:	6013      	str	r3, [r2, #0]
 800776e:	e133      	b.n	80079d8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	015a      	lsls	r2, r3, #5
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	4413      	add	r3, r2
 8007778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	69ba      	ldr	r2, [r7, #24]
 8007780:	0151      	lsls	r1, r2, #5
 8007782:	69fa      	ldr	r2, [r7, #28]
 8007784:	440a      	add	r2, r1
 8007786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800778a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800778e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	791b      	ldrb	r3, [r3, #4]
 8007794:	2b01      	cmp	r3, #1
 8007796:	d015      	beq.n	80077c4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	699b      	ldr	r3, [r3, #24]
 800779c:	2b00      	cmp	r3, #0
 800779e:	f000 811b 	beq.w	80079d8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	f003 030f 	and.w	r3, r3, #15
 80077b2:	2101      	movs	r1, #1
 80077b4:	fa01 f303 	lsl.w	r3, r1, r3
 80077b8:	69f9      	ldr	r1, [r7, #28]
 80077ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077be:	4313      	orrs	r3, r2
 80077c0:	634b      	str	r3, [r1, #52]	; 0x34
 80077c2:	e109      	b.n	80079d8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d110      	bne.n	80077f6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	015a      	lsls	r2, r3, #5
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	4413      	add	r3, r2
 80077dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	69ba      	ldr	r2, [r7, #24]
 80077e4:	0151      	lsls	r1, r2, #5
 80077e6:	69fa      	ldr	r2, [r7, #28]
 80077e8:	440a      	add	r2, r1
 80077ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80077f2:	6013      	str	r3, [r2, #0]
 80077f4:	e00f      	b.n	8007816 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	015a      	lsls	r2, r3, #5
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	4413      	add	r3, r2
 80077fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	69ba      	ldr	r2, [r7, #24]
 8007806:	0151      	lsls	r1, r2, #5
 8007808:	69fa      	ldr	r2, [r7, #28]
 800780a:	440a      	add	r2, r1
 800780c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007814:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	6919      	ldr	r1, [r3, #16]
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	781a      	ldrb	r2, [r3, #0]
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	699b      	ldr	r3, [r3, #24]
 8007822:	b298      	uxth	r0, r3
 8007824:	79fb      	ldrb	r3, [r7, #7]
 8007826:	9300      	str	r3, [sp, #0]
 8007828:	4603      	mov	r3, r0
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f000 fade 	bl	8007dec <USB_WritePacket>
 8007830:	e0d2      	b.n	80079d8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	015a      	lsls	r2, r3, #5
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	4413      	add	r3, r2
 800783a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	69ba      	ldr	r2, [r7, #24]
 8007842:	0151      	lsls	r1, r2, #5
 8007844:	69fa      	ldr	r2, [r7, #28]
 8007846:	440a      	add	r2, r1
 8007848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800784c:	0cdb      	lsrs	r3, r3, #19
 800784e:	04db      	lsls	r3, r3, #19
 8007850:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	015a      	lsls	r2, r3, #5
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	4413      	add	r3, r2
 800785a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	69ba      	ldr	r2, [r7, #24]
 8007862:	0151      	lsls	r1, r2, #5
 8007864:	69fa      	ldr	r2, [r7, #28]
 8007866:	440a      	add	r2, r1
 8007868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800786c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007870:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007874:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d126      	bne.n	80078cc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	015a      	lsls	r2, r3, #5
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	4413      	add	r3, r2
 8007886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800788a:	691a      	ldr	r2, [r3, #16]
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007894:	69b9      	ldr	r1, [r7, #24]
 8007896:	0148      	lsls	r0, r1, #5
 8007898:	69f9      	ldr	r1, [r7, #28]
 800789a:	4401      	add	r1, r0
 800789c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80078a0:	4313      	orrs	r3, r2
 80078a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	015a      	lsls	r2, r3, #5
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	4413      	add	r3, r2
 80078ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	69ba      	ldr	r2, [r7, #24]
 80078b4:	0151      	lsls	r1, r2, #5
 80078b6:	69fa      	ldr	r2, [r7, #28]
 80078b8:	440a      	add	r2, r1
 80078ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078c2:	6113      	str	r3, [r2, #16]
 80078c4:	e03a      	b.n	800793c <USB_EPStartXfer+0x3e4>
 80078c6:	bf00      	nop
 80078c8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	699a      	ldr	r2, [r3, #24]
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	4413      	add	r3, r2
 80078d6:	1e5a      	subs	r2, r3, #1
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	8afa      	ldrh	r2, [r7, #22]
 80078e8:	fb03 f202 	mul.w	r2, r3, r2
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	015a      	lsls	r2, r3, #5
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	4413      	add	r3, r2
 80078f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078fc:	691a      	ldr	r2, [r3, #16]
 80078fe:	8afb      	ldrh	r3, [r7, #22]
 8007900:	04d9      	lsls	r1, r3, #19
 8007902:	4b38      	ldr	r3, [pc, #224]	; (80079e4 <USB_EPStartXfer+0x48c>)
 8007904:	400b      	ands	r3, r1
 8007906:	69b9      	ldr	r1, [r7, #24]
 8007908:	0148      	lsls	r0, r1, #5
 800790a:	69f9      	ldr	r1, [r7, #28]
 800790c:	4401      	add	r1, r0
 800790e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007912:	4313      	orrs	r3, r2
 8007914:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	015a      	lsls	r2, r3, #5
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	4413      	add	r3, r2
 800791e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007922:	691a      	ldr	r2, [r3, #16]
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	69db      	ldr	r3, [r3, #28]
 8007928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800792c:	69b9      	ldr	r1, [r7, #24]
 800792e:	0148      	lsls	r0, r1, #5
 8007930:	69f9      	ldr	r1, [r7, #28]
 8007932:	4401      	add	r1, r0
 8007934:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007938:	4313      	orrs	r3, r2
 800793a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800793c:	79fb      	ldrb	r3, [r7, #7]
 800793e:	2b01      	cmp	r3, #1
 8007940:	d10d      	bne.n	800795e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d009      	beq.n	800795e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	6919      	ldr	r1, [r3, #16]
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	015a      	lsls	r2, r3, #5
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	4413      	add	r3, r2
 8007956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800795a:	460a      	mov	r2, r1
 800795c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	791b      	ldrb	r3, [r3, #4]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d128      	bne.n	80079b8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007972:	2b00      	cmp	r3, #0
 8007974:	d110      	bne.n	8007998 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	015a      	lsls	r2, r3, #5
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	4413      	add	r3, r2
 800797e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	69ba      	ldr	r2, [r7, #24]
 8007986:	0151      	lsls	r1, r2, #5
 8007988:	69fa      	ldr	r2, [r7, #28]
 800798a:	440a      	add	r2, r1
 800798c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007990:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007994:	6013      	str	r3, [r2, #0]
 8007996:	e00f      	b.n	80079b8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	015a      	lsls	r2, r3, #5
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	4413      	add	r3, r2
 80079a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	69ba      	ldr	r2, [r7, #24]
 80079a8:	0151      	lsls	r1, r2, #5
 80079aa:	69fa      	ldr	r2, [r7, #28]
 80079ac:	440a      	add	r2, r1
 80079ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079b6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	015a      	lsls	r2, r3, #5
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	4413      	add	r3, r2
 80079c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	69ba      	ldr	r2, [r7, #24]
 80079c8:	0151      	lsls	r1, r2, #5
 80079ca:	69fa      	ldr	r2, [r7, #28]
 80079cc:	440a      	add	r2, r1
 80079ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80079d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3720      	adds	r7, #32
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	1ff80000 	.word	0x1ff80000

080079e8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b087      	sub	sp, #28
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	4613      	mov	r3, r2
 80079f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	785b      	ldrb	r3, [r3, #1]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	f040 80ce 	bne.w	8007ba6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d132      	bne.n	8007a78 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	015a      	lsls	r2, r3, #5
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	4413      	add	r3, r2
 8007a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	0151      	lsls	r1, r2, #5
 8007a24:	697a      	ldr	r2, [r7, #20]
 8007a26:	440a      	add	r2, r1
 8007a28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	015a      	lsls	r2, r3, #5
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	693a      	ldr	r2, [r7, #16]
 8007a46:	0151      	lsls	r1, r2, #5
 8007a48:	697a      	ldr	r2, [r7, #20]
 8007a4a:	440a      	add	r2, r1
 8007a4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	015a      	lsls	r2, r3, #5
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	0151      	lsls	r1, r2, #5
 8007a68:	697a      	ldr	r2, [r7, #20]
 8007a6a:	440a      	add	r2, r1
 8007a6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a70:	0cdb      	lsrs	r3, r3, #19
 8007a72:	04db      	lsls	r3, r3, #19
 8007a74:	6113      	str	r3, [r2, #16]
 8007a76:	e04e      	b.n	8007b16 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	015a      	lsls	r2, r3, #5
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	4413      	add	r3, r2
 8007a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	693a      	ldr	r2, [r7, #16]
 8007a88:	0151      	lsls	r1, r2, #5
 8007a8a:	697a      	ldr	r2, [r7, #20]
 8007a8c:	440a      	add	r2, r1
 8007a8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a92:	0cdb      	lsrs	r3, r3, #19
 8007a94:	04db      	lsls	r3, r3, #19
 8007a96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	015a      	lsls	r2, r3, #5
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	693a      	ldr	r2, [r7, #16]
 8007aa8:	0151      	lsls	r1, r2, #5
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	440a      	add	r2, r1
 8007aae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ab2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ab6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007aba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	699a      	ldr	r2, [r3, #24]
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d903      	bls.n	8007ad0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	68da      	ldr	r2, [r3, #12]
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	015a      	lsls	r2, r3, #5
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	693a      	ldr	r2, [r7, #16]
 8007ae0:	0151      	lsls	r1, r2, #5
 8007ae2:	697a      	ldr	r2, [r7, #20]
 8007ae4:	440a      	add	r2, r1
 8007ae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007aee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	015a      	lsls	r2, r3, #5
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	4413      	add	r3, r2
 8007af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007afc:	691a      	ldr	r2, [r3, #16]
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	699b      	ldr	r3, [r3, #24]
 8007b02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b06:	6939      	ldr	r1, [r7, #16]
 8007b08:	0148      	lsls	r0, r1, #5
 8007b0a:	6979      	ldr	r1, [r7, #20]
 8007b0c:	4401      	add	r1, r0
 8007b0e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007b12:	4313      	orrs	r3, r2
 8007b14:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007b16:	79fb      	ldrb	r3, [r7, #7]
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d11e      	bne.n	8007b5a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	695b      	ldr	r3, [r3, #20]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d009      	beq.n	8007b38 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	015a      	lsls	r2, r3, #5
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b30:	461a      	mov	r2, r3
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	695b      	ldr	r3, [r3, #20]
 8007b36:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	015a      	lsls	r2, r3, #5
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	4413      	add	r3, r2
 8007b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	693a      	ldr	r2, [r7, #16]
 8007b48:	0151      	lsls	r1, r2, #5
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	440a      	add	r2, r1
 8007b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b56:	6013      	str	r3, [r2, #0]
 8007b58:	e097      	b.n	8007c8a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	015a      	lsls	r2, r3, #5
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	4413      	add	r3, r2
 8007b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	0151      	lsls	r1, r2, #5
 8007b6c:	697a      	ldr	r2, [r7, #20]
 8007b6e:	440a      	add	r2, r1
 8007b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b78:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	699b      	ldr	r3, [r3, #24]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f000 8083 	beq.w	8007c8a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	f003 030f 	and.w	r3, r3, #15
 8007b94:	2101      	movs	r1, #1
 8007b96:	fa01 f303 	lsl.w	r3, r1, r3
 8007b9a:	6979      	ldr	r1, [r7, #20]
 8007b9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	634b      	str	r3, [r1, #52]	; 0x34
 8007ba4:	e071      	b.n	8007c8a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	015a      	lsls	r2, r3, #5
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	4413      	add	r3, r2
 8007bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	693a      	ldr	r2, [r7, #16]
 8007bb6:	0151      	lsls	r1, r2, #5
 8007bb8:	697a      	ldr	r2, [r7, #20]
 8007bba:	440a      	add	r2, r1
 8007bbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bc0:	0cdb      	lsrs	r3, r3, #19
 8007bc2:	04db      	lsls	r3, r3, #19
 8007bc4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	015a      	lsls	r2, r3, #5
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	4413      	add	r3, r2
 8007bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	693a      	ldr	r2, [r7, #16]
 8007bd6:	0151      	lsls	r1, r2, #5
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	440a      	add	r2, r1
 8007bdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007be0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007be4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007be8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	699b      	ldr	r3, [r3, #24]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d003      	beq.n	8007bfa <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	68da      	ldr	r2, [r3, #12]
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	68da      	ldr	r2, [r3, #12]
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	015a      	lsls	r2, r3, #5
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	4413      	add	r3, r2
 8007c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	0151      	lsls	r1, r2, #5
 8007c14:	697a      	ldr	r2, [r7, #20]
 8007c16:	440a      	add	r2, r1
 8007c18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	015a      	lsls	r2, r3, #5
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	4413      	add	r3, r2
 8007c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c2e:	691a      	ldr	r2, [r3, #16]
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	69db      	ldr	r3, [r3, #28]
 8007c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c38:	6939      	ldr	r1, [r7, #16]
 8007c3a:	0148      	lsls	r0, r1, #5
 8007c3c:	6979      	ldr	r1, [r7, #20]
 8007c3e:	4401      	add	r1, r0
 8007c40:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c44:	4313      	orrs	r3, r2
 8007c46:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007c48:	79fb      	ldrb	r3, [r7, #7]
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d10d      	bne.n	8007c6a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d009      	beq.n	8007c6a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	6919      	ldr	r1, [r3, #16]
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	015a      	lsls	r2, r3, #5
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	4413      	add	r3, r2
 8007c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c66:	460a      	mov	r2, r1
 8007c68:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	015a      	lsls	r2, r3, #5
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	4413      	add	r3, r2
 8007c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	693a      	ldr	r2, [r7, #16]
 8007c7a:	0151      	lsls	r1, r2, #5
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	440a      	add	r2, r1
 8007c80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c88:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	371c      	adds	r7, #28
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b087      	sub	sp, #28
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	785b      	ldrb	r3, [r3, #1]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d14a      	bne.n	8007d4c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	015a      	lsls	r2, r3, #5
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cce:	f040 8086 	bne.w	8007dde <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	015a      	lsls	r2, r3, #5
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	4413      	add	r3, r2
 8007cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	683a      	ldr	r2, [r7, #0]
 8007ce4:	7812      	ldrb	r2, [r2, #0]
 8007ce6:	0151      	lsls	r1, r2, #5
 8007ce8:	693a      	ldr	r2, [r7, #16]
 8007cea:	440a      	add	r2, r1
 8007cec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cf0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007cf4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	015a      	lsls	r2, r3, #5
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	4413      	add	r3, r2
 8007d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	683a      	ldr	r2, [r7, #0]
 8007d08:	7812      	ldrb	r2, [r2, #0]
 8007d0a:	0151      	lsls	r1, r2, #5
 8007d0c:	693a      	ldr	r2, [r7, #16]
 8007d0e:	440a      	add	r2, r1
 8007d10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d18:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f242 7210 	movw	r2, #10000	; 0x2710
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d902      	bls.n	8007d30 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	75fb      	strb	r3, [r7, #23]
          break;
 8007d2e:	e056      	b.n	8007dde <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	015a      	lsls	r2, r3, #5
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	4413      	add	r3, r2
 8007d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d48:	d0e7      	beq.n	8007d1a <USB_EPStopXfer+0x82>
 8007d4a:	e048      	b.n	8007dde <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	015a      	lsls	r2, r3, #5
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	4413      	add	r3, r2
 8007d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d64:	d13b      	bne.n	8007dde <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	015a      	lsls	r2, r3, #5
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	4413      	add	r3, r2
 8007d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	683a      	ldr	r2, [r7, #0]
 8007d78:	7812      	ldrb	r2, [r2, #0]
 8007d7a:	0151      	lsls	r1, r2, #5
 8007d7c:	693a      	ldr	r2, [r7, #16]
 8007d7e:	440a      	add	r2, r1
 8007d80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d84:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d88:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	015a      	lsls	r2, r3, #5
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	4413      	add	r3, r2
 8007d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	683a      	ldr	r2, [r7, #0]
 8007d9c:	7812      	ldrb	r2, [r2, #0]
 8007d9e:	0151      	lsls	r1, r2, #5
 8007da0:	693a      	ldr	r2, [r7, #16]
 8007da2:	440a      	add	r2, r1
 8007da4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007da8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007dac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	3301      	adds	r3, #1
 8007db2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f242 7210 	movw	r2, #10000	; 0x2710
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d902      	bls.n	8007dc4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	75fb      	strb	r3, [r7, #23]
          break;
 8007dc2:	e00c      	b.n	8007dde <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	015a      	lsls	r2, r3, #5
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	4413      	add	r3, r2
 8007dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ddc:	d0e7      	beq.n	8007dae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	371c      	adds	r7, #28
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b089      	sub	sp, #36	; 0x24
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	4611      	mov	r1, r2
 8007df8:	461a      	mov	r2, r3
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	71fb      	strb	r3, [r7, #7]
 8007dfe:	4613      	mov	r3, r2
 8007e00:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007e0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d123      	bne.n	8007e5a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007e12:	88bb      	ldrh	r3, [r7, #4]
 8007e14:	3303      	adds	r3, #3
 8007e16:	089b      	lsrs	r3, r3, #2
 8007e18:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	61bb      	str	r3, [r7, #24]
 8007e1e:	e018      	b.n	8007e52 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007e20:	79fb      	ldrb	r3, [r7, #7]
 8007e22:	031a      	lsls	r2, r3, #12
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	4413      	add	r3, r2
 8007e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	3301      	adds	r3, #1
 8007e38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	3301      	adds	r3, #1
 8007e44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	61bb      	str	r3, [r7, #24]
 8007e52:	69ba      	ldr	r2, [r7, #24]
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d3e2      	bcc.n	8007e20 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3724      	adds	r7, #36	; 0x24
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b08b      	sub	sp, #44	; 0x2c
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	4613      	mov	r3, r2
 8007e74:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007e7e:	88fb      	ldrh	r3, [r7, #6]
 8007e80:	089b      	lsrs	r3, r3, #2
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007e86:	88fb      	ldrh	r3, [r7, #6]
 8007e88:	f003 0303 	and.w	r3, r3, #3
 8007e8c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007e8e:	2300      	movs	r3, #0
 8007e90:	623b      	str	r3, [r7, #32]
 8007e92:	e014      	b.n	8007ebe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eae:	3301      	adds	r3, #1
 8007eb0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007eb8:	6a3b      	ldr	r3, [r7, #32]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	623b      	str	r3, [r7, #32]
 8007ebe:	6a3a      	ldr	r2, [r7, #32]
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d3e6      	bcc.n	8007e94 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007ec6:	8bfb      	ldrh	r3, [r7, #30]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d01e      	beq.n	8007f0a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	f107 0310 	add.w	r3, r7, #16
 8007edc:	6812      	ldr	r2, [r2, #0]
 8007ede:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007ee0:	693a      	ldr	r2, [r7, #16]
 8007ee2:	6a3b      	ldr	r3, [r7, #32]
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	00db      	lsls	r3, r3, #3
 8007ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8007eec:	b2da      	uxtb	r2, r3
 8007eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef0:	701a      	strb	r2, [r3, #0]
      i++;
 8007ef2:	6a3b      	ldr	r3, [r7, #32]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	623b      	str	r3, [r7, #32]
      pDest++;
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efa:	3301      	adds	r3, #1
 8007efc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007efe:	8bfb      	ldrh	r3, [r7, #30]
 8007f00:	3b01      	subs	r3, #1
 8007f02:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007f04:	8bfb      	ldrh	r3, [r7, #30]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1ea      	bne.n	8007ee0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	372c      	adds	r7, #44	; 0x2c
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	785b      	ldrb	r3, [r3, #1]
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d12c      	bne.n	8007f8e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	015a      	lsls	r2, r3, #5
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	db12      	blt.n	8007f6c <USB_EPSetStall+0x54>
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00f      	beq.n	8007f6c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	015a      	lsls	r2, r3, #5
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	4413      	add	r3, r2
 8007f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	0151      	lsls	r1, r2, #5
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	440a      	add	r2, r1
 8007f62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007f6a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	015a      	lsls	r2, r3, #5
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	4413      	add	r3, r2
 8007f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68ba      	ldr	r2, [r7, #8]
 8007f7c:	0151      	lsls	r1, r2, #5
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	440a      	add	r2, r1
 8007f82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007f8a:	6013      	str	r3, [r2, #0]
 8007f8c:	e02b      	b.n	8007fe6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	015a      	lsls	r2, r3, #5
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	4413      	add	r3, r2
 8007f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	db12      	blt.n	8007fc6 <USB_EPSetStall+0xae>
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00f      	beq.n	8007fc6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	015a      	lsls	r2, r3, #5
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	4413      	add	r3, r2
 8007fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68ba      	ldr	r2, [r7, #8]
 8007fb6:	0151      	lsls	r1, r2, #5
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	440a      	add	r2, r1
 8007fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fc0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007fc4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	015a      	lsls	r2, r3, #5
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	4413      	add	r3, r2
 8007fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	0151      	lsls	r1, r2, #5
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	440a      	add	r2, r1
 8007fdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fe0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007fe4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3714      	adds	r7, #20
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	785b      	ldrb	r3, [r3, #1]
 800800c:	2b01      	cmp	r3, #1
 800800e:	d128      	bne.n	8008062 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	015a      	lsls	r2, r3, #5
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	4413      	add	r3, r2
 8008018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	68ba      	ldr	r2, [r7, #8]
 8008020:	0151      	lsls	r1, r2, #5
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	440a      	add	r2, r1
 8008026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800802a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800802e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	791b      	ldrb	r3, [r3, #4]
 8008034:	2b03      	cmp	r3, #3
 8008036:	d003      	beq.n	8008040 <USB_EPClearStall+0x4c>
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	791b      	ldrb	r3, [r3, #4]
 800803c:	2b02      	cmp	r3, #2
 800803e:	d138      	bne.n	80080b2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	015a      	lsls	r2, r3, #5
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	4413      	add	r3, r2
 8008048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68ba      	ldr	r2, [r7, #8]
 8008050:	0151      	lsls	r1, r2, #5
 8008052:	68fa      	ldr	r2, [r7, #12]
 8008054:	440a      	add	r2, r1
 8008056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800805a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800805e:	6013      	str	r3, [r2, #0]
 8008060:	e027      	b.n	80080b2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	015a      	lsls	r2, r3, #5
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	4413      	add	r3, r2
 800806a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	0151      	lsls	r1, r2, #5
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	440a      	add	r2, r1
 8008078:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800807c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008080:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	791b      	ldrb	r3, [r3, #4]
 8008086:	2b03      	cmp	r3, #3
 8008088:	d003      	beq.n	8008092 <USB_EPClearStall+0x9e>
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	791b      	ldrb	r3, [r3, #4]
 800808e:	2b02      	cmp	r3, #2
 8008090:	d10f      	bne.n	80080b2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	015a      	lsls	r2, r3, #5
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	4413      	add	r3, r2
 800809a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	0151      	lsls	r1, r2, #5
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	440a      	add	r2, r1
 80080a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080b0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3714      	adds	r7, #20
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	460b      	mov	r3, r1
 80080ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80080e2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	78fb      	ldrb	r3, [r7, #3]
 80080ee:	011b      	lsls	r3, r3, #4
 80080f0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80080f4:	68f9      	ldr	r1, [r7, #12]
 80080f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080fa:	4313      	orrs	r3, r2
 80080fc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3714      	adds	r7, #20
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800810c:	b480      	push	{r7}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008126:	f023 0303 	bic.w	r3, r3, #3
 800812a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800813a:	f023 0302 	bic.w	r3, r3, #2
 800813e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3714      	adds	r7, #20
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800814e:	b480      	push	{r7}
 8008150:	b085      	sub	sp, #20
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68fa      	ldr	r2, [r7, #12]
 8008164:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008168:	f023 0303 	bic.w	r3, r3, #3
 800816c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800817c:	f043 0302 	orr.w	r3, r3, #2
 8008180:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3714      	adds	r7, #20
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	695b      	ldr	r3, [r3, #20]
 800819c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	699b      	ldr	r3, [r3, #24]
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	4013      	ands	r3, r2
 80081a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80081a8:	68fb      	ldr	r3, [r7, #12]
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3714      	adds	r7, #20
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr

080081b6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80081b6:	b480      	push	{r7}
 80081b8:	b085      	sub	sp, #20
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081d2:	69db      	ldr	r3, [r3, #28]
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	4013      	ands	r3, r2
 80081d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	0c1b      	lsrs	r3, r3, #16
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3714      	adds	r7, #20
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80081ea:	b480      	push	{r7}
 80081ec:	b085      	sub	sp, #20
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008206:	69db      	ldr	r3, [r3, #28]
 8008208:	68ba      	ldr	r2, [r7, #8]
 800820a:	4013      	ands	r3, r2
 800820c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	b29b      	uxth	r3, r3
}
 8008212:	4618      	mov	r0, r3
 8008214:	3714      	adds	r7, #20
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr

0800821e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800821e:	b480      	push	{r7}
 8008220:	b085      	sub	sp, #20
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
 8008226:	460b      	mov	r3, r1
 8008228:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800822e:	78fb      	ldrb	r3, [r7, #3]
 8008230:	015a      	lsls	r2, r3, #5
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	4413      	add	r3, r2
 8008236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	4013      	ands	r3, r2
 800824a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800824c:	68bb      	ldr	r3, [r7, #8]
}
 800824e:	4618      	mov	r0, r3
 8008250:	3714      	adds	r7, #20
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr

0800825a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800825a:	b480      	push	{r7}
 800825c:	b087      	sub	sp, #28
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
 8008262:	460b      	mov	r3, r1
 8008264:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800827a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800827c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800827e:	78fb      	ldrb	r3, [r7, #3]
 8008280:	f003 030f 	and.w	r3, r3, #15
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	fa22 f303 	lsr.w	r3, r2, r3
 800828a:	01db      	lsls	r3, r3, #7
 800828c:	b2db      	uxtb	r3, r3
 800828e:	693a      	ldr	r2, [r7, #16]
 8008290:	4313      	orrs	r3, r2
 8008292:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008294:	78fb      	ldrb	r3, [r7, #3]
 8008296:	015a      	lsls	r2, r3, #5
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	4413      	add	r3, r2
 800829c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	693a      	ldr	r2, [r7, #16]
 80082a4:	4013      	ands	r3, r2
 80082a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80082a8:	68bb      	ldr	r3, [r7, #8]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	371c      	adds	r7, #28
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b083      	sub	sp, #12
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	695b      	ldr	r3, [r3, #20]
 80082c2:	f003 0301 	and.w	r3, r3, #1
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80082d2:	b480      	push	{r7}
 80082d4:	b085      	sub	sp, #20
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082ec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80082f0:	f023 0307 	bic.w	r3, r3, #7
 80082f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008308:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	3714      	adds	r7, #20
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008318:	b480      	push	{r7}
 800831a:	b087      	sub	sp, #28
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	460b      	mov	r3, r1
 8008322:	607a      	str	r2, [r7, #4]
 8008324:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	333c      	adds	r3, #60	; 0x3c
 800832e:	3304      	adds	r3, #4
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	4a26      	ldr	r2, [pc, #152]	; (80083d0 <USB_EP0_OutStart+0xb8>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d90a      	bls.n	8008352 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008348:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800834c:	d101      	bne.n	8008352 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800834e:	2300      	movs	r3, #0
 8008350:	e037      	b.n	80083c2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008358:	461a      	mov	r2, r3
 800835a:	2300      	movs	r3, #0
 800835c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	697a      	ldr	r2, [r7, #20]
 8008368:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800836c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008370:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	697a      	ldr	r2, [r7, #20]
 800837c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008380:	f043 0318 	orr.w	r3, r3, #24
 8008384:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	697a      	ldr	r2, [r7, #20]
 8008390:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008394:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008398:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800839a:	7afb      	ldrb	r3, [r7, #11]
 800839c:	2b01      	cmp	r3, #1
 800839e:	d10f      	bne.n	80083c0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083a6:	461a      	mov	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	697a      	ldr	r2, [r7, #20]
 80083b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083ba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80083be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	371c      	adds	r7, #28
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	4f54300a 	.word	0x4f54300a

080083d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083dc:	2300      	movs	r3, #0
 80083de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	3301      	adds	r3, #1
 80083e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	4a13      	ldr	r2, [pc, #76]	; (8008438 <USB_CoreReset+0x64>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d901      	bls.n	80083f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80083ee:	2303      	movs	r3, #3
 80083f0:	e01b      	b.n	800842a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	daf2      	bge.n	80083e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80083fa:	2300      	movs	r3, #0
 80083fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	f043 0201 	orr.w	r2, r3, #1
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	3301      	adds	r3, #1
 800840e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	4a09      	ldr	r2, [pc, #36]	; (8008438 <USB_CoreReset+0x64>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d901      	bls.n	800841c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008418:	2303      	movs	r3, #3
 800841a:	e006      	b.n	800842a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	f003 0301 	and.w	r3, r3, #1
 8008424:	2b01      	cmp	r3, #1
 8008426:	d0f0      	beq.n	800840a <USB_CoreReset+0x36>

  return HAL_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3714      	adds	r7, #20
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	00030d40 	.word	0x00030d40

0800843c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	460b      	mov	r3, r1
 8008446:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008448:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800844c:	f002 fca2 	bl	800ad94 <USBD_static_malloc>
 8008450:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d109      	bne.n	800846c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	32b0      	adds	r2, #176	; 0xb0
 8008462:	2100      	movs	r1, #0
 8008464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008468:	2302      	movs	r3, #2
 800846a:	e0d4      	b.n	8008616 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800846c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008470:	2100      	movs	r1, #0
 8008472:	68f8      	ldr	r0, [r7, #12]
 8008474:	f002 fd04 	bl	800ae80 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	32b0      	adds	r2, #176	; 0xb0
 8008482:	68f9      	ldr	r1, [r7, #12]
 8008484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	32b0      	adds	r2, #176	; 0xb0
 8008492:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	7c1b      	ldrb	r3, [r3, #16]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d138      	bne.n	8008516 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80084a4:	4b5e      	ldr	r3, [pc, #376]	; (8008620 <USBD_CDC_Init+0x1e4>)
 80084a6:	7819      	ldrb	r1, [r3, #0]
 80084a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084ac:	2202      	movs	r2, #2
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f002 fb4d 	bl	800ab4e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80084b4:	4b5a      	ldr	r3, [pc, #360]	; (8008620 <USBD_CDC_Init+0x1e4>)
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	f003 020f 	and.w	r2, r3, #15
 80084bc:	6879      	ldr	r1, [r7, #4]
 80084be:	4613      	mov	r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4413      	add	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	440b      	add	r3, r1
 80084c8:	3324      	adds	r3, #36	; 0x24
 80084ca:	2201      	movs	r2, #1
 80084cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80084ce:	4b55      	ldr	r3, [pc, #340]	; (8008624 <USBD_CDC_Init+0x1e8>)
 80084d0:	7819      	ldrb	r1, [r3, #0]
 80084d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084d6:	2202      	movs	r2, #2
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f002 fb38 	bl	800ab4e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80084de:	4b51      	ldr	r3, [pc, #324]	; (8008624 <USBD_CDC_Init+0x1e8>)
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	f003 020f 	and.w	r2, r3, #15
 80084e6:	6879      	ldr	r1, [r7, #4]
 80084e8:	4613      	mov	r3, r2
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	4413      	add	r3, r2
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	440b      	add	r3, r1
 80084f2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80084f6:	2201      	movs	r2, #1
 80084f8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80084fa:	4b4b      	ldr	r3, [pc, #300]	; (8008628 <USBD_CDC_Init+0x1ec>)
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	f003 020f 	and.w	r2, r3, #15
 8008502:	6879      	ldr	r1, [r7, #4]
 8008504:	4613      	mov	r3, r2
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	4413      	add	r3, r2
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	440b      	add	r3, r1
 800850e:	3326      	adds	r3, #38	; 0x26
 8008510:	2210      	movs	r2, #16
 8008512:	801a      	strh	r2, [r3, #0]
 8008514:	e035      	b.n	8008582 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008516:	4b42      	ldr	r3, [pc, #264]	; (8008620 <USBD_CDC_Init+0x1e4>)
 8008518:	7819      	ldrb	r1, [r3, #0]
 800851a:	2340      	movs	r3, #64	; 0x40
 800851c:	2202      	movs	r2, #2
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f002 fb15 	bl	800ab4e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008524:	4b3e      	ldr	r3, [pc, #248]	; (8008620 <USBD_CDC_Init+0x1e4>)
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	f003 020f 	and.w	r2, r3, #15
 800852c:	6879      	ldr	r1, [r7, #4]
 800852e:	4613      	mov	r3, r2
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	4413      	add	r3, r2
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	440b      	add	r3, r1
 8008538:	3324      	adds	r3, #36	; 0x24
 800853a:	2201      	movs	r2, #1
 800853c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800853e:	4b39      	ldr	r3, [pc, #228]	; (8008624 <USBD_CDC_Init+0x1e8>)
 8008540:	7819      	ldrb	r1, [r3, #0]
 8008542:	2340      	movs	r3, #64	; 0x40
 8008544:	2202      	movs	r2, #2
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f002 fb01 	bl	800ab4e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800854c:	4b35      	ldr	r3, [pc, #212]	; (8008624 <USBD_CDC_Init+0x1e8>)
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	f003 020f 	and.w	r2, r3, #15
 8008554:	6879      	ldr	r1, [r7, #4]
 8008556:	4613      	mov	r3, r2
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	4413      	add	r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	440b      	add	r3, r1
 8008560:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008564:	2201      	movs	r2, #1
 8008566:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008568:	4b2f      	ldr	r3, [pc, #188]	; (8008628 <USBD_CDC_Init+0x1ec>)
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	f003 020f 	and.w	r2, r3, #15
 8008570:	6879      	ldr	r1, [r7, #4]
 8008572:	4613      	mov	r3, r2
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	4413      	add	r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	440b      	add	r3, r1
 800857c:	3326      	adds	r3, #38	; 0x26
 800857e:	2210      	movs	r2, #16
 8008580:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008582:	4b29      	ldr	r3, [pc, #164]	; (8008628 <USBD_CDC_Init+0x1ec>)
 8008584:	7819      	ldrb	r1, [r3, #0]
 8008586:	2308      	movs	r3, #8
 8008588:	2203      	movs	r2, #3
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f002 fadf 	bl	800ab4e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008590:	4b25      	ldr	r3, [pc, #148]	; (8008628 <USBD_CDC_Init+0x1ec>)
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	f003 020f 	and.w	r2, r3, #15
 8008598:	6879      	ldr	r1, [r7, #4]
 800859a:	4613      	mov	r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	4413      	add	r3, r2
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	440b      	add	r3, r1
 80085a4:	3324      	adds	r3, #36	; 0x24
 80085a6:	2201      	movs	r2, #1
 80085a8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	33b0      	adds	r3, #176	; 0xb0
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	4413      	add	r3, r2
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d101      	bne.n	80085e4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80085e0:	2302      	movs	r3, #2
 80085e2:	e018      	b.n	8008616 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	7c1b      	ldrb	r3, [r3, #16]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d10a      	bne.n	8008602 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80085ec:	4b0d      	ldr	r3, [pc, #52]	; (8008624 <USBD_CDC_Init+0x1e8>)
 80085ee:	7819      	ldrb	r1, [r3, #0]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80085f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f002 fb96 	bl	800ad2c <USBD_LL_PrepareReceive>
 8008600:	e008      	b.n	8008614 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008602:	4b08      	ldr	r3, [pc, #32]	; (8008624 <USBD_CDC_Init+0x1e8>)
 8008604:	7819      	ldrb	r1, [r3, #0]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800860c:	2340      	movs	r3, #64	; 0x40
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f002 fb8c 	bl	800ad2c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	20000093 	.word	0x20000093
 8008624:	20000094 	.word	0x20000094
 8008628:	20000095 	.word	0x20000095

0800862c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	460b      	mov	r3, r1
 8008636:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008638:	4b3a      	ldr	r3, [pc, #232]	; (8008724 <USBD_CDC_DeInit+0xf8>)
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	4619      	mov	r1, r3
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f002 faab 	bl	800ab9a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008644:	4b37      	ldr	r3, [pc, #220]	; (8008724 <USBD_CDC_DeInit+0xf8>)
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	f003 020f 	and.w	r2, r3, #15
 800864c:	6879      	ldr	r1, [r7, #4]
 800864e:	4613      	mov	r3, r2
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	4413      	add	r3, r2
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	440b      	add	r3, r1
 8008658:	3324      	adds	r3, #36	; 0x24
 800865a:	2200      	movs	r2, #0
 800865c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800865e:	4b32      	ldr	r3, [pc, #200]	; (8008728 <USBD_CDC_DeInit+0xfc>)
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	4619      	mov	r1, r3
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f002 fa98 	bl	800ab9a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800866a:	4b2f      	ldr	r3, [pc, #188]	; (8008728 <USBD_CDC_DeInit+0xfc>)
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	f003 020f 	and.w	r2, r3, #15
 8008672:	6879      	ldr	r1, [r7, #4]
 8008674:	4613      	mov	r3, r2
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	4413      	add	r3, r2
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	440b      	add	r3, r1
 800867e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008682:	2200      	movs	r2, #0
 8008684:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008686:	4b29      	ldr	r3, [pc, #164]	; (800872c <USBD_CDC_DeInit+0x100>)
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	4619      	mov	r1, r3
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f002 fa84 	bl	800ab9a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008692:	4b26      	ldr	r3, [pc, #152]	; (800872c <USBD_CDC_DeInit+0x100>)
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	f003 020f 	and.w	r2, r3, #15
 800869a:	6879      	ldr	r1, [r7, #4]
 800869c:	4613      	mov	r3, r2
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	4413      	add	r3, r2
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	440b      	add	r3, r1
 80086a6:	3324      	adds	r3, #36	; 0x24
 80086a8:	2200      	movs	r2, #0
 80086aa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80086ac:	4b1f      	ldr	r3, [pc, #124]	; (800872c <USBD_CDC_DeInit+0x100>)
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	f003 020f 	and.w	r2, r3, #15
 80086b4:	6879      	ldr	r1, [r7, #4]
 80086b6:	4613      	mov	r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	4413      	add	r3, r2
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	440b      	add	r3, r1
 80086c0:	3326      	adds	r3, #38	; 0x26
 80086c2:	2200      	movs	r2, #0
 80086c4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	32b0      	adds	r2, #176	; 0xb0
 80086d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d01f      	beq.n	8008718 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	33b0      	adds	r3, #176	; 0xb0
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	4413      	add	r3, r2
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	32b0      	adds	r2, #176	; 0xb0
 80086f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086fa:	4618      	mov	r0, r3
 80086fc:	f002 fb58 	bl	800adb0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	32b0      	adds	r2, #176	; 0xb0
 800870a:	2100      	movs	r1, #0
 800870c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3708      	adds	r7, #8
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	20000093 	.word	0x20000093
 8008728:	20000094 	.word	0x20000094
 800872c:	20000095 	.word	0x20000095

08008730 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b086      	sub	sp, #24
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	32b0      	adds	r2, #176	; 0xb0
 8008744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008748:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800874a:	2300      	movs	r3, #0
 800874c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800874e:	2300      	movs	r3, #0
 8008750:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008752:	2300      	movs	r3, #0
 8008754:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d101      	bne.n	8008760 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800875c:	2303      	movs	r3, #3
 800875e:	e0bf      	b.n	80088e0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008768:	2b00      	cmp	r3, #0
 800876a:	d050      	beq.n	800880e <USBD_CDC_Setup+0xde>
 800876c:	2b20      	cmp	r3, #32
 800876e:	f040 80af 	bne.w	80088d0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	88db      	ldrh	r3, [r3, #6]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d03a      	beq.n	80087f0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	b25b      	sxtb	r3, r3
 8008780:	2b00      	cmp	r3, #0
 8008782:	da1b      	bge.n	80087bc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	33b0      	adds	r3, #176	; 0xb0
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	4413      	add	r3, r2
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	683a      	ldr	r2, [r7, #0]
 8008798:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800879a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800879c:	683a      	ldr	r2, [r7, #0]
 800879e:	88d2      	ldrh	r2, [r2, #6]
 80087a0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	88db      	ldrh	r3, [r3, #6]
 80087a6:	2b07      	cmp	r3, #7
 80087a8:	bf28      	it	cs
 80087aa:	2307      	movcs	r3, #7
 80087ac:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	89fa      	ldrh	r2, [r7, #14]
 80087b2:	4619      	mov	r1, r3
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f001 fd89 	bl	800a2cc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80087ba:	e090      	b.n	80088de <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	785a      	ldrb	r2, [r3, #1]
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	88db      	ldrh	r3, [r3, #6]
 80087ca:	2b3f      	cmp	r3, #63	; 0x3f
 80087cc:	d803      	bhi.n	80087d6 <USBD_CDC_Setup+0xa6>
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	88db      	ldrh	r3, [r3, #6]
 80087d2:	b2da      	uxtb	r2, r3
 80087d4:	e000      	b.n	80087d8 <USBD_CDC_Setup+0xa8>
 80087d6:	2240      	movs	r2, #64	; 0x40
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80087de:	6939      	ldr	r1, [r7, #16]
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80087e6:	461a      	mov	r2, r3
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f001 fd9b 	bl	800a324 <USBD_CtlPrepareRx>
      break;
 80087ee:	e076      	b.n	80088de <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	33b0      	adds	r3, #176	; 0xb0
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	4413      	add	r3, r2
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	683a      	ldr	r2, [r7, #0]
 8008804:	7850      	ldrb	r0, [r2, #1]
 8008806:	2200      	movs	r2, #0
 8008808:	6839      	ldr	r1, [r7, #0]
 800880a:	4798      	blx	r3
      break;
 800880c:	e067      	b.n	80088de <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	785b      	ldrb	r3, [r3, #1]
 8008812:	2b0b      	cmp	r3, #11
 8008814:	d851      	bhi.n	80088ba <USBD_CDC_Setup+0x18a>
 8008816:	a201      	add	r2, pc, #4	; (adr r2, 800881c <USBD_CDC_Setup+0xec>)
 8008818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800881c:	0800884d 	.word	0x0800884d
 8008820:	080088c9 	.word	0x080088c9
 8008824:	080088bb 	.word	0x080088bb
 8008828:	080088bb 	.word	0x080088bb
 800882c:	080088bb 	.word	0x080088bb
 8008830:	080088bb 	.word	0x080088bb
 8008834:	080088bb 	.word	0x080088bb
 8008838:	080088bb 	.word	0x080088bb
 800883c:	080088bb 	.word	0x080088bb
 8008840:	080088bb 	.word	0x080088bb
 8008844:	08008877 	.word	0x08008877
 8008848:	080088a1 	.word	0x080088a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008852:	b2db      	uxtb	r3, r3
 8008854:	2b03      	cmp	r3, #3
 8008856:	d107      	bne.n	8008868 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008858:	f107 030a 	add.w	r3, r7, #10
 800885c:	2202      	movs	r2, #2
 800885e:	4619      	mov	r1, r3
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f001 fd33 	bl	800a2cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008866:	e032      	b.n	80088ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008868:	6839      	ldr	r1, [r7, #0]
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f001 fcbd 	bl	800a1ea <USBD_CtlError>
            ret = USBD_FAIL;
 8008870:	2303      	movs	r3, #3
 8008872:	75fb      	strb	r3, [r7, #23]
          break;
 8008874:	e02b      	b.n	80088ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800887c:	b2db      	uxtb	r3, r3
 800887e:	2b03      	cmp	r3, #3
 8008880:	d107      	bne.n	8008892 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008882:	f107 030d 	add.w	r3, r7, #13
 8008886:	2201      	movs	r2, #1
 8008888:	4619      	mov	r1, r3
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f001 fd1e 	bl	800a2cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008890:	e01d      	b.n	80088ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008892:	6839      	ldr	r1, [r7, #0]
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f001 fca8 	bl	800a1ea <USBD_CtlError>
            ret = USBD_FAIL;
 800889a:	2303      	movs	r3, #3
 800889c:	75fb      	strb	r3, [r7, #23]
          break;
 800889e:	e016      	b.n	80088ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	2b03      	cmp	r3, #3
 80088aa:	d00f      	beq.n	80088cc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80088ac:	6839      	ldr	r1, [r7, #0]
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f001 fc9b 	bl	800a1ea <USBD_CtlError>
            ret = USBD_FAIL;
 80088b4:	2303      	movs	r3, #3
 80088b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80088b8:	e008      	b.n	80088cc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80088ba:	6839      	ldr	r1, [r7, #0]
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f001 fc94 	bl	800a1ea <USBD_CtlError>
          ret = USBD_FAIL;
 80088c2:	2303      	movs	r3, #3
 80088c4:	75fb      	strb	r3, [r7, #23]
          break;
 80088c6:	e002      	b.n	80088ce <USBD_CDC_Setup+0x19e>
          break;
 80088c8:	bf00      	nop
 80088ca:	e008      	b.n	80088de <USBD_CDC_Setup+0x1ae>
          break;
 80088cc:	bf00      	nop
      }
      break;
 80088ce:	e006      	b.n	80088de <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80088d0:	6839      	ldr	r1, [r7, #0]
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f001 fc89 	bl	800a1ea <USBD_CtlError>
      ret = USBD_FAIL;
 80088d8:	2303      	movs	r3, #3
 80088da:	75fb      	strb	r3, [r7, #23]
      break;
 80088dc:	bf00      	nop
  }

  return (uint8_t)ret;
 80088de:	7dfb      	ldrb	r3, [r7, #23]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3718      	adds	r7, #24
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	460b      	mov	r3, r1
 80088f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80088fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	32b0      	adds	r2, #176	; 0xb0
 8008906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d101      	bne.n	8008912 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800890e:	2303      	movs	r3, #3
 8008910:	e065      	b.n	80089de <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	32b0      	adds	r2, #176	; 0xb0
 800891c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008920:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008922:	78fb      	ldrb	r3, [r7, #3]
 8008924:	f003 020f 	and.w	r2, r3, #15
 8008928:	6879      	ldr	r1, [r7, #4]
 800892a:	4613      	mov	r3, r2
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	4413      	add	r3, r2
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	440b      	add	r3, r1
 8008934:	3318      	adds	r3, #24
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d02f      	beq.n	800899c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800893c:	78fb      	ldrb	r3, [r7, #3]
 800893e:	f003 020f 	and.w	r2, r3, #15
 8008942:	6879      	ldr	r1, [r7, #4]
 8008944:	4613      	mov	r3, r2
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	4413      	add	r3, r2
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	440b      	add	r3, r1
 800894e:	3318      	adds	r3, #24
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	78fb      	ldrb	r3, [r7, #3]
 8008954:	f003 010f 	and.w	r1, r3, #15
 8008958:	68f8      	ldr	r0, [r7, #12]
 800895a:	460b      	mov	r3, r1
 800895c:	00db      	lsls	r3, r3, #3
 800895e:	440b      	add	r3, r1
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	4403      	add	r3, r0
 8008964:	3348      	adds	r3, #72	; 0x48
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	fbb2 f1f3 	udiv	r1, r2, r3
 800896c:	fb01 f303 	mul.w	r3, r1, r3
 8008970:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008972:	2b00      	cmp	r3, #0
 8008974:	d112      	bne.n	800899c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008976:	78fb      	ldrb	r3, [r7, #3]
 8008978:	f003 020f 	and.w	r2, r3, #15
 800897c:	6879      	ldr	r1, [r7, #4]
 800897e:	4613      	mov	r3, r2
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	4413      	add	r3, r2
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	440b      	add	r3, r1
 8008988:	3318      	adds	r3, #24
 800898a:	2200      	movs	r2, #0
 800898c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800898e:	78f9      	ldrb	r1, [r7, #3]
 8008990:	2300      	movs	r3, #0
 8008992:	2200      	movs	r2, #0
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f002 f9a8 	bl	800acea <USBD_LL_Transmit>
 800899a:	e01f      	b.n	80089dc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	2200      	movs	r2, #0
 80089a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	33b0      	adds	r3, #176	; 0xb0
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	4413      	add	r3, r2
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d010      	beq.n	80089dc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	33b0      	adds	r3, #176	; 0xb0
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	4413      	add	r3, r2
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	68ba      	ldr	r2, [r7, #8]
 80089ce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80089d8:	78fa      	ldrb	r2, [r7, #3]
 80089da:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b084      	sub	sp, #16
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
 80089ee:	460b      	mov	r3, r1
 80089f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	32b0      	adds	r2, #176	; 0xb0
 80089fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a00:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	32b0      	adds	r2, #176	; 0xb0
 8008a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d101      	bne.n	8008a18 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008a14:	2303      	movs	r3, #3
 8008a16:	e01a      	b.n	8008a4e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008a18:	78fb      	ldrb	r3, [r7, #3]
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f002 f9a6 	bl	800ad6e <USBD_LL_GetRxDataSize>
 8008a22:	4602      	mov	r2, r0
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	33b0      	adds	r3, #176	; 0xb0
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	4413      	add	r3, r2
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	68fa      	ldr	r2, [r7, #12]
 8008a3e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008a42:	68fa      	ldr	r2, [r7, #12]
 8008a44:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008a48:	4611      	mov	r1, r2
 8008a4a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b084      	sub	sp, #16
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	32b0      	adds	r2, #176	; 0xb0
 8008a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a6c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d101      	bne.n	8008a78 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008a74:	2303      	movs	r3, #3
 8008a76:	e025      	b.n	8008ac4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	33b0      	adds	r3, #176	; 0xb0
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	4413      	add	r3, r2
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d01a      	beq.n	8008ac2 <USBD_CDC_EP0_RxReady+0x6c>
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008a92:	2bff      	cmp	r3, #255	; 0xff
 8008a94:	d015      	beq.n	8008ac2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	33b0      	adds	r3, #176	; 0xb0
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	4413      	add	r3, r2
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	68fa      	ldr	r2, [r7, #12]
 8008aaa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008aae:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008ab6:	b292      	uxth	r2, r2
 8008ab8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	22ff      	movs	r2, #255	; 0xff
 8008abe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b086      	sub	sp, #24
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008ad4:	2182      	movs	r1, #130	; 0x82
 8008ad6:	4818      	ldr	r0, [pc, #96]	; (8008b38 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008ad8:	f000 fd4f 	bl	800957a <USBD_GetEpDesc>
 8008adc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008ade:	2101      	movs	r1, #1
 8008ae0:	4815      	ldr	r0, [pc, #84]	; (8008b38 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008ae2:	f000 fd4a 	bl	800957a <USBD_GetEpDesc>
 8008ae6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008ae8:	2181      	movs	r1, #129	; 0x81
 8008aea:	4813      	ldr	r0, [pc, #76]	; (8008b38 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008aec:	f000 fd45 	bl	800957a <USBD_GetEpDesc>
 8008af0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d002      	beq.n	8008afe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	2210      	movs	r2, #16
 8008afc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d006      	beq.n	8008b12 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b0c:	711a      	strb	r2, [r3, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d006      	beq.n	8008b26 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b20:	711a      	strb	r2, [r3, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2243      	movs	r2, #67	; 0x43
 8008b2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008b2c:	4b02      	ldr	r3, [pc, #8]	; (8008b38 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3718      	adds	r7, #24
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	20000050 	.word	0x20000050

08008b3c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b086      	sub	sp, #24
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008b44:	2182      	movs	r1, #130	; 0x82
 8008b46:	4818      	ldr	r0, [pc, #96]	; (8008ba8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008b48:	f000 fd17 	bl	800957a <USBD_GetEpDesc>
 8008b4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008b4e:	2101      	movs	r1, #1
 8008b50:	4815      	ldr	r0, [pc, #84]	; (8008ba8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008b52:	f000 fd12 	bl	800957a <USBD_GetEpDesc>
 8008b56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008b58:	2181      	movs	r1, #129	; 0x81
 8008b5a:	4813      	ldr	r0, [pc, #76]	; (8008ba8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008b5c:	f000 fd0d 	bl	800957a <USBD_GetEpDesc>
 8008b60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d002      	beq.n	8008b6e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	2210      	movs	r2, #16
 8008b6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d006      	beq.n	8008b82 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	2200      	movs	r2, #0
 8008b78:	711a      	strb	r2, [r3, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f042 0202 	orr.w	r2, r2, #2
 8008b80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d006      	beq.n	8008b96 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	711a      	strb	r2, [r3, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f042 0202 	orr.w	r2, r2, #2
 8008b94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2243      	movs	r2, #67	; 0x43
 8008b9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008b9c:	4b02      	ldr	r3, [pc, #8]	; (8008ba8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3718      	adds	r7, #24
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	20000050 	.word	0x20000050

08008bac <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b086      	sub	sp, #24
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008bb4:	2182      	movs	r1, #130	; 0x82
 8008bb6:	4818      	ldr	r0, [pc, #96]	; (8008c18 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008bb8:	f000 fcdf 	bl	800957a <USBD_GetEpDesc>
 8008bbc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008bbe:	2101      	movs	r1, #1
 8008bc0:	4815      	ldr	r0, [pc, #84]	; (8008c18 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008bc2:	f000 fcda 	bl	800957a <USBD_GetEpDesc>
 8008bc6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008bc8:	2181      	movs	r1, #129	; 0x81
 8008bca:	4813      	ldr	r0, [pc, #76]	; (8008c18 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008bcc:	f000 fcd5 	bl	800957a <USBD_GetEpDesc>
 8008bd0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d002      	beq.n	8008bde <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	2210      	movs	r2, #16
 8008bdc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d006      	beq.n	8008bf2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bec:	711a      	strb	r2, [r3, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d006      	beq.n	8008c06 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c00:	711a      	strb	r2, [r3, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2243      	movs	r2, #67	; 0x43
 8008c0a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008c0c:	4b02      	ldr	r3, [pc, #8]	; (8008c18 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3718      	adds	r7, #24
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	20000050 	.word	0x20000050

08008c1c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	220a      	movs	r2, #10
 8008c28:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008c2a:	4b03      	ldr	r3, [pc, #12]	; (8008c38 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr
 8008c38:	2000000c 	.word	0x2000000c

08008c3c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d101      	bne.n	8008c50 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	e009      	b.n	8008c64 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	33b0      	adds	r3, #176	; 0xb0
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	4413      	add	r3, r2
 8008c5e:	683a      	ldr	r2, [r7, #0]
 8008c60:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b087      	sub	sp, #28
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	32b0      	adds	r2, #176	; 0xb0
 8008c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c8a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d101      	bne.n	8008c96 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008c92:	2303      	movs	r3, #3
 8008c94:	e008      	b.n	8008ca8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	371c      	adds	r7, #28
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	32b0      	adds	r2, #176	; 0xb0
 8008cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ccc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d101      	bne.n	8008cd8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	e004      	b.n	8008ce2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	683a      	ldr	r2, [r7, #0]
 8008cdc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3714      	adds	r7, #20
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
	...

08008cf0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	32b0      	adds	r2, #176	; 0xb0
 8008d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d06:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	32b0      	adds	r2, #176	; 0xb0
 8008d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d101      	bne.n	8008d22 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	e025      	b.n	8008d6e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d11f      	bne.n	8008d6c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008d34:	4b10      	ldr	r3, [pc, #64]	; (8008d78 <USBD_CDC_TransmitPacket+0x88>)
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	f003 020f 	and.w	r2, r3, #15
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	4613      	mov	r3, r2
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	4413      	add	r3, r2
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	4403      	add	r3, r0
 8008d4e:	3318      	adds	r3, #24
 8008d50:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008d52:	4b09      	ldr	r3, [pc, #36]	; (8008d78 <USBD_CDC_TransmitPacket+0x88>)
 8008d54:	7819      	ldrb	r1, [r3, #0]
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f001 ffc1 	bl	800acea <USBD_LL_Transmit>

    ret = USBD_OK;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3710      	adds	r7, #16
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	20000093 	.word	0x20000093

08008d7c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	32b0      	adds	r2, #176	; 0xb0
 8008d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d92:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	32b0      	adds	r2, #176	; 0xb0
 8008d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d101      	bne.n	8008daa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008da6:	2303      	movs	r3, #3
 8008da8:	e018      	b.n	8008ddc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	7c1b      	ldrb	r3, [r3, #16]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d10a      	bne.n	8008dc8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008db2:	4b0c      	ldr	r3, [pc, #48]	; (8008de4 <USBD_CDC_ReceivePacket+0x68>)
 8008db4:	7819      	ldrb	r1, [r3, #0]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008dbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f001 ffb3 	bl	800ad2c <USBD_LL_PrepareReceive>
 8008dc6:	e008      	b.n	8008dda <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008dc8:	4b06      	ldr	r3, [pc, #24]	; (8008de4 <USBD_CDC_ReceivePacket+0x68>)
 8008dca:	7819      	ldrb	r1, [r3, #0]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008dd2:	2340      	movs	r3, #64	; 0x40
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f001 ffa9 	bl	800ad2c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	20000094 	.word	0x20000094

08008de8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b086      	sub	sp, #24
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	4613      	mov	r3, r2
 8008df4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d101      	bne.n	8008e00 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008dfc:	2303      	movs	r3, #3
 8008dfe:	e01f      	b.n	8008e40 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2200      	movs	r2, #0
 8008e14:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d003      	beq.n	8008e26 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	68ba      	ldr	r2, [r7, #8]
 8008e22:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	79fa      	ldrb	r2, [r7, #7]
 8008e32:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f001 fe23 	bl	800aa80 <USBD_LL_Init>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3718      	adds	r7, #24
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e52:	2300      	movs	r3, #0
 8008e54:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d101      	bne.n	8008e60 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	e025      	b.n	8008eac <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	683a      	ldr	r2, [r7, #0]
 8008e64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	32ae      	adds	r2, #174	; 0xae
 8008e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00f      	beq.n	8008e9c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	32ae      	adds	r2, #174	; 0xae
 8008e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e8c:	f107 020e 	add.w	r2, r7, #14
 8008e90:	4610      	mov	r0, r2
 8008e92:	4798      	blx	r3
 8008e94:	4602      	mov	r2, r0
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008ea2:	1c5a      	adds	r2, r3, #1
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008eaa:	2300      	movs	r3, #0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3710      	adds	r7, #16
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f001 fe2b 	bl	800ab18 <USBD_LL_Start>
 8008ec2:	4603      	mov	r3, r0
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3708      	adds	r7, #8
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ed4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	370c      	adds	r7, #12
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr

08008ee2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b084      	sub	sp, #16
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
 8008eea:	460b      	mov	r3, r1
 8008eec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d009      	beq.n	8008f10 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	78fa      	ldrb	r2, [r7, #3]
 8008f06:	4611      	mov	r1, r2
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	4798      	blx	r3
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3710      	adds	r7, #16
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b084      	sub	sp, #16
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
 8008f22:	460b      	mov	r3, r1
 8008f24:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f26:	2300      	movs	r3, #0
 8008f28:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	78fa      	ldrb	r2, [r7, #3]
 8008f34:	4611      	mov	r1, r2
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	4798      	blx	r3
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d001      	beq.n	8008f44 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008f40:	2303      	movs	r3, #3
 8008f42:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b084      	sub	sp, #16
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008f5e:	6839      	ldr	r1, [r7, #0]
 8008f60:	4618      	mov	r0, r3
 8008f62:	f001 f908 	bl	800a176 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008f74:	461a      	mov	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008f82:	f003 031f 	and.w	r3, r3, #31
 8008f86:	2b02      	cmp	r3, #2
 8008f88:	d01a      	beq.n	8008fc0 <USBD_LL_SetupStage+0x72>
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d822      	bhi.n	8008fd4 <USBD_LL_SetupStage+0x86>
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d002      	beq.n	8008f98 <USBD_LL_SetupStage+0x4a>
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d00a      	beq.n	8008fac <USBD_LL_SetupStage+0x5e>
 8008f96:	e01d      	b.n	8008fd4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 fb5f 	bl	8009664 <USBD_StdDevReq>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	73fb      	strb	r3, [r7, #15]
      break;
 8008faa:	e020      	b.n	8008fee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fbc7 	bl	8009748 <USBD_StdItfReq>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	73fb      	strb	r3, [r7, #15]
      break;
 8008fbe:	e016      	b.n	8008fee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 fc29 	bl	8009820 <USBD_StdEPReq>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	73fb      	strb	r3, [r7, #15]
      break;
 8008fd2:	e00c      	b.n	8008fee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008fda:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f001 fdf8 	bl	800abd8 <USBD_LL_StallEP>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	73fb      	strb	r3, [r7, #15]
      break;
 8008fec:	bf00      	nop
  }

  return ret;
 8008fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b086      	sub	sp, #24
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	460b      	mov	r3, r1
 8009002:	607a      	str	r2, [r7, #4]
 8009004:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009006:	2300      	movs	r3, #0
 8009008:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800900a:	7afb      	ldrb	r3, [r7, #11]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d16e      	bne.n	80090ee <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009016:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800901e:	2b03      	cmp	r3, #3
 8009020:	f040 8098 	bne.w	8009154 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	689a      	ldr	r2, [r3, #8]
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	429a      	cmp	r2, r3
 800902e:	d913      	bls.n	8009058 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	689a      	ldr	r2, [r3, #8]
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	1ad2      	subs	r2, r2, r3
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	68da      	ldr	r2, [r3, #12]
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	4293      	cmp	r3, r2
 8009048:	bf28      	it	cs
 800904a:	4613      	movcs	r3, r2
 800904c:	461a      	mov	r2, r3
 800904e:	6879      	ldr	r1, [r7, #4]
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	f001 f984 	bl	800a35e <USBD_CtlContinueRx>
 8009056:	e07d      	b.n	8009154 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800905e:	f003 031f 	and.w	r3, r3, #31
 8009062:	2b02      	cmp	r3, #2
 8009064:	d014      	beq.n	8009090 <USBD_LL_DataOutStage+0x98>
 8009066:	2b02      	cmp	r3, #2
 8009068:	d81d      	bhi.n	80090a6 <USBD_LL_DataOutStage+0xae>
 800906a:	2b00      	cmp	r3, #0
 800906c:	d002      	beq.n	8009074 <USBD_LL_DataOutStage+0x7c>
 800906e:	2b01      	cmp	r3, #1
 8009070:	d003      	beq.n	800907a <USBD_LL_DataOutStage+0x82>
 8009072:	e018      	b.n	80090a6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009074:	2300      	movs	r3, #0
 8009076:	75bb      	strb	r3, [r7, #22]
            break;
 8009078:	e018      	b.n	80090ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009080:	b2db      	uxtb	r3, r3
 8009082:	4619      	mov	r1, r3
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	f000 fa5e 	bl	8009546 <USBD_CoreFindIF>
 800908a:	4603      	mov	r3, r0
 800908c:	75bb      	strb	r3, [r7, #22]
            break;
 800908e:	e00d      	b.n	80090ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009096:	b2db      	uxtb	r3, r3
 8009098:	4619      	mov	r1, r3
 800909a:	68f8      	ldr	r0, [r7, #12]
 800909c:	f000 fa60 	bl	8009560 <USBD_CoreFindEP>
 80090a0:	4603      	mov	r3, r0
 80090a2:	75bb      	strb	r3, [r7, #22]
            break;
 80090a4:	e002      	b.n	80090ac <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80090a6:	2300      	movs	r3, #0
 80090a8:	75bb      	strb	r3, [r7, #22]
            break;
 80090aa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80090ac:	7dbb      	ldrb	r3, [r7, #22]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d119      	bne.n	80090e6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	2b03      	cmp	r3, #3
 80090bc:	d113      	bne.n	80090e6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80090be:	7dba      	ldrb	r2, [r7, #22]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	32ae      	adds	r2, #174	; 0xae
 80090c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00b      	beq.n	80090e6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80090ce:	7dba      	ldrb	r2, [r7, #22]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80090d6:	7dba      	ldrb	r2, [r7, #22]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	32ae      	adds	r2, #174	; 0xae
 80090dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090e0:	691b      	ldr	r3, [r3, #16]
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80090e6:	68f8      	ldr	r0, [r7, #12]
 80090e8:	f001 f94a 	bl	800a380 <USBD_CtlSendStatus>
 80090ec:	e032      	b.n	8009154 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80090ee:	7afb      	ldrb	r3, [r7, #11]
 80090f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	4619      	mov	r1, r3
 80090f8:	68f8      	ldr	r0, [r7, #12]
 80090fa:	f000 fa31 	bl	8009560 <USBD_CoreFindEP>
 80090fe:	4603      	mov	r3, r0
 8009100:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009102:	7dbb      	ldrb	r3, [r7, #22]
 8009104:	2bff      	cmp	r3, #255	; 0xff
 8009106:	d025      	beq.n	8009154 <USBD_LL_DataOutStage+0x15c>
 8009108:	7dbb      	ldrb	r3, [r7, #22]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d122      	bne.n	8009154 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009114:	b2db      	uxtb	r3, r3
 8009116:	2b03      	cmp	r3, #3
 8009118:	d117      	bne.n	800914a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800911a:	7dba      	ldrb	r2, [r7, #22]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	32ae      	adds	r2, #174	; 0xae
 8009120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009124:	699b      	ldr	r3, [r3, #24]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00f      	beq.n	800914a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800912a:	7dba      	ldrb	r2, [r7, #22]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009132:	7dba      	ldrb	r2, [r7, #22]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	32ae      	adds	r2, #174	; 0xae
 8009138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800913c:	699b      	ldr	r3, [r3, #24]
 800913e:	7afa      	ldrb	r2, [r7, #11]
 8009140:	4611      	mov	r1, r2
 8009142:	68f8      	ldr	r0, [r7, #12]
 8009144:	4798      	blx	r3
 8009146:	4603      	mov	r3, r0
 8009148:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800914a:	7dfb      	ldrb	r3, [r7, #23]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d001      	beq.n	8009154 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009150:	7dfb      	ldrb	r3, [r7, #23]
 8009152:	e000      	b.n	8009156 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009154:	2300      	movs	r3, #0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3718      	adds	r7, #24
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}

0800915e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800915e:	b580      	push	{r7, lr}
 8009160:	b086      	sub	sp, #24
 8009162:	af00      	add	r7, sp, #0
 8009164:	60f8      	str	r0, [r7, #12]
 8009166:	460b      	mov	r3, r1
 8009168:	607a      	str	r2, [r7, #4]
 800916a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800916c:	7afb      	ldrb	r3, [r7, #11]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d16f      	bne.n	8009252 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	3314      	adds	r3, #20
 8009176:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800917e:	2b02      	cmp	r3, #2
 8009180:	d15a      	bne.n	8009238 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	689a      	ldr	r2, [r3, #8]
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	429a      	cmp	r2, r3
 800918c:	d914      	bls.n	80091b8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	689a      	ldr	r2, [r3, #8]
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	1ad2      	subs	r2, r2, r3
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	461a      	mov	r2, r3
 80091a2:	6879      	ldr	r1, [r7, #4]
 80091a4:	68f8      	ldr	r0, [r7, #12]
 80091a6:	f001 f8ac 	bl	800a302 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091aa:	2300      	movs	r3, #0
 80091ac:	2200      	movs	r2, #0
 80091ae:	2100      	movs	r1, #0
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	f001 fdbb 	bl	800ad2c <USBD_LL_PrepareReceive>
 80091b6:	e03f      	b.n	8009238 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	68da      	ldr	r2, [r3, #12]
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d11c      	bne.n	80091fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	685a      	ldr	r2, [r3, #4]
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d316      	bcc.n	80091fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	685a      	ldr	r2, [r3, #4]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80091da:	429a      	cmp	r2, r3
 80091dc:	d20f      	bcs.n	80091fe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80091de:	2200      	movs	r2, #0
 80091e0:	2100      	movs	r1, #0
 80091e2:	68f8      	ldr	r0, [r7, #12]
 80091e4:	f001 f88d 	bl	800a302 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091f0:	2300      	movs	r3, #0
 80091f2:	2200      	movs	r2, #0
 80091f4:	2100      	movs	r1, #0
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f001 fd98 	bl	800ad2c <USBD_LL_PrepareReceive>
 80091fc:	e01c      	b.n	8009238 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009204:	b2db      	uxtb	r3, r3
 8009206:	2b03      	cmp	r3, #3
 8009208:	d10f      	bne.n	800922a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d009      	beq.n	800922a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009224:	68db      	ldr	r3, [r3, #12]
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800922a:	2180      	movs	r1, #128	; 0x80
 800922c:	68f8      	ldr	r0, [r7, #12]
 800922e:	f001 fcd3 	bl	800abd8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009232:	68f8      	ldr	r0, [r7, #12]
 8009234:	f001 f8b7 	bl	800a3a6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800923e:	2b00      	cmp	r3, #0
 8009240:	d03a      	beq.n	80092b8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f7ff fe42 	bl	8008ecc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2200      	movs	r2, #0
 800924c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009250:	e032      	b.n	80092b8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009252:	7afb      	ldrb	r3, [r7, #11]
 8009254:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009258:	b2db      	uxtb	r3, r3
 800925a:	4619      	mov	r1, r3
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	f000 f97f 	bl	8009560 <USBD_CoreFindEP>
 8009262:	4603      	mov	r3, r0
 8009264:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009266:	7dfb      	ldrb	r3, [r7, #23]
 8009268:	2bff      	cmp	r3, #255	; 0xff
 800926a:	d025      	beq.n	80092b8 <USBD_LL_DataInStage+0x15a>
 800926c:	7dfb      	ldrb	r3, [r7, #23]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d122      	bne.n	80092b8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009278:	b2db      	uxtb	r3, r3
 800927a:	2b03      	cmp	r3, #3
 800927c:	d11c      	bne.n	80092b8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800927e:	7dfa      	ldrb	r2, [r7, #23]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	32ae      	adds	r2, #174	; 0xae
 8009284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009288:	695b      	ldr	r3, [r3, #20]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d014      	beq.n	80092b8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800928e:	7dfa      	ldrb	r2, [r7, #23]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009296:	7dfa      	ldrb	r2, [r7, #23]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	32ae      	adds	r2, #174	; 0xae
 800929c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092a0:	695b      	ldr	r3, [r3, #20]
 80092a2:	7afa      	ldrb	r2, [r7, #11]
 80092a4:	4611      	mov	r1, r2
 80092a6:	68f8      	ldr	r0, [r7, #12]
 80092a8:	4798      	blx	r3
 80092aa:	4603      	mov	r3, r0
 80092ac:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80092ae:	7dbb      	ldrb	r3, [r7, #22]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d001      	beq.n	80092b8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80092b4:	7dbb      	ldrb	r3, [r7, #22]
 80092b6:	e000      	b.n	80092ba <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3718      	adds	r7, #24
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b084      	sub	sp, #16
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80092ca:	2300      	movs	r3, #0
 80092cc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2201      	movs	r2, #1
 80092d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d014      	beq.n	8009328 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d00e      	beq.n	8009328 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	6852      	ldr	r2, [r2, #4]
 8009316:	b2d2      	uxtb	r2, r2
 8009318:	4611      	mov	r1, r2
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	4798      	blx	r3
 800931e:	4603      	mov	r3, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d001      	beq.n	8009328 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009324:	2303      	movs	r3, #3
 8009326:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009328:	2340      	movs	r3, #64	; 0x40
 800932a:	2200      	movs	r2, #0
 800932c:	2100      	movs	r1, #0
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f001 fc0d 	bl	800ab4e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2240      	movs	r2, #64	; 0x40
 8009340:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009344:	2340      	movs	r3, #64	; 0x40
 8009346:	2200      	movs	r2, #0
 8009348:	2180      	movs	r1, #128	; 0x80
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f001 fbff 	bl	800ab4e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2240      	movs	r2, #64	; 0x40
 800935a:	621a      	str	r2, [r3, #32]

  return ret;
 800935c:	7bfb      	ldrb	r3, [r7, #15]
}
 800935e:	4618      	mov	r0, r3
 8009360:	3710      	adds	r7, #16
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009366:	b480      	push	{r7}
 8009368:	b083      	sub	sp, #12
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
 800936e:	460b      	mov	r3, r1
 8009370:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	78fa      	ldrb	r2, [r7, #3]
 8009376:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	370c      	adds	r7, #12
 800937e:	46bd      	mov	sp, r7
 8009380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009384:	4770      	bx	lr

08009386 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009386:	b480      	push	{r7}
 8009388:	b083      	sub	sp, #12
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009394:	b2da      	uxtb	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2204      	movs	r2, #4
 80093a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	370c      	adds	r7, #12
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr

080093b2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80093b2:	b480      	push	{r7}
 80093b4:	b083      	sub	sp, #12
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	2b04      	cmp	r3, #4
 80093c4:	d106      	bne.n	80093d4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80093cc:	b2da      	uxtb	r2, r3
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	370c      	adds	r7, #12
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr

080093e2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b082      	sub	sp, #8
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	2b03      	cmp	r3, #3
 80093f4:	d110      	bne.n	8009418 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d00b      	beq.n	8009418 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009406:	69db      	ldr	r3, [r3, #28]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d005      	beq.n	8009418 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009412:	69db      	ldr	r3, [r3, #28]
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009418:	2300      	movs	r3, #0
}
 800941a:	4618      	mov	r0, r3
 800941c:	3708      	adds	r7, #8
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b082      	sub	sp, #8
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
 800942a:	460b      	mov	r3, r1
 800942c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	32ae      	adds	r2, #174	; 0xae
 8009438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d101      	bne.n	8009444 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009440:	2303      	movs	r3, #3
 8009442:	e01c      	b.n	800947e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800944a:	b2db      	uxtb	r3, r3
 800944c:	2b03      	cmp	r3, #3
 800944e:	d115      	bne.n	800947c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	32ae      	adds	r2, #174	; 0xae
 800945a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800945e:	6a1b      	ldr	r3, [r3, #32]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d00b      	beq.n	800947c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	32ae      	adds	r2, #174	; 0xae
 800946e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009472:	6a1b      	ldr	r3, [r3, #32]
 8009474:	78fa      	ldrb	r2, [r7, #3]
 8009476:	4611      	mov	r1, r2
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800947c:	2300      	movs	r3, #0
}
 800947e:	4618      	mov	r0, r3
 8009480:	3708      	adds	r7, #8
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}

08009486 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009486:	b580      	push	{r7, lr}
 8009488:	b082      	sub	sp, #8
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
 800948e:	460b      	mov	r3, r1
 8009490:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	32ae      	adds	r2, #174	; 0xae
 800949c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d101      	bne.n	80094a8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80094a4:	2303      	movs	r3, #3
 80094a6:	e01c      	b.n	80094e2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	2b03      	cmp	r3, #3
 80094b2:	d115      	bne.n	80094e0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	32ae      	adds	r2, #174	; 0xae
 80094be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d00b      	beq.n	80094e0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	32ae      	adds	r2, #174	; 0xae
 80094d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d8:	78fa      	ldrb	r2, [r7, #3]
 80094da:	4611      	mov	r1, r2
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80094e0:	2300      	movs	r3, #0
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3708      	adds	r7, #8
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80094ea:	b480      	push	{r7}
 80094ec:	b083      	sub	sp, #12
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	370c      	adds	r7, #12
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009508:	2300      	movs	r3, #0
 800950a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2201      	movs	r2, #1
 8009510:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800951a:	2b00      	cmp	r3, #0
 800951c:	d00e      	beq.n	800953c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	6852      	ldr	r2, [r2, #4]
 800952a:	b2d2      	uxtb	r2, r2
 800952c:	4611      	mov	r1, r2
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	4798      	blx	r3
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d001      	beq.n	800953c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009538:	2303      	movs	r3, #3
 800953a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800953c:	7bfb      	ldrb	r3, [r7, #15]
}
 800953e:	4618      	mov	r0, r3
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009546:	b480      	push	{r7}
 8009548:	b083      	sub	sp, #12
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	460b      	mov	r3, r1
 8009550:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009552:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009554:	4618      	mov	r0, r3
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	460b      	mov	r3, r1
 800956a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800956c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800956e:	4618      	mov	r0, r3
 8009570:	370c      	adds	r7, #12
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr

0800957a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800957a:	b580      	push	{r7, lr}
 800957c:	b086      	sub	sp, #24
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
 8009582:	460b      	mov	r3, r1
 8009584:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800958e:	2300      	movs	r3, #0
 8009590:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	885b      	ldrh	r3, [r3, #2]
 8009596:	b29a      	uxth	r2, r3
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	b29b      	uxth	r3, r3
 800959e:	429a      	cmp	r2, r3
 80095a0:	d920      	bls.n	80095e4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80095aa:	e013      	b.n	80095d4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80095ac:	f107 030a 	add.w	r3, r7, #10
 80095b0:	4619      	mov	r1, r3
 80095b2:	6978      	ldr	r0, [r7, #20]
 80095b4:	f000 f81b 	bl	80095ee <USBD_GetNextDesc>
 80095b8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	785b      	ldrb	r3, [r3, #1]
 80095be:	2b05      	cmp	r3, #5
 80095c0:	d108      	bne.n	80095d4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	789b      	ldrb	r3, [r3, #2]
 80095ca:	78fa      	ldrb	r2, [r7, #3]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d008      	beq.n	80095e2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80095d0:	2300      	movs	r3, #0
 80095d2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	885b      	ldrh	r3, [r3, #2]
 80095d8:	b29a      	uxth	r2, r3
 80095da:	897b      	ldrh	r3, [r7, #10]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d8e5      	bhi.n	80095ac <USBD_GetEpDesc+0x32>
 80095e0:	e000      	b.n	80095e4 <USBD_GetEpDesc+0x6a>
          break;
 80095e2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80095e4:	693b      	ldr	r3, [r7, #16]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3718      	adds	r7, #24
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80095ee:	b480      	push	{r7}
 80095f0:	b085      	sub	sp, #20
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
 80095f6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	881a      	ldrh	r2, [r3, #0]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	b29b      	uxth	r3, r3
 8009606:	4413      	add	r3, r2
 8009608:	b29a      	uxth	r2, r3
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	461a      	mov	r2, r3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	4413      	add	r3, r2
 8009618:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800961a:	68fb      	ldr	r3, [r7, #12]
}
 800961c:	4618      	mov	r0, r3
 800961e:	3714      	adds	r7, #20
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009628:	b480      	push	{r7}
 800962a:	b087      	sub	sp, #28
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	3301      	adds	r3, #1
 800963e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009646:	8a3b      	ldrh	r3, [r7, #16]
 8009648:	021b      	lsls	r3, r3, #8
 800964a:	b21a      	sxth	r2, r3
 800964c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009650:	4313      	orrs	r3, r2
 8009652:	b21b      	sxth	r3, r3
 8009654:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009656:	89fb      	ldrh	r3, [r7, #14]
}
 8009658:	4618      	mov	r0, r3
 800965a:	371c      	adds	r7, #28
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800966e:	2300      	movs	r3, #0
 8009670:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800967a:	2b40      	cmp	r3, #64	; 0x40
 800967c:	d005      	beq.n	800968a <USBD_StdDevReq+0x26>
 800967e:	2b40      	cmp	r3, #64	; 0x40
 8009680:	d857      	bhi.n	8009732 <USBD_StdDevReq+0xce>
 8009682:	2b00      	cmp	r3, #0
 8009684:	d00f      	beq.n	80096a6 <USBD_StdDevReq+0x42>
 8009686:	2b20      	cmp	r3, #32
 8009688:	d153      	bne.n	8009732 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	32ae      	adds	r2, #174	; 0xae
 8009694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	6839      	ldr	r1, [r7, #0]
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	4798      	blx	r3
 80096a0:	4603      	mov	r3, r0
 80096a2:	73fb      	strb	r3, [r7, #15]
      break;
 80096a4:	e04a      	b.n	800973c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	785b      	ldrb	r3, [r3, #1]
 80096aa:	2b09      	cmp	r3, #9
 80096ac:	d83b      	bhi.n	8009726 <USBD_StdDevReq+0xc2>
 80096ae:	a201      	add	r2, pc, #4	; (adr r2, 80096b4 <USBD_StdDevReq+0x50>)
 80096b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b4:	08009709 	.word	0x08009709
 80096b8:	0800971d 	.word	0x0800971d
 80096bc:	08009727 	.word	0x08009727
 80096c0:	08009713 	.word	0x08009713
 80096c4:	08009727 	.word	0x08009727
 80096c8:	080096e7 	.word	0x080096e7
 80096cc:	080096dd 	.word	0x080096dd
 80096d0:	08009727 	.word	0x08009727
 80096d4:	080096ff 	.word	0x080096ff
 80096d8:	080096f1 	.word	0x080096f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80096dc:	6839      	ldr	r1, [r7, #0]
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 fa3c 	bl	8009b5c <USBD_GetDescriptor>
          break;
 80096e4:	e024      	b.n	8009730 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80096e6:	6839      	ldr	r1, [r7, #0]
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 fba1 	bl	8009e30 <USBD_SetAddress>
          break;
 80096ee:	e01f      	b.n	8009730 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80096f0:	6839      	ldr	r1, [r7, #0]
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 fbe0 	bl	8009eb8 <USBD_SetConfig>
 80096f8:	4603      	mov	r3, r0
 80096fa:	73fb      	strb	r3, [r7, #15]
          break;
 80096fc:	e018      	b.n	8009730 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80096fe:	6839      	ldr	r1, [r7, #0]
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 fc83 	bl	800a00c <USBD_GetConfig>
          break;
 8009706:	e013      	b.n	8009730 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009708:	6839      	ldr	r1, [r7, #0]
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 fcb4 	bl	800a078 <USBD_GetStatus>
          break;
 8009710:	e00e      	b.n	8009730 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009712:	6839      	ldr	r1, [r7, #0]
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 fce3 	bl	800a0e0 <USBD_SetFeature>
          break;
 800971a:	e009      	b.n	8009730 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800971c:	6839      	ldr	r1, [r7, #0]
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 fd07 	bl	800a132 <USBD_ClrFeature>
          break;
 8009724:	e004      	b.n	8009730 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009726:	6839      	ldr	r1, [r7, #0]
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 fd5e 	bl	800a1ea <USBD_CtlError>
          break;
 800972e:	bf00      	nop
      }
      break;
 8009730:	e004      	b.n	800973c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009732:	6839      	ldr	r1, [r7, #0]
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 fd58 	bl	800a1ea <USBD_CtlError>
      break;
 800973a:	bf00      	nop
  }

  return ret;
 800973c:	7bfb      	ldrb	r3, [r7, #15]
}
 800973e:	4618      	mov	r0, r3
 8009740:	3710      	adds	r7, #16
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop

08009748 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009752:	2300      	movs	r3, #0
 8009754:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800975e:	2b40      	cmp	r3, #64	; 0x40
 8009760:	d005      	beq.n	800976e <USBD_StdItfReq+0x26>
 8009762:	2b40      	cmp	r3, #64	; 0x40
 8009764:	d852      	bhi.n	800980c <USBD_StdItfReq+0xc4>
 8009766:	2b00      	cmp	r3, #0
 8009768:	d001      	beq.n	800976e <USBD_StdItfReq+0x26>
 800976a:	2b20      	cmp	r3, #32
 800976c:	d14e      	bne.n	800980c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009774:	b2db      	uxtb	r3, r3
 8009776:	3b01      	subs	r3, #1
 8009778:	2b02      	cmp	r3, #2
 800977a:	d840      	bhi.n	80097fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	889b      	ldrh	r3, [r3, #4]
 8009780:	b2db      	uxtb	r3, r3
 8009782:	2b01      	cmp	r3, #1
 8009784:	d836      	bhi.n	80097f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	889b      	ldrh	r3, [r3, #4]
 800978a:	b2db      	uxtb	r3, r3
 800978c:	4619      	mov	r1, r3
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f7ff fed9 	bl	8009546 <USBD_CoreFindIF>
 8009794:	4603      	mov	r3, r0
 8009796:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009798:	7bbb      	ldrb	r3, [r7, #14]
 800979a:	2bff      	cmp	r3, #255	; 0xff
 800979c:	d01d      	beq.n	80097da <USBD_StdItfReq+0x92>
 800979e:	7bbb      	ldrb	r3, [r7, #14]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d11a      	bne.n	80097da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80097a4:	7bba      	ldrb	r2, [r7, #14]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	32ae      	adds	r2, #174	; 0xae
 80097aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d00f      	beq.n	80097d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80097b4:	7bba      	ldrb	r2, [r7, #14]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80097bc:	7bba      	ldrb	r2, [r7, #14]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	32ae      	adds	r2, #174	; 0xae
 80097c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	6839      	ldr	r1, [r7, #0]
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	4798      	blx	r3
 80097ce:	4603      	mov	r3, r0
 80097d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80097d2:	e004      	b.n	80097de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80097d4:	2303      	movs	r3, #3
 80097d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80097d8:	e001      	b.n	80097de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80097da:	2303      	movs	r3, #3
 80097dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	88db      	ldrh	r3, [r3, #6]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d110      	bne.n	8009808 <USBD_StdItfReq+0xc0>
 80097e6:	7bfb      	ldrb	r3, [r7, #15]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d10d      	bne.n	8009808 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 fdc7 	bl	800a380 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80097f2:	e009      	b.n	8009808 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80097f4:	6839      	ldr	r1, [r7, #0]
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 fcf7 	bl	800a1ea <USBD_CtlError>
          break;
 80097fc:	e004      	b.n	8009808 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80097fe:	6839      	ldr	r1, [r7, #0]
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 fcf2 	bl	800a1ea <USBD_CtlError>
          break;
 8009806:	e000      	b.n	800980a <USBD_StdItfReq+0xc2>
          break;
 8009808:	bf00      	nop
      }
      break;
 800980a:	e004      	b.n	8009816 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800980c:	6839      	ldr	r1, [r7, #0]
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 fceb 	bl	800a1ea <USBD_CtlError>
      break;
 8009814:	bf00      	nop
  }

  return ret;
 8009816:	7bfb      	ldrb	r3, [r7, #15]
}
 8009818:	4618      	mov	r0, r3
 800981a:	3710      	adds	r7, #16
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800982a:	2300      	movs	r3, #0
 800982c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	889b      	ldrh	r3, [r3, #4]
 8009832:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800983c:	2b40      	cmp	r3, #64	; 0x40
 800983e:	d007      	beq.n	8009850 <USBD_StdEPReq+0x30>
 8009840:	2b40      	cmp	r3, #64	; 0x40
 8009842:	f200 817f 	bhi.w	8009b44 <USBD_StdEPReq+0x324>
 8009846:	2b00      	cmp	r3, #0
 8009848:	d02a      	beq.n	80098a0 <USBD_StdEPReq+0x80>
 800984a:	2b20      	cmp	r3, #32
 800984c:	f040 817a 	bne.w	8009b44 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009850:	7bbb      	ldrb	r3, [r7, #14]
 8009852:	4619      	mov	r1, r3
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f7ff fe83 	bl	8009560 <USBD_CoreFindEP>
 800985a:	4603      	mov	r3, r0
 800985c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800985e:	7b7b      	ldrb	r3, [r7, #13]
 8009860:	2bff      	cmp	r3, #255	; 0xff
 8009862:	f000 8174 	beq.w	8009b4e <USBD_StdEPReq+0x32e>
 8009866:	7b7b      	ldrb	r3, [r7, #13]
 8009868:	2b00      	cmp	r3, #0
 800986a:	f040 8170 	bne.w	8009b4e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800986e:	7b7a      	ldrb	r2, [r7, #13]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009876:	7b7a      	ldrb	r2, [r7, #13]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	32ae      	adds	r2, #174	; 0xae
 800987c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009880:	689b      	ldr	r3, [r3, #8]
 8009882:	2b00      	cmp	r3, #0
 8009884:	f000 8163 	beq.w	8009b4e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009888:	7b7a      	ldrb	r2, [r7, #13]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	32ae      	adds	r2, #174	; 0xae
 800988e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	6839      	ldr	r1, [r7, #0]
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	4798      	blx	r3
 800989a:	4603      	mov	r3, r0
 800989c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800989e:	e156      	b.n	8009b4e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	785b      	ldrb	r3, [r3, #1]
 80098a4:	2b03      	cmp	r3, #3
 80098a6:	d008      	beq.n	80098ba <USBD_StdEPReq+0x9a>
 80098a8:	2b03      	cmp	r3, #3
 80098aa:	f300 8145 	bgt.w	8009b38 <USBD_StdEPReq+0x318>
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	f000 809b 	beq.w	80099ea <USBD_StdEPReq+0x1ca>
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d03c      	beq.n	8009932 <USBD_StdEPReq+0x112>
 80098b8:	e13e      	b.n	8009b38 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	2b02      	cmp	r3, #2
 80098c4:	d002      	beq.n	80098cc <USBD_StdEPReq+0xac>
 80098c6:	2b03      	cmp	r3, #3
 80098c8:	d016      	beq.n	80098f8 <USBD_StdEPReq+0xd8>
 80098ca:	e02c      	b.n	8009926 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098cc:	7bbb      	ldrb	r3, [r7, #14]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d00d      	beq.n	80098ee <USBD_StdEPReq+0xce>
 80098d2:	7bbb      	ldrb	r3, [r7, #14]
 80098d4:	2b80      	cmp	r3, #128	; 0x80
 80098d6:	d00a      	beq.n	80098ee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80098d8:	7bbb      	ldrb	r3, [r7, #14]
 80098da:	4619      	mov	r1, r3
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f001 f97b 	bl	800abd8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80098e2:	2180      	movs	r1, #128	; 0x80
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f001 f977 	bl	800abd8 <USBD_LL_StallEP>
 80098ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80098ec:	e020      	b.n	8009930 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80098ee:	6839      	ldr	r1, [r7, #0]
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 fc7a 	bl	800a1ea <USBD_CtlError>
              break;
 80098f6:	e01b      	b.n	8009930 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	885b      	ldrh	r3, [r3, #2]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d10e      	bne.n	800991e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009900:	7bbb      	ldrb	r3, [r7, #14]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d00b      	beq.n	800991e <USBD_StdEPReq+0xfe>
 8009906:	7bbb      	ldrb	r3, [r7, #14]
 8009908:	2b80      	cmp	r3, #128	; 0x80
 800990a:	d008      	beq.n	800991e <USBD_StdEPReq+0xfe>
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	88db      	ldrh	r3, [r3, #6]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d104      	bne.n	800991e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009914:	7bbb      	ldrb	r3, [r7, #14]
 8009916:	4619      	mov	r1, r3
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f001 f95d 	bl	800abd8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 fd2e 	bl	800a380 <USBD_CtlSendStatus>

              break;
 8009924:	e004      	b.n	8009930 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009926:	6839      	ldr	r1, [r7, #0]
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 fc5e 	bl	800a1ea <USBD_CtlError>
              break;
 800992e:	bf00      	nop
          }
          break;
 8009930:	e107      	b.n	8009b42 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009938:	b2db      	uxtb	r3, r3
 800993a:	2b02      	cmp	r3, #2
 800993c:	d002      	beq.n	8009944 <USBD_StdEPReq+0x124>
 800993e:	2b03      	cmp	r3, #3
 8009940:	d016      	beq.n	8009970 <USBD_StdEPReq+0x150>
 8009942:	e04b      	b.n	80099dc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009944:	7bbb      	ldrb	r3, [r7, #14]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d00d      	beq.n	8009966 <USBD_StdEPReq+0x146>
 800994a:	7bbb      	ldrb	r3, [r7, #14]
 800994c:	2b80      	cmp	r3, #128	; 0x80
 800994e:	d00a      	beq.n	8009966 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009950:	7bbb      	ldrb	r3, [r7, #14]
 8009952:	4619      	mov	r1, r3
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f001 f93f 	bl	800abd8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800995a:	2180      	movs	r1, #128	; 0x80
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f001 f93b 	bl	800abd8 <USBD_LL_StallEP>
 8009962:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009964:	e040      	b.n	80099e8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009966:	6839      	ldr	r1, [r7, #0]
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 fc3e 	bl	800a1ea <USBD_CtlError>
              break;
 800996e:	e03b      	b.n	80099e8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	885b      	ldrh	r3, [r3, #2]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d136      	bne.n	80099e6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009978:	7bbb      	ldrb	r3, [r7, #14]
 800997a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800997e:	2b00      	cmp	r3, #0
 8009980:	d004      	beq.n	800998c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009982:	7bbb      	ldrb	r3, [r7, #14]
 8009984:	4619      	mov	r1, r3
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f001 f945 	bl	800ac16 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 fcf7 	bl	800a380 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009992:	7bbb      	ldrb	r3, [r7, #14]
 8009994:	4619      	mov	r1, r3
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f7ff fde2 	bl	8009560 <USBD_CoreFindEP>
 800999c:	4603      	mov	r3, r0
 800999e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80099a0:	7b7b      	ldrb	r3, [r7, #13]
 80099a2:	2bff      	cmp	r3, #255	; 0xff
 80099a4:	d01f      	beq.n	80099e6 <USBD_StdEPReq+0x1c6>
 80099a6:	7b7b      	ldrb	r3, [r7, #13]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d11c      	bne.n	80099e6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80099ac:	7b7a      	ldrb	r2, [r7, #13]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80099b4:	7b7a      	ldrb	r2, [r7, #13]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	32ae      	adds	r2, #174	; 0xae
 80099ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d010      	beq.n	80099e6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80099c4:	7b7a      	ldrb	r2, [r7, #13]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	32ae      	adds	r2, #174	; 0xae
 80099ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	6839      	ldr	r1, [r7, #0]
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	4798      	blx	r3
 80099d6:	4603      	mov	r3, r0
 80099d8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80099da:	e004      	b.n	80099e6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80099dc:	6839      	ldr	r1, [r7, #0]
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 fc03 	bl	800a1ea <USBD_CtlError>
              break;
 80099e4:	e000      	b.n	80099e8 <USBD_StdEPReq+0x1c8>
              break;
 80099e6:	bf00      	nop
          }
          break;
 80099e8:	e0ab      	b.n	8009b42 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	2b02      	cmp	r3, #2
 80099f4:	d002      	beq.n	80099fc <USBD_StdEPReq+0x1dc>
 80099f6:	2b03      	cmp	r3, #3
 80099f8:	d032      	beq.n	8009a60 <USBD_StdEPReq+0x240>
 80099fa:	e097      	b.n	8009b2c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099fc:	7bbb      	ldrb	r3, [r7, #14]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d007      	beq.n	8009a12 <USBD_StdEPReq+0x1f2>
 8009a02:	7bbb      	ldrb	r3, [r7, #14]
 8009a04:	2b80      	cmp	r3, #128	; 0x80
 8009a06:	d004      	beq.n	8009a12 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009a08:	6839      	ldr	r1, [r7, #0]
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 fbed 	bl	800a1ea <USBD_CtlError>
                break;
 8009a10:	e091      	b.n	8009b36 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	da0b      	bge.n	8009a32 <USBD_StdEPReq+0x212>
 8009a1a:	7bbb      	ldrb	r3, [r7, #14]
 8009a1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a20:	4613      	mov	r3, r2
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	4413      	add	r3, r2
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	3310      	adds	r3, #16
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	3304      	adds	r3, #4
 8009a30:	e00b      	b.n	8009a4a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a32:	7bbb      	ldrb	r3, [r7, #14]
 8009a34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a38:	4613      	mov	r3, r2
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	4413      	add	r3, r2
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	4413      	add	r3, r2
 8009a48:	3304      	adds	r3, #4
 8009a4a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	2202      	movs	r2, #2
 8009a56:	4619      	mov	r1, r3
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 fc37 	bl	800a2cc <USBD_CtlSendData>
              break;
 8009a5e:	e06a      	b.n	8009b36 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009a60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	da11      	bge.n	8009a8c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009a68:	7bbb      	ldrb	r3, [r7, #14]
 8009a6a:	f003 020f 	and.w	r2, r3, #15
 8009a6e:	6879      	ldr	r1, [r7, #4]
 8009a70:	4613      	mov	r3, r2
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	4413      	add	r3, r2
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	440b      	add	r3, r1
 8009a7a:	3324      	adds	r3, #36	; 0x24
 8009a7c:	881b      	ldrh	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d117      	bne.n	8009ab2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009a82:	6839      	ldr	r1, [r7, #0]
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 fbb0 	bl	800a1ea <USBD_CtlError>
                  break;
 8009a8a:	e054      	b.n	8009b36 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009a8c:	7bbb      	ldrb	r3, [r7, #14]
 8009a8e:	f003 020f 	and.w	r2, r3, #15
 8009a92:	6879      	ldr	r1, [r7, #4]
 8009a94:	4613      	mov	r3, r2
 8009a96:	009b      	lsls	r3, r3, #2
 8009a98:	4413      	add	r3, r2
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	440b      	add	r3, r1
 8009a9e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009aa2:	881b      	ldrh	r3, [r3, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d104      	bne.n	8009ab2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009aa8:	6839      	ldr	r1, [r7, #0]
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 fb9d 	bl	800a1ea <USBD_CtlError>
                  break;
 8009ab0:	e041      	b.n	8009b36 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ab2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	da0b      	bge.n	8009ad2 <USBD_StdEPReq+0x2b2>
 8009aba:	7bbb      	ldrb	r3, [r7, #14]
 8009abc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	4413      	add	r3, r2
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	3310      	adds	r3, #16
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	4413      	add	r3, r2
 8009ace:	3304      	adds	r3, #4
 8009ad0:	e00b      	b.n	8009aea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ad2:	7bbb      	ldrb	r3, [r7, #14]
 8009ad4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ad8:	4613      	mov	r3, r2
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	4413      	add	r3, r2
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	4413      	add	r3, r2
 8009ae8:	3304      	adds	r3, #4
 8009aea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009aec:	7bbb      	ldrb	r3, [r7, #14]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d002      	beq.n	8009af8 <USBD_StdEPReq+0x2d8>
 8009af2:	7bbb      	ldrb	r3, [r7, #14]
 8009af4:	2b80      	cmp	r3, #128	; 0x80
 8009af6:	d103      	bne.n	8009b00 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	2200      	movs	r2, #0
 8009afc:	601a      	str	r2, [r3, #0]
 8009afe:	e00e      	b.n	8009b1e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009b00:	7bbb      	ldrb	r3, [r7, #14]
 8009b02:	4619      	mov	r1, r3
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f001 f8a5 	bl	800ac54 <USBD_LL_IsStallEP>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d003      	beq.n	8009b18 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	2201      	movs	r2, #1
 8009b14:	601a      	str	r2, [r3, #0]
 8009b16:	e002      	b.n	8009b1e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	2202      	movs	r2, #2
 8009b22:	4619      	mov	r1, r3
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 fbd1 	bl	800a2cc <USBD_CtlSendData>
              break;
 8009b2a:	e004      	b.n	8009b36 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009b2c:	6839      	ldr	r1, [r7, #0]
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 fb5b 	bl	800a1ea <USBD_CtlError>
              break;
 8009b34:	bf00      	nop
          }
          break;
 8009b36:	e004      	b.n	8009b42 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009b38:	6839      	ldr	r1, [r7, #0]
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 fb55 	bl	800a1ea <USBD_CtlError>
          break;
 8009b40:	bf00      	nop
      }
      break;
 8009b42:	e005      	b.n	8009b50 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009b44:	6839      	ldr	r1, [r7, #0]
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 fb4f 	bl	800a1ea <USBD_CtlError>
      break;
 8009b4c:	e000      	b.n	8009b50 <USBD_StdEPReq+0x330>
      break;
 8009b4e:	bf00      	nop
  }

  return ret;
 8009b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3710      	adds	r7, #16
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
	...

08009b5c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b084      	sub	sp, #16
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009b66:	2300      	movs	r3, #0
 8009b68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	885b      	ldrh	r3, [r3, #2]
 8009b76:	0a1b      	lsrs	r3, r3, #8
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	2b06      	cmp	r3, #6
 8009b7e:	f200 8128 	bhi.w	8009dd2 <USBD_GetDescriptor+0x276>
 8009b82:	a201      	add	r2, pc, #4	; (adr r2, 8009b88 <USBD_GetDescriptor+0x2c>)
 8009b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b88:	08009ba5 	.word	0x08009ba5
 8009b8c:	08009bbd 	.word	0x08009bbd
 8009b90:	08009bfd 	.word	0x08009bfd
 8009b94:	08009dd3 	.word	0x08009dd3
 8009b98:	08009dd3 	.word	0x08009dd3
 8009b9c:	08009d73 	.word	0x08009d73
 8009ba0:	08009d9f 	.word	0x08009d9f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	7c12      	ldrb	r2, [r2, #16]
 8009bb0:	f107 0108 	add.w	r1, r7, #8
 8009bb4:	4610      	mov	r0, r2
 8009bb6:	4798      	blx	r3
 8009bb8:	60f8      	str	r0, [r7, #12]
      break;
 8009bba:	e112      	b.n	8009de2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	7c1b      	ldrb	r3, [r3, #16]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d10d      	bne.n	8009be0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bcc:	f107 0208 	add.w	r2, r7, #8
 8009bd0:	4610      	mov	r0, r2
 8009bd2:	4798      	blx	r3
 8009bd4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	3301      	adds	r3, #1
 8009bda:	2202      	movs	r2, #2
 8009bdc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009bde:	e100      	b.n	8009de2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be8:	f107 0208 	add.w	r2, r7, #8
 8009bec:	4610      	mov	r0, r2
 8009bee:	4798      	blx	r3
 8009bf0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	2202      	movs	r2, #2
 8009bf8:	701a      	strb	r2, [r3, #0]
      break;
 8009bfa:	e0f2      	b.n	8009de2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	885b      	ldrh	r3, [r3, #2]
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	2b05      	cmp	r3, #5
 8009c04:	f200 80ac 	bhi.w	8009d60 <USBD_GetDescriptor+0x204>
 8009c08:	a201      	add	r2, pc, #4	; (adr r2, 8009c10 <USBD_GetDescriptor+0xb4>)
 8009c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c0e:	bf00      	nop
 8009c10:	08009c29 	.word	0x08009c29
 8009c14:	08009c5d 	.word	0x08009c5d
 8009c18:	08009c91 	.word	0x08009c91
 8009c1c:	08009cc5 	.word	0x08009cc5
 8009c20:	08009cf9 	.word	0x08009cf9
 8009c24:	08009d2d 	.word	0x08009d2d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d00b      	beq.n	8009c4c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	7c12      	ldrb	r2, [r2, #16]
 8009c40:	f107 0108 	add.w	r1, r7, #8
 8009c44:	4610      	mov	r0, r2
 8009c46:	4798      	blx	r3
 8009c48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c4a:	e091      	b.n	8009d70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c4c:	6839      	ldr	r1, [r7, #0]
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 facb 	bl	800a1ea <USBD_CtlError>
            err++;
 8009c54:	7afb      	ldrb	r3, [r7, #11]
 8009c56:	3301      	adds	r3, #1
 8009c58:	72fb      	strb	r3, [r7, #11]
          break;
 8009c5a:	e089      	b.n	8009d70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d00b      	beq.n	8009c80 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c6e:	689b      	ldr	r3, [r3, #8]
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	7c12      	ldrb	r2, [r2, #16]
 8009c74:	f107 0108 	add.w	r1, r7, #8
 8009c78:	4610      	mov	r0, r2
 8009c7a:	4798      	blx	r3
 8009c7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c7e:	e077      	b.n	8009d70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c80:	6839      	ldr	r1, [r7, #0]
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 fab1 	bl	800a1ea <USBD_CtlError>
            err++;
 8009c88:	7afb      	ldrb	r3, [r7, #11]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	72fb      	strb	r3, [r7, #11]
          break;
 8009c8e:	e06f      	b.n	8009d70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d00b      	beq.n	8009cb4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	7c12      	ldrb	r2, [r2, #16]
 8009ca8:	f107 0108 	add.w	r1, r7, #8
 8009cac:	4610      	mov	r0, r2
 8009cae:	4798      	blx	r3
 8009cb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cb2:	e05d      	b.n	8009d70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cb4:	6839      	ldr	r1, [r7, #0]
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 fa97 	bl	800a1ea <USBD_CtlError>
            err++;
 8009cbc:	7afb      	ldrb	r3, [r7, #11]
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	72fb      	strb	r3, [r7, #11]
          break;
 8009cc2:	e055      	b.n	8009d70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cca:	691b      	ldr	r3, [r3, #16]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d00b      	beq.n	8009ce8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cd6:	691b      	ldr	r3, [r3, #16]
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	7c12      	ldrb	r2, [r2, #16]
 8009cdc:	f107 0108 	add.w	r1, r7, #8
 8009ce0:	4610      	mov	r0, r2
 8009ce2:	4798      	blx	r3
 8009ce4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ce6:	e043      	b.n	8009d70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ce8:	6839      	ldr	r1, [r7, #0]
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 fa7d 	bl	800a1ea <USBD_CtlError>
            err++;
 8009cf0:	7afb      	ldrb	r3, [r7, #11]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	72fb      	strb	r3, [r7, #11]
          break;
 8009cf6:	e03b      	b.n	8009d70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cfe:	695b      	ldr	r3, [r3, #20]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d00b      	beq.n	8009d1c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d0a:	695b      	ldr	r3, [r3, #20]
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	7c12      	ldrb	r2, [r2, #16]
 8009d10:	f107 0108 	add.w	r1, r7, #8
 8009d14:	4610      	mov	r0, r2
 8009d16:	4798      	blx	r3
 8009d18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d1a:	e029      	b.n	8009d70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d1c:	6839      	ldr	r1, [r7, #0]
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 fa63 	bl	800a1ea <USBD_CtlError>
            err++;
 8009d24:	7afb      	ldrb	r3, [r7, #11]
 8009d26:	3301      	adds	r3, #1
 8009d28:	72fb      	strb	r3, [r7, #11]
          break;
 8009d2a:	e021      	b.n	8009d70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d32:	699b      	ldr	r3, [r3, #24]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d00b      	beq.n	8009d50 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d3e:	699b      	ldr	r3, [r3, #24]
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	7c12      	ldrb	r2, [r2, #16]
 8009d44:	f107 0108 	add.w	r1, r7, #8
 8009d48:	4610      	mov	r0, r2
 8009d4a:	4798      	blx	r3
 8009d4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d4e:	e00f      	b.n	8009d70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d50:	6839      	ldr	r1, [r7, #0]
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 fa49 	bl	800a1ea <USBD_CtlError>
            err++;
 8009d58:	7afb      	ldrb	r3, [r7, #11]
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	72fb      	strb	r3, [r7, #11]
          break;
 8009d5e:	e007      	b.n	8009d70 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009d60:	6839      	ldr	r1, [r7, #0]
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 fa41 	bl	800a1ea <USBD_CtlError>
          err++;
 8009d68:	7afb      	ldrb	r3, [r7, #11]
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009d6e:	bf00      	nop
      }
      break;
 8009d70:	e037      	b.n	8009de2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	7c1b      	ldrb	r3, [r3, #16]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d109      	bne.n	8009d8e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d82:	f107 0208 	add.w	r2, r7, #8
 8009d86:	4610      	mov	r0, r2
 8009d88:	4798      	blx	r3
 8009d8a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d8c:	e029      	b.n	8009de2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009d8e:	6839      	ldr	r1, [r7, #0]
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 fa2a 	bl	800a1ea <USBD_CtlError>
        err++;
 8009d96:	7afb      	ldrb	r3, [r7, #11]
 8009d98:	3301      	adds	r3, #1
 8009d9a:	72fb      	strb	r3, [r7, #11]
      break;
 8009d9c:	e021      	b.n	8009de2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	7c1b      	ldrb	r3, [r3, #16]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d10d      	bne.n	8009dc2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dae:	f107 0208 	add.w	r2, r7, #8
 8009db2:	4610      	mov	r0, r2
 8009db4:	4798      	blx	r3
 8009db6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	3301      	adds	r3, #1
 8009dbc:	2207      	movs	r2, #7
 8009dbe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009dc0:	e00f      	b.n	8009de2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009dc2:	6839      	ldr	r1, [r7, #0]
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 fa10 	bl	800a1ea <USBD_CtlError>
        err++;
 8009dca:	7afb      	ldrb	r3, [r7, #11]
 8009dcc:	3301      	adds	r3, #1
 8009dce:	72fb      	strb	r3, [r7, #11]
      break;
 8009dd0:	e007      	b.n	8009de2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009dd2:	6839      	ldr	r1, [r7, #0]
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 fa08 	bl	800a1ea <USBD_CtlError>
      err++;
 8009dda:	7afb      	ldrb	r3, [r7, #11]
 8009ddc:	3301      	adds	r3, #1
 8009dde:	72fb      	strb	r3, [r7, #11]
      break;
 8009de0:	bf00      	nop
  }

  if (err != 0U)
 8009de2:	7afb      	ldrb	r3, [r7, #11]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d11e      	bne.n	8009e26 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	88db      	ldrh	r3, [r3, #6]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d016      	beq.n	8009e1e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009df0:	893b      	ldrh	r3, [r7, #8]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d00e      	beq.n	8009e14 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	88da      	ldrh	r2, [r3, #6]
 8009dfa:	893b      	ldrh	r3, [r7, #8]
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	bf28      	it	cs
 8009e00:	4613      	movcs	r3, r2
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009e06:	893b      	ldrh	r3, [r7, #8]
 8009e08:	461a      	mov	r2, r3
 8009e0a:	68f9      	ldr	r1, [r7, #12]
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 fa5d 	bl	800a2cc <USBD_CtlSendData>
 8009e12:	e009      	b.n	8009e28 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009e14:	6839      	ldr	r1, [r7, #0]
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 f9e7 	bl	800a1ea <USBD_CtlError>
 8009e1c:	e004      	b.n	8009e28 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 faae 	bl	800a380 <USBD_CtlSendStatus>
 8009e24:	e000      	b.n	8009e28 <USBD_GetDescriptor+0x2cc>
    return;
 8009e26:	bf00      	nop
  }
}
 8009e28:	3710      	adds	r7, #16
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	bf00      	nop

08009e30 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	889b      	ldrh	r3, [r3, #4]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d131      	bne.n	8009ea6 <USBD_SetAddress+0x76>
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	88db      	ldrh	r3, [r3, #6]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d12d      	bne.n	8009ea6 <USBD_SetAddress+0x76>
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	885b      	ldrh	r3, [r3, #2]
 8009e4e:	2b7f      	cmp	r3, #127	; 0x7f
 8009e50:	d829      	bhi.n	8009ea6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	885b      	ldrh	r3, [r3, #2]
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e5c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e64:	b2db      	uxtb	r3, r3
 8009e66:	2b03      	cmp	r3, #3
 8009e68:	d104      	bne.n	8009e74 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009e6a:	6839      	ldr	r1, [r7, #0]
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 f9bc 	bl	800a1ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e72:	e01d      	b.n	8009eb0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	7bfa      	ldrb	r2, [r7, #15]
 8009e78:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009e7c:	7bfb      	ldrb	r3, [r7, #15]
 8009e7e:	4619      	mov	r1, r3
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 ff13 	bl	800acac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 fa7a 	bl	800a380 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009e8c:	7bfb      	ldrb	r3, [r7, #15]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d004      	beq.n	8009e9c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2202      	movs	r2, #2
 8009e96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e9a:	e009      	b.n	8009eb0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ea4:	e004      	b.n	8009eb0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009ea6:	6839      	ldr	r1, [r7, #0]
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 f99e 	bl	800a1ea <USBD_CtlError>
  }
}
 8009eae:	bf00      	nop
 8009eb0:	bf00      	nop
 8009eb2:	3710      	adds	r7, #16
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b084      	sub	sp, #16
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	885b      	ldrh	r3, [r3, #2]
 8009eca:	b2da      	uxtb	r2, r3
 8009ecc:	4b4e      	ldr	r3, [pc, #312]	; (800a008 <USBD_SetConfig+0x150>)
 8009ece:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ed0:	4b4d      	ldr	r3, [pc, #308]	; (800a008 <USBD_SetConfig+0x150>)
 8009ed2:	781b      	ldrb	r3, [r3, #0]
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d905      	bls.n	8009ee4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009ed8:	6839      	ldr	r1, [r7, #0]
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 f985 	bl	800a1ea <USBD_CtlError>
    return USBD_FAIL;
 8009ee0:	2303      	movs	r3, #3
 8009ee2:	e08c      	b.n	8009ffe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	2b02      	cmp	r3, #2
 8009eee:	d002      	beq.n	8009ef6 <USBD_SetConfig+0x3e>
 8009ef0:	2b03      	cmp	r3, #3
 8009ef2:	d029      	beq.n	8009f48 <USBD_SetConfig+0x90>
 8009ef4:	e075      	b.n	8009fe2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009ef6:	4b44      	ldr	r3, [pc, #272]	; (800a008 <USBD_SetConfig+0x150>)
 8009ef8:	781b      	ldrb	r3, [r3, #0]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d020      	beq.n	8009f40 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009efe:	4b42      	ldr	r3, [pc, #264]	; (800a008 <USBD_SetConfig+0x150>)
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	461a      	mov	r2, r3
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009f08:	4b3f      	ldr	r3, [pc, #252]	; (800a008 <USBD_SetConfig+0x150>)
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f7fe ffe7 	bl	8008ee2 <USBD_SetClassConfig>
 8009f14:	4603      	mov	r3, r0
 8009f16:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009f18:	7bfb      	ldrb	r3, [r7, #15]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d008      	beq.n	8009f30 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009f1e:	6839      	ldr	r1, [r7, #0]
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 f962 	bl	800a1ea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2202      	movs	r2, #2
 8009f2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009f2e:	e065      	b.n	8009ffc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 fa25 	bl	800a380 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2203      	movs	r2, #3
 8009f3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009f3e:	e05d      	b.n	8009ffc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f000 fa1d 	bl	800a380 <USBD_CtlSendStatus>
      break;
 8009f46:	e059      	b.n	8009ffc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009f48:	4b2f      	ldr	r3, [pc, #188]	; (800a008 <USBD_SetConfig+0x150>)
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d112      	bne.n	8009f76 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2202      	movs	r2, #2
 8009f54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009f58:	4b2b      	ldr	r3, [pc, #172]	; (800a008 <USBD_SetConfig+0x150>)
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009f62:	4b29      	ldr	r3, [pc, #164]	; (800a008 <USBD_SetConfig+0x150>)
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	4619      	mov	r1, r3
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f7fe ffd6 	bl	8008f1a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 fa06 	bl	800a380 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009f74:	e042      	b.n	8009ffc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009f76:	4b24      	ldr	r3, [pc, #144]	; (800a008 <USBD_SetConfig+0x150>)
 8009f78:	781b      	ldrb	r3, [r3, #0]
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d02a      	beq.n	8009fda <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f7fe ffc4 	bl	8008f1a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009f92:	4b1d      	ldr	r3, [pc, #116]	; (800a008 <USBD_SetConfig+0x150>)
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	461a      	mov	r2, r3
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009f9c:	4b1a      	ldr	r3, [pc, #104]	; (800a008 <USBD_SetConfig+0x150>)
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f7fe ff9d 	bl	8008ee2 <USBD_SetClassConfig>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009fac:	7bfb      	ldrb	r3, [r7, #15]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d00f      	beq.n	8009fd2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009fb2:	6839      	ldr	r1, [r7, #0]
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f000 f918 	bl	800a1ea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	b2db      	uxtb	r3, r3
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f7fe ffa9 	bl	8008f1a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2202      	movs	r2, #2
 8009fcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009fd0:	e014      	b.n	8009ffc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 f9d4 	bl	800a380 <USBD_CtlSendStatus>
      break;
 8009fd8:	e010      	b.n	8009ffc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 f9d0 	bl	800a380 <USBD_CtlSendStatus>
      break;
 8009fe0:	e00c      	b.n	8009ffc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009fe2:	6839      	ldr	r1, [r7, #0]
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 f900 	bl	800a1ea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009fea:	4b07      	ldr	r3, [pc, #28]	; (800a008 <USBD_SetConfig+0x150>)
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	4619      	mov	r1, r3
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f7fe ff92 	bl	8008f1a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009ff6:	2303      	movs	r3, #3
 8009ff8:	73fb      	strb	r3, [r7, #15]
      break;
 8009ffa:	bf00      	nop
  }

  return ret;
 8009ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3710      	adds	r7, #16
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop
 800a008:	20000388 	.word	0x20000388

0800a00c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	88db      	ldrh	r3, [r3, #6]
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d004      	beq.n	800a028 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a01e:	6839      	ldr	r1, [r7, #0]
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 f8e2 	bl	800a1ea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a026:	e023      	b.n	800a070 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a02e:	b2db      	uxtb	r3, r3
 800a030:	2b02      	cmp	r3, #2
 800a032:	dc02      	bgt.n	800a03a <USBD_GetConfig+0x2e>
 800a034:	2b00      	cmp	r3, #0
 800a036:	dc03      	bgt.n	800a040 <USBD_GetConfig+0x34>
 800a038:	e015      	b.n	800a066 <USBD_GetConfig+0x5a>
 800a03a:	2b03      	cmp	r3, #3
 800a03c:	d00b      	beq.n	800a056 <USBD_GetConfig+0x4a>
 800a03e:	e012      	b.n	800a066 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	3308      	adds	r3, #8
 800a04a:	2201      	movs	r2, #1
 800a04c:	4619      	mov	r1, r3
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 f93c 	bl	800a2cc <USBD_CtlSendData>
        break;
 800a054:	e00c      	b.n	800a070 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	3304      	adds	r3, #4
 800a05a:	2201      	movs	r2, #1
 800a05c:	4619      	mov	r1, r3
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f000 f934 	bl	800a2cc <USBD_CtlSendData>
        break;
 800a064:	e004      	b.n	800a070 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a066:	6839      	ldr	r1, [r7, #0]
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 f8be 	bl	800a1ea <USBD_CtlError>
        break;
 800a06e:	bf00      	nop
}
 800a070:	bf00      	nop
 800a072:	3708      	adds	r7, #8
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	3b01      	subs	r3, #1
 800a08c:	2b02      	cmp	r3, #2
 800a08e:	d81e      	bhi.n	800a0ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	88db      	ldrh	r3, [r3, #6]
 800a094:	2b02      	cmp	r3, #2
 800a096:	d004      	beq.n	800a0a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a098:	6839      	ldr	r1, [r7, #0]
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 f8a5 	bl	800a1ea <USBD_CtlError>
        break;
 800a0a0:	e01a      	b.n	800a0d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d005      	beq.n	800a0be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	f043 0202 	orr.w	r2, r3, #2
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	330c      	adds	r3, #12
 800a0c2:	2202      	movs	r2, #2
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f000 f900 	bl	800a2cc <USBD_CtlSendData>
      break;
 800a0cc:	e004      	b.n	800a0d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a0ce:	6839      	ldr	r1, [r7, #0]
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f000 f88a 	bl	800a1ea <USBD_CtlError>
      break;
 800a0d6:	bf00      	nop
  }
}
 800a0d8:	bf00      	nop
 800a0da:	3708      	adds	r7, #8
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b082      	sub	sp, #8
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	885b      	ldrh	r3, [r3, #2]
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	d107      	bne.n	800a102 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 f940 	bl	800a380 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a100:	e013      	b.n	800a12a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	885b      	ldrh	r3, [r3, #2]
 800a106:	2b02      	cmp	r3, #2
 800a108:	d10b      	bne.n	800a122 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	889b      	ldrh	r3, [r3, #4]
 800a10e:	0a1b      	lsrs	r3, r3, #8
 800a110:	b29b      	uxth	r3, r3
 800a112:	b2da      	uxtb	r2, r3
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 f930 	bl	800a380 <USBD_CtlSendStatus>
}
 800a120:	e003      	b.n	800a12a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a122:	6839      	ldr	r1, [r7, #0]
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 f860 	bl	800a1ea <USBD_CtlError>
}
 800a12a:	bf00      	nop
 800a12c:	3708      	adds	r7, #8
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b082      	sub	sp, #8
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
 800a13a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a142:	b2db      	uxtb	r3, r3
 800a144:	3b01      	subs	r3, #1
 800a146:	2b02      	cmp	r3, #2
 800a148:	d80b      	bhi.n	800a162 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	885b      	ldrh	r3, [r3, #2]
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d10c      	bne.n	800a16c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2200      	movs	r2, #0
 800a156:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 f910 	bl	800a380 <USBD_CtlSendStatus>
      }
      break;
 800a160:	e004      	b.n	800a16c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a162:	6839      	ldr	r1, [r7, #0]
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 f840 	bl	800a1ea <USBD_CtlError>
      break;
 800a16a:	e000      	b.n	800a16e <USBD_ClrFeature+0x3c>
      break;
 800a16c:	bf00      	nop
  }
}
 800a16e:	bf00      	nop
 800a170:	3708      	adds	r7, #8
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}

0800a176 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a176:	b580      	push	{r7, lr}
 800a178:	b084      	sub	sp, #16
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
 800a17e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	781a      	ldrb	r2, [r3, #0]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	3301      	adds	r3, #1
 800a190:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	781a      	ldrb	r2, [r3, #0]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	3301      	adds	r3, #1
 800a19e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f7ff fa41 	bl	8009628 <SWAPBYTE>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	f7ff fa34 	bl	8009628 <SWAPBYTE>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	3301      	adds	r3, #1
 800a1cc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a1d4:	68f8      	ldr	r0, [r7, #12]
 800a1d6:	f7ff fa27 	bl	8009628 <SWAPBYTE>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	461a      	mov	r2, r3
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	80da      	strh	r2, [r3, #6]
}
 800a1e2:	bf00      	nop
 800a1e4:	3710      	adds	r7, #16
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}

0800a1ea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1ea:	b580      	push	{r7, lr}
 800a1ec:	b082      	sub	sp, #8
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
 800a1f2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1f4:	2180      	movs	r1, #128	; 0x80
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 fcee 	bl	800abd8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a1fc:	2100      	movs	r1, #0
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 fcea 	bl	800abd8 <USBD_LL_StallEP>
}
 800a204:	bf00      	nop
 800a206:	3708      	adds	r7, #8
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b086      	sub	sp, #24
 800a210:	af00      	add	r7, sp, #0
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	60b9      	str	r1, [r7, #8]
 800a216:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a218:	2300      	movs	r3, #0
 800a21a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d036      	beq.n	800a290 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a226:	6938      	ldr	r0, [r7, #16]
 800a228:	f000 f836 	bl	800a298 <USBD_GetLen>
 800a22c:	4603      	mov	r3, r0
 800a22e:	3301      	adds	r3, #1
 800a230:	b29b      	uxth	r3, r3
 800a232:	005b      	lsls	r3, r3, #1
 800a234:	b29a      	uxth	r2, r3
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a23a:	7dfb      	ldrb	r3, [r7, #23]
 800a23c:	68ba      	ldr	r2, [r7, #8]
 800a23e:	4413      	add	r3, r2
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	7812      	ldrb	r2, [r2, #0]
 800a244:	701a      	strb	r2, [r3, #0]
  idx++;
 800a246:	7dfb      	ldrb	r3, [r7, #23]
 800a248:	3301      	adds	r3, #1
 800a24a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a24c:	7dfb      	ldrb	r3, [r7, #23]
 800a24e:	68ba      	ldr	r2, [r7, #8]
 800a250:	4413      	add	r3, r2
 800a252:	2203      	movs	r2, #3
 800a254:	701a      	strb	r2, [r3, #0]
  idx++;
 800a256:	7dfb      	ldrb	r3, [r7, #23]
 800a258:	3301      	adds	r3, #1
 800a25a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a25c:	e013      	b.n	800a286 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a25e:	7dfb      	ldrb	r3, [r7, #23]
 800a260:	68ba      	ldr	r2, [r7, #8]
 800a262:	4413      	add	r3, r2
 800a264:	693a      	ldr	r2, [r7, #16]
 800a266:	7812      	ldrb	r2, [r2, #0]
 800a268:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	3301      	adds	r3, #1
 800a26e:	613b      	str	r3, [r7, #16]
    idx++;
 800a270:	7dfb      	ldrb	r3, [r7, #23]
 800a272:	3301      	adds	r3, #1
 800a274:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a276:	7dfb      	ldrb	r3, [r7, #23]
 800a278:	68ba      	ldr	r2, [r7, #8]
 800a27a:	4413      	add	r3, r2
 800a27c:	2200      	movs	r2, #0
 800a27e:	701a      	strb	r2, [r3, #0]
    idx++;
 800a280:	7dfb      	ldrb	r3, [r7, #23]
 800a282:	3301      	adds	r3, #1
 800a284:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d1e7      	bne.n	800a25e <USBD_GetString+0x52>
 800a28e:	e000      	b.n	800a292 <USBD_GetString+0x86>
    return;
 800a290:	bf00      	nop
  }
}
 800a292:	3718      	adds	r7, #24
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a298:	b480      	push	{r7}
 800a29a:	b085      	sub	sp, #20
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a2a8:	e005      	b.n	800a2b6 <USBD_GetLen+0x1e>
  {
    len++;
 800a2aa:	7bfb      	ldrb	r3, [r7, #15]
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d1f5      	bne.n	800a2aa <USBD_GetLen+0x12>
  }

  return len;
 800a2be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3714      	adds	r7, #20
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2202      	movs	r2, #2
 800a2dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	68ba      	ldr	r2, [r7, #8]
 800a2f0:	2100      	movs	r1, #0
 800a2f2:	68f8      	ldr	r0, [r7, #12]
 800a2f4:	f000 fcf9 	bl	800acea <USBD_LL_Transmit>

  return USBD_OK;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3710      	adds	r7, #16
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a302:	b580      	push	{r7, lr}
 800a304:	b084      	sub	sp, #16
 800a306:	af00      	add	r7, sp, #0
 800a308:	60f8      	str	r0, [r7, #12]
 800a30a:	60b9      	str	r1, [r7, #8]
 800a30c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	68ba      	ldr	r2, [r7, #8]
 800a312:	2100      	movs	r1, #0
 800a314:	68f8      	ldr	r0, [r7, #12]
 800a316:	f000 fce8 	bl	800acea <USBD_LL_Transmit>

  return USBD_OK;
 800a31a:	2300      	movs	r3, #0
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3710      	adds	r7, #16
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	60f8      	str	r0, [r7, #12]
 800a32c:	60b9      	str	r1, [r7, #8]
 800a32e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2203      	movs	r2, #3
 800a334:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	68ba      	ldr	r2, [r7, #8]
 800a34c:	2100      	movs	r1, #0
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	f000 fcec 	bl	800ad2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a354:	2300      	movs	r3, #0
}
 800a356:	4618      	mov	r0, r3
 800a358:	3710      	adds	r7, #16
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a35e:	b580      	push	{r7, lr}
 800a360:	b084      	sub	sp, #16
 800a362:	af00      	add	r7, sp, #0
 800a364:	60f8      	str	r0, [r7, #12]
 800a366:	60b9      	str	r1, [r7, #8]
 800a368:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	68ba      	ldr	r2, [r7, #8]
 800a36e:	2100      	movs	r1, #0
 800a370:	68f8      	ldr	r0, [r7, #12]
 800a372:	f000 fcdb 	bl	800ad2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a376:	2300      	movs	r3, #0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3710      	adds	r7, #16
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2204      	movs	r2, #4
 800a38c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a390:	2300      	movs	r3, #0
 800a392:	2200      	movs	r2, #0
 800a394:	2100      	movs	r1, #0
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 fca7 	bl	800acea <USBD_LL_Transmit>

  return USBD_OK;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3708      	adds	r7, #8
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a3a6:	b580      	push	{r7, lr}
 800a3a8:	b082      	sub	sp, #8
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2205      	movs	r2, #5
 800a3b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	2100      	movs	r1, #0
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f000 fcb5 	bl	800ad2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3c2:	2300      	movs	r3, #0
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3708      	adds	r7, #8
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	4912      	ldr	r1, [pc, #72]	; (800a41c <MX_USB_DEVICE_Init+0x50>)
 800a3d4:	4812      	ldr	r0, [pc, #72]	; (800a420 <MX_USB_DEVICE_Init+0x54>)
 800a3d6:	f7fe fd07 	bl	8008de8 <USBD_Init>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d001      	beq.n	800a3e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a3e0:	f7f7 f92a 	bl	8001638 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a3e4:	490f      	ldr	r1, [pc, #60]	; (800a424 <MX_USB_DEVICE_Init+0x58>)
 800a3e6:	480e      	ldr	r0, [pc, #56]	; (800a420 <MX_USB_DEVICE_Init+0x54>)
 800a3e8:	f7fe fd2e 	bl	8008e48 <USBD_RegisterClass>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d001      	beq.n	800a3f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a3f2:	f7f7 f921 	bl	8001638 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a3f6:	490c      	ldr	r1, [pc, #48]	; (800a428 <MX_USB_DEVICE_Init+0x5c>)
 800a3f8:	4809      	ldr	r0, [pc, #36]	; (800a420 <MX_USB_DEVICE_Init+0x54>)
 800a3fa:	f7fe fc1f 	bl	8008c3c <USBD_CDC_RegisterInterface>
 800a3fe:	4603      	mov	r3, r0
 800a400:	2b00      	cmp	r3, #0
 800a402:	d001      	beq.n	800a408 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a404:	f7f7 f918 	bl	8001638 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a408:	4805      	ldr	r0, [pc, #20]	; (800a420 <MX_USB_DEVICE_Init+0x54>)
 800a40a:	f7fe fd53 	bl	8008eb4 <USBD_Start>
 800a40e:	4603      	mov	r3, r0
 800a410:	2b00      	cmp	r3, #0
 800a412:	d001      	beq.n	800a418 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a414:	f7f7 f910 	bl	8001638 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a418:	bf00      	nop
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	200000ac 	.word	0x200000ac
 800a420:	2000038c 	.word	0x2000038c
 800a424:	20000018 	.word	0x20000018
 800a428:	20000098 	.word	0x20000098

0800a42c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a430:	2200      	movs	r2, #0
 800a432:	4905      	ldr	r1, [pc, #20]	; (800a448 <CDC_Init_FS+0x1c>)
 800a434:	4805      	ldr	r0, [pc, #20]	; (800a44c <CDC_Init_FS+0x20>)
 800a436:	f7fe fc1b 	bl	8008c70 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a43a:	4905      	ldr	r1, [pc, #20]	; (800a450 <CDC_Init_FS+0x24>)
 800a43c:	4803      	ldr	r0, [pc, #12]	; (800a44c <CDC_Init_FS+0x20>)
 800a43e:	f7fe fc39 	bl	8008cb4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a442:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a444:	4618      	mov	r0, r3
 800a446:	bd80      	pop	{r7, pc}
 800a448:	20000e68 	.word	0x20000e68
 800a44c:	2000038c 	.word	0x2000038c
 800a450:	20000668 	.word	0x20000668

0800a454 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a454:	b480      	push	{r7}
 800a456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a458:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	4603      	mov	r3, r0
 800a46c:	6039      	str	r1, [r7, #0]
 800a46e:	71fb      	strb	r3, [r7, #7]
 800a470:	4613      	mov	r3, r2
 800a472:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a474:	79fb      	ldrb	r3, [r7, #7]
 800a476:	2b23      	cmp	r3, #35	; 0x23
 800a478:	d84a      	bhi.n	800a510 <CDC_Control_FS+0xac>
 800a47a:	a201      	add	r2, pc, #4	; (adr r2, 800a480 <CDC_Control_FS+0x1c>)
 800a47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a480:	0800a511 	.word	0x0800a511
 800a484:	0800a511 	.word	0x0800a511
 800a488:	0800a511 	.word	0x0800a511
 800a48c:	0800a511 	.word	0x0800a511
 800a490:	0800a511 	.word	0x0800a511
 800a494:	0800a511 	.word	0x0800a511
 800a498:	0800a511 	.word	0x0800a511
 800a49c:	0800a511 	.word	0x0800a511
 800a4a0:	0800a511 	.word	0x0800a511
 800a4a4:	0800a511 	.word	0x0800a511
 800a4a8:	0800a511 	.word	0x0800a511
 800a4ac:	0800a511 	.word	0x0800a511
 800a4b0:	0800a511 	.word	0x0800a511
 800a4b4:	0800a511 	.word	0x0800a511
 800a4b8:	0800a511 	.word	0x0800a511
 800a4bc:	0800a511 	.word	0x0800a511
 800a4c0:	0800a511 	.word	0x0800a511
 800a4c4:	0800a511 	.word	0x0800a511
 800a4c8:	0800a511 	.word	0x0800a511
 800a4cc:	0800a511 	.word	0x0800a511
 800a4d0:	0800a511 	.word	0x0800a511
 800a4d4:	0800a511 	.word	0x0800a511
 800a4d8:	0800a511 	.word	0x0800a511
 800a4dc:	0800a511 	.word	0x0800a511
 800a4e0:	0800a511 	.word	0x0800a511
 800a4e4:	0800a511 	.word	0x0800a511
 800a4e8:	0800a511 	.word	0x0800a511
 800a4ec:	0800a511 	.word	0x0800a511
 800a4f0:	0800a511 	.word	0x0800a511
 800a4f4:	0800a511 	.word	0x0800a511
 800a4f8:	0800a511 	.word	0x0800a511
 800a4fc:	0800a511 	.word	0x0800a511
 800a500:	0800a511 	.word	0x0800a511
 800a504:	0800a511 	.word	0x0800a511
 800a508:	0800a511 	.word	0x0800a511
 800a50c:	0800a511 	.word	0x0800a511
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a510:	bf00      	nop
  }

  return (USBD_OK);
 800a512:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a514:	4618      	mov	r0, r3
 800a516:	370c      	adds	r7, #12
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a52a:	6879      	ldr	r1, [r7, #4]
 800a52c:	4805      	ldr	r0, [pc, #20]	; (800a544 <CDC_Receive_FS+0x24>)
 800a52e:	f7fe fbc1 	bl	8008cb4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a532:	4804      	ldr	r0, [pc, #16]	; (800a544 <CDC_Receive_FS+0x24>)
 800a534:	f7fe fc22 	bl	8008d7c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a538:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3708      	adds	r7, #8
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
 800a542:	bf00      	nop
 800a544:	2000038c 	.word	0x2000038c

0800a548 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b084      	sub	sp, #16
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	460b      	mov	r3, r1
 800a552:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a554:	2300      	movs	r3, #0
 800a556:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a558:	4b0d      	ldr	r3, [pc, #52]	; (800a590 <CDC_Transmit_FS+0x48>)
 800a55a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a55e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a566:	2b00      	cmp	r3, #0
 800a568:	d001      	beq.n	800a56e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a56a:	2301      	movs	r3, #1
 800a56c:	e00b      	b.n	800a586 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a56e:	887b      	ldrh	r3, [r7, #2]
 800a570:	461a      	mov	r2, r3
 800a572:	6879      	ldr	r1, [r7, #4]
 800a574:	4806      	ldr	r0, [pc, #24]	; (800a590 <CDC_Transmit_FS+0x48>)
 800a576:	f7fe fb7b 	bl	8008c70 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a57a:	4805      	ldr	r0, [pc, #20]	; (800a590 <CDC_Transmit_FS+0x48>)
 800a57c:	f7fe fbb8 	bl	8008cf0 <USBD_CDC_TransmitPacket>
 800a580:	4603      	mov	r3, r0
 800a582:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a584:	7bfb      	ldrb	r3, [r7, #15]
}
 800a586:	4618      	mov	r0, r3
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
 800a58e:	bf00      	nop
 800a590:	2000038c 	.word	0x2000038c

0800a594 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a594:	b480      	push	{r7}
 800a596:	b087      	sub	sp, #28
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	4613      	mov	r3, r2
 800a5a0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a5a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	371c      	adds	r7, #28
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr
	...

0800a5b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	4603      	mov	r3, r0
 800a5c0:	6039      	str	r1, [r7, #0]
 800a5c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	2212      	movs	r2, #18
 800a5c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a5ca:	4b03      	ldr	r3, [pc, #12]	; (800a5d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	370c      	adds	r7, #12
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr
 800a5d8:	200000c8 	.word	0x200000c8

0800a5dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	6039      	str	r1, [r7, #0]
 800a5e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	2204      	movs	r2, #4
 800a5ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a5ee:	4b03      	ldr	r3, [pc, #12]	; (800a5fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr
 800a5fc:	200000dc 	.word	0x200000dc

0800a600 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	4603      	mov	r3, r0
 800a608:	6039      	str	r1, [r7, #0]
 800a60a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a60c:	79fb      	ldrb	r3, [r7, #7]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d105      	bne.n	800a61e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a612:	683a      	ldr	r2, [r7, #0]
 800a614:	4907      	ldr	r1, [pc, #28]	; (800a634 <USBD_FS_ProductStrDescriptor+0x34>)
 800a616:	4808      	ldr	r0, [pc, #32]	; (800a638 <USBD_FS_ProductStrDescriptor+0x38>)
 800a618:	f7ff fdf8 	bl	800a20c <USBD_GetString>
 800a61c:	e004      	b.n	800a628 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a61e:	683a      	ldr	r2, [r7, #0]
 800a620:	4904      	ldr	r1, [pc, #16]	; (800a634 <USBD_FS_ProductStrDescriptor+0x34>)
 800a622:	4805      	ldr	r0, [pc, #20]	; (800a638 <USBD_FS_ProductStrDescriptor+0x38>)
 800a624:	f7ff fdf2 	bl	800a20c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a628:	4b02      	ldr	r3, [pc, #8]	; (800a634 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3708      	adds	r7, #8
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop
 800a634:	20001668 	.word	0x20001668
 800a638:	0800dc7c 	.word	0x0800dc7c

0800a63c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	af00      	add	r7, sp, #0
 800a642:	4603      	mov	r3, r0
 800a644:	6039      	str	r1, [r7, #0]
 800a646:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a648:	683a      	ldr	r2, [r7, #0]
 800a64a:	4904      	ldr	r1, [pc, #16]	; (800a65c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a64c:	4804      	ldr	r0, [pc, #16]	; (800a660 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a64e:	f7ff fddd 	bl	800a20c <USBD_GetString>
  return USBD_StrDesc;
 800a652:	4b02      	ldr	r3, [pc, #8]	; (800a65c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a654:	4618      	mov	r0, r3
 800a656:	3708      	adds	r7, #8
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}
 800a65c:	20001668 	.word	0x20001668
 800a660:	0800dc94 	.word	0x0800dc94

0800a664 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b082      	sub	sp, #8
 800a668:	af00      	add	r7, sp, #0
 800a66a:	4603      	mov	r3, r0
 800a66c:	6039      	str	r1, [r7, #0]
 800a66e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	221a      	movs	r2, #26
 800a674:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a676:	f000 f843 	bl	800a700 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a67a:	4b02      	ldr	r3, [pc, #8]	; (800a684 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3708      	adds	r7, #8
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}
 800a684:	200000e0 	.word	0x200000e0

0800a688 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	4603      	mov	r3, r0
 800a690:	6039      	str	r1, [r7, #0]
 800a692:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a694:	79fb      	ldrb	r3, [r7, #7]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d105      	bne.n	800a6a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a69a:	683a      	ldr	r2, [r7, #0]
 800a69c:	4907      	ldr	r1, [pc, #28]	; (800a6bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800a69e:	4808      	ldr	r0, [pc, #32]	; (800a6c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a6a0:	f7ff fdb4 	bl	800a20c <USBD_GetString>
 800a6a4:	e004      	b.n	800a6b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a6a6:	683a      	ldr	r2, [r7, #0]
 800a6a8:	4904      	ldr	r1, [pc, #16]	; (800a6bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800a6aa:	4805      	ldr	r0, [pc, #20]	; (800a6c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a6ac:	f7ff fdae 	bl	800a20c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a6b0:	4b02      	ldr	r3, [pc, #8]	; (800a6bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	20001668 	.word	0x20001668
 800a6c0:	0800dca8 	.word	0x0800dca8

0800a6c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b082      	sub	sp, #8
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	6039      	str	r1, [r7, #0]
 800a6ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a6d0:	79fb      	ldrb	r3, [r7, #7]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d105      	bne.n	800a6e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a6d6:	683a      	ldr	r2, [r7, #0]
 800a6d8:	4907      	ldr	r1, [pc, #28]	; (800a6f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a6da:	4808      	ldr	r0, [pc, #32]	; (800a6fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a6dc:	f7ff fd96 	bl	800a20c <USBD_GetString>
 800a6e0:	e004      	b.n	800a6ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a6e2:	683a      	ldr	r2, [r7, #0]
 800a6e4:	4904      	ldr	r1, [pc, #16]	; (800a6f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a6e6:	4805      	ldr	r0, [pc, #20]	; (800a6fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a6e8:	f7ff fd90 	bl	800a20c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a6ec:	4b02      	ldr	r3, [pc, #8]	; (800a6f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3708      	adds	r7, #8
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
 800a6f6:	bf00      	nop
 800a6f8:	20001668 	.word	0x20001668
 800a6fc:	0800dcb4 	.word	0x0800dcb4

0800a700 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a706:	4b0f      	ldr	r3, [pc, #60]	; (800a744 <Get_SerialNum+0x44>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a70c:	4b0e      	ldr	r3, [pc, #56]	; (800a748 <Get_SerialNum+0x48>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a712:	4b0e      	ldr	r3, [pc, #56]	; (800a74c <Get_SerialNum+0x4c>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	4413      	add	r3, r2
 800a71e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d009      	beq.n	800a73a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a726:	2208      	movs	r2, #8
 800a728:	4909      	ldr	r1, [pc, #36]	; (800a750 <Get_SerialNum+0x50>)
 800a72a:	68f8      	ldr	r0, [r7, #12]
 800a72c:	f000 f814 	bl	800a758 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a730:	2204      	movs	r2, #4
 800a732:	4908      	ldr	r1, [pc, #32]	; (800a754 <Get_SerialNum+0x54>)
 800a734:	68b8      	ldr	r0, [r7, #8]
 800a736:	f000 f80f 	bl	800a758 <IntToUnicode>
  }
}
 800a73a:	bf00      	nop
 800a73c:	3710      	adds	r7, #16
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	1fff7a10 	.word	0x1fff7a10
 800a748:	1fff7a14 	.word	0x1fff7a14
 800a74c:	1fff7a18 	.word	0x1fff7a18
 800a750:	200000e2 	.word	0x200000e2
 800a754:	200000f2 	.word	0x200000f2

0800a758 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a758:	b480      	push	{r7}
 800a75a:	b087      	sub	sp, #28
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	60f8      	str	r0, [r7, #12]
 800a760:	60b9      	str	r1, [r7, #8]
 800a762:	4613      	mov	r3, r2
 800a764:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a766:	2300      	movs	r3, #0
 800a768:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a76a:	2300      	movs	r3, #0
 800a76c:	75fb      	strb	r3, [r7, #23]
 800a76e:	e027      	b.n	800a7c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	0f1b      	lsrs	r3, r3, #28
 800a774:	2b09      	cmp	r3, #9
 800a776:	d80b      	bhi.n	800a790 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	0f1b      	lsrs	r3, r3, #28
 800a77c:	b2da      	uxtb	r2, r3
 800a77e:	7dfb      	ldrb	r3, [r7, #23]
 800a780:	005b      	lsls	r3, r3, #1
 800a782:	4619      	mov	r1, r3
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	440b      	add	r3, r1
 800a788:	3230      	adds	r2, #48	; 0x30
 800a78a:	b2d2      	uxtb	r2, r2
 800a78c:	701a      	strb	r2, [r3, #0]
 800a78e:	e00a      	b.n	800a7a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	0f1b      	lsrs	r3, r3, #28
 800a794:	b2da      	uxtb	r2, r3
 800a796:	7dfb      	ldrb	r3, [r7, #23]
 800a798:	005b      	lsls	r3, r3, #1
 800a79a:	4619      	mov	r1, r3
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	440b      	add	r3, r1
 800a7a0:	3237      	adds	r2, #55	; 0x37
 800a7a2:	b2d2      	uxtb	r2, r2
 800a7a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	011b      	lsls	r3, r3, #4
 800a7aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a7ac:	7dfb      	ldrb	r3, [r7, #23]
 800a7ae:	005b      	lsls	r3, r3, #1
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	68ba      	ldr	r2, [r7, #8]
 800a7b4:	4413      	add	r3, r2
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a7ba:	7dfb      	ldrb	r3, [r7, #23]
 800a7bc:	3301      	adds	r3, #1
 800a7be:	75fb      	strb	r3, [r7, #23]
 800a7c0:	7dfa      	ldrb	r2, [r7, #23]
 800a7c2:	79fb      	ldrb	r3, [r7, #7]
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d3d3      	bcc.n	800a770 <IntToUnicode+0x18>
  }
}
 800a7c8:	bf00      	nop
 800a7ca:	bf00      	nop
 800a7cc:	371c      	adds	r7, #28
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d4:	4770      	bx	lr
	...

0800a7d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b08a      	sub	sp, #40	; 0x28
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7e0:	f107 0314 	add.w	r3, r7, #20
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	601a      	str	r2, [r3, #0]
 800a7e8:	605a      	str	r2, [r3, #4]
 800a7ea:	609a      	str	r2, [r3, #8]
 800a7ec:	60da      	str	r2, [r3, #12]
 800a7ee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a7f8:	d147      	bne.n	800a88a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	613b      	str	r3, [r7, #16]
 800a7fe:	4b25      	ldr	r3, [pc, #148]	; (800a894 <HAL_PCD_MspInit+0xbc>)
 800a800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a802:	4a24      	ldr	r2, [pc, #144]	; (800a894 <HAL_PCD_MspInit+0xbc>)
 800a804:	f043 0301 	orr.w	r3, r3, #1
 800a808:	6313      	str	r3, [r2, #48]	; 0x30
 800a80a:	4b22      	ldr	r3, [pc, #136]	; (800a894 <HAL_PCD_MspInit+0xbc>)
 800a80c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a80e:	f003 0301 	and.w	r3, r3, #1
 800a812:	613b      	str	r3, [r7, #16]
 800a814:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a816:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a81a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a81c:	2300      	movs	r3, #0
 800a81e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a820:	2300      	movs	r3, #0
 800a822:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a824:	f107 0314 	add.w	r3, r7, #20
 800a828:	4619      	mov	r1, r3
 800a82a:	481b      	ldr	r0, [pc, #108]	; (800a898 <HAL_PCD_MspInit+0xc0>)
 800a82c:	f7f7 faea 	bl	8001e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a830:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a836:	2302      	movs	r3, #2
 800a838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a83a:	2300      	movs	r3, #0
 800a83c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a83e:	2303      	movs	r3, #3
 800a840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a842:	230a      	movs	r3, #10
 800a844:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a846:	f107 0314 	add.w	r3, r7, #20
 800a84a:	4619      	mov	r1, r3
 800a84c:	4812      	ldr	r0, [pc, #72]	; (800a898 <HAL_PCD_MspInit+0xc0>)
 800a84e:	f7f7 fad9 	bl	8001e04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a852:	4b10      	ldr	r3, [pc, #64]	; (800a894 <HAL_PCD_MspInit+0xbc>)
 800a854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a856:	4a0f      	ldr	r2, [pc, #60]	; (800a894 <HAL_PCD_MspInit+0xbc>)
 800a858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a85c:	6353      	str	r3, [r2, #52]	; 0x34
 800a85e:	2300      	movs	r3, #0
 800a860:	60fb      	str	r3, [r7, #12]
 800a862:	4b0c      	ldr	r3, [pc, #48]	; (800a894 <HAL_PCD_MspInit+0xbc>)
 800a864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a866:	4a0b      	ldr	r2, [pc, #44]	; (800a894 <HAL_PCD_MspInit+0xbc>)
 800a868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a86c:	6453      	str	r3, [r2, #68]	; 0x44
 800a86e:	4b09      	ldr	r3, [pc, #36]	; (800a894 <HAL_PCD_MspInit+0xbc>)
 800a870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a876:	60fb      	str	r3, [r7, #12]
 800a878:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a87a:	2200      	movs	r2, #0
 800a87c:	2100      	movs	r1, #0
 800a87e:	2043      	movs	r0, #67	; 0x43
 800a880:	f7f7 fa59 	bl	8001d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a884:	2043      	movs	r0, #67	; 0x43
 800a886:	f7f7 fa72 	bl	8001d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a88a:	bf00      	nop
 800a88c:	3728      	adds	r7, #40	; 0x28
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
 800a892:	bf00      	nop
 800a894:	40023800 	.word	0x40023800
 800a898:	40020000 	.word	0x40020000

0800a89c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b082      	sub	sp, #8
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	4610      	mov	r0, r2
 800a8b4:	f7fe fb4b 	bl	8008f4e <USBD_LL_SetupStage>
}
 800a8b8:	bf00      	nop
 800a8ba:	3708      	adds	r7, #8
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b082      	sub	sp, #8
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a8d2:	78fa      	ldrb	r2, [r7, #3]
 800a8d4:	6879      	ldr	r1, [r7, #4]
 800a8d6:	4613      	mov	r3, r2
 800a8d8:	00db      	lsls	r3, r3, #3
 800a8da:	4413      	add	r3, r2
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	440b      	add	r3, r1
 800a8e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	78fb      	ldrb	r3, [r7, #3]
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	f7fe fb85 	bl	8008ff8 <USBD_LL_DataOutStage>
}
 800a8ee:	bf00      	nop
 800a8f0:	3708      	adds	r7, #8
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}

0800a8f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8f6:	b580      	push	{r7, lr}
 800a8f8:	b082      	sub	sp, #8
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	6078      	str	r0, [r7, #4]
 800a8fe:	460b      	mov	r3, r1
 800a900:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a908:	78fa      	ldrb	r2, [r7, #3]
 800a90a:	6879      	ldr	r1, [r7, #4]
 800a90c:	4613      	mov	r3, r2
 800a90e:	00db      	lsls	r3, r3, #3
 800a910:	4413      	add	r3, r2
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	440b      	add	r3, r1
 800a916:	334c      	adds	r3, #76	; 0x4c
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	78fb      	ldrb	r3, [r7, #3]
 800a91c:	4619      	mov	r1, r3
 800a91e:	f7fe fc1e 	bl	800915e <USBD_LL_DataInStage>
}
 800a922:	bf00      	nop
 800a924:	3708      	adds	r7, #8
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}

0800a92a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a92a:	b580      	push	{r7, lr}
 800a92c:	b082      	sub	sp, #8
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a938:	4618      	mov	r0, r3
 800a93a:	f7fe fd52 	bl	80093e2 <USBD_LL_SOF>
}
 800a93e:	bf00      	nop
 800a940:	3708      	adds	r7, #8
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}

0800a946 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a946:	b580      	push	{r7, lr}
 800a948:	b084      	sub	sp, #16
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a94e:	2301      	movs	r3, #1
 800a950:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	68db      	ldr	r3, [r3, #12]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d102      	bne.n	800a960 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a95a:	2300      	movs	r3, #0
 800a95c:	73fb      	strb	r3, [r7, #15]
 800a95e:	e008      	b.n	800a972 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	2b02      	cmp	r3, #2
 800a966:	d102      	bne.n	800a96e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a968:	2301      	movs	r3, #1
 800a96a:	73fb      	strb	r3, [r7, #15]
 800a96c:	e001      	b.n	800a972 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a96e:	f7f6 fe63 	bl	8001638 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a978:	7bfa      	ldrb	r2, [r7, #15]
 800a97a:	4611      	mov	r1, r2
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7fe fcf2 	bl	8009366 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a988:	4618      	mov	r0, r3
 800a98a:	f7fe fc9a 	bl	80092c2 <USBD_LL_Reset>
}
 800a98e:	bf00      	nop
 800a990:	3710      	adds	r7, #16
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
	...

0800a998 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b082      	sub	sp, #8
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7fe fced 	bl	8009386 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	687a      	ldr	r2, [r7, #4]
 800a9b8:	6812      	ldr	r2, [r2, #0]
 800a9ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a9be:	f043 0301 	orr.w	r3, r3, #1
 800a9c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6a1b      	ldr	r3, [r3, #32]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d005      	beq.n	800a9d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a9cc:	4b04      	ldr	r3, [pc, #16]	; (800a9e0 <HAL_PCD_SuspendCallback+0x48>)
 800a9ce:	691b      	ldr	r3, [r3, #16]
 800a9d0:	4a03      	ldr	r2, [pc, #12]	; (800a9e0 <HAL_PCD_SuspendCallback+0x48>)
 800a9d2:	f043 0306 	orr.w	r3, r3, #6
 800a9d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a9d8:	bf00      	nop
 800a9da:	3708      	adds	r7, #8
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}
 800a9e0:	e000ed00 	.word	0xe000ed00

0800a9e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b082      	sub	sp, #8
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7fe fcdd 	bl	80093b2 <USBD_LL_Resume>
}
 800a9f8:	bf00      	nop
 800a9fa:	3708      	adds	r7, #8
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b082      	sub	sp, #8
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	460b      	mov	r3, r1
 800aa0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aa12:	78fa      	ldrb	r2, [r7, #3]
 800aa14:	4611      	mov	r1, r2
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7fe fd35 	bl	8009486 <USBD_LL_IsoOUTIncomplete>
}
 800aa1c:	bf00      	nop
 800aa1e:	3708      	adds	r7, #8
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	460b      	mov	r3, r1
 800aa2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aa36:	78fa      	ldrb	r2, [r7, #3]
 800aa38:	4611      	mov	r1, r2
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7fe fcf1 	bl	8009422 <USBD_LL_IsoINIncomplete>
}
 800aa40:	bf00      	nop
 800aa42:	3708      	adds	r7, #8
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7fe fd47 	bl	80094ea <USBD_LL_DevConnected>
}
 800aa5c:	bf00      	nop
 800aa5e:	3708      	adds	r7, #8
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b082      	sub	sp, #8
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7fe fd44 	bl	8009500 <USBD_LL_DevDisconnected>
}
 800aa78:	bf00      	nop
 800aa7a:	3708      	adds	r7, #8
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d13c      	bne.n	800ab0a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800aa90:	4a20      	ldr	r2, [pc, #128]	; (800ab14 <USBD_LL_Init+0x94>)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	4a1e      	ldr	r2, [pc, #120]	; (800ab14 <USBD_LL_Init+0x94>)
 800aa9c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800aaa0:	4b1c      	ldr	r3, [pc, #112]	; (800ab14 <USBD_LL_Init+0x94>)
 800aaa2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800aaa6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800aaa8:	4b1a      	ldr	r3, [pc, #104]	; (800ab14 <USBD_LL_Init+0x94>)
 800aaaa:	2204      	movs	r2, #4
 800aaac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800aaae:	4b19      	ldr	r3, [pc, #100]	; (800ab14 <USBD_LL_Init+0x94>)
 800aab0:	2202      	movs	r2, #2
 800aab2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800aab4:	4b17      	ldr	r3, [pc, #92]	; (800ab14 <USBD_LL_Init+0x94>)
 800aab6:	2200      	movs	r2, #0
 800aab8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800aaba:	4b16      	ldr	r3, [pc, #88]	; (800ab14 <USBD_LL_Init+0x94>)
 800aabc:	2202      	movs	r2, #2
 800aabe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800aac0:	4b14      	ldr	r3, [pc, #80]	; (800ab14 <USBD_LL_Init+0x94>)
 800aac2:	2200      	movs	r2, #0
 800aac4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800aac6:	4b13      	ldr	r3, [pc, #76]	; (800ab14 <USBD_LL_Init+0x94>)
 800aac8:	2200      	movs	r2, #0
 800aaca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800aacc:	4b11      	ldr	r3, [pc, #68]	; (800ab14 <USBD_LL_Init+0x94>)
 800aace:	2200      	movs	r2, #0
 800aad0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800aad2:	4b10      	ldr	r3, [pc, #64]	; (800ab14 <USBD_LL_Init+0x94>)
 800aad4:	2201      	movs	r2, #1
 800aad6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800aad8:	4b0e      	ldr	r3, [pc, #56]	; (800ab14 <USBD_LL_Init+0x94>)
 800aada:	2200      	movs	r2, #0
 800aadc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800aade:	480d      	ldr	r0, [pc, #52]	; (800ab14 <USBD_LL_Init+0x94>)
 800aae0:	f7f9 fe86 	bl	80047f0 <HAL_PCD_Init>
 800aae4:	4603      	mov	r3, r0
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d001      	beq.n	800aaee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800aaea:	f7f6 fda5 	bl	8001638 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800aaee:	2180      	movs	r1, #128	; 0x80
 800aaf0:	4808      	ldr	r0, [pc, #32]	; (800ab14 <USBD_LL_Init+0x94>)
 800aaf2:	f7fb f8de 	bl	8005cb2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800aaf6:	2240      	movs	r2, #64	; 0x40
 800aaf8:	2100      	movs	r1, #0
 800aafa:	4806      	ldr	r0, [pc, #24]	; (800ab14 <USBD_LL_Init+0x94>)
 800aafc:	f7fb f892 	bl	8005c24 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ab00:	2280      	movs	r2, #128	; 0x80
 800ab02:	2101      	movs	r1, #1
 800ab04:	4803      	ldr	r0, [pc, #12]	; (800ab14 <USBD_LL_Init+0x94>)
 800ab06:	f7fb f88d 	bl	8005c24 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ab0a:	2300      	movs	r3, #0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3708      	adds	r7, #8
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}
 800ab14:	20001868 	.word	0x20001868

0800ab18 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab20:	2300      	movs	r3, #0
 800ab22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab24:	2300      	movs	r3, #0
 800ab26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f7f9 ff7b 	bl	8004a2a <HAL_PCD_Start>
 800ab34:	4603      	mov	r3, r0
 800ab36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab38:	7bfb      	ldrb	r3, [r7, #15]
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f000 f942 	bl	800adc4 <USBD_Get_USB_Status>
 800ab40:	4603      	mov	r3, r0
 800ab42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab44:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3710      	adds	r7, #16
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}

0800ab4e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ab4e:	b580      	push	{r7, lr}
 800ab50:	b084      	sub	sp, #16
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
 800ab56:	4608      	mov	r0, r1
 800ab58:	4611      	mov	r1, r2
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	70fb      	strb	r3, [r7, #3]
 800ab60:	460b      	mov	r3, r1
 800ab62:	70bb      	strb	r3, [r7, #2]
 800ab64:	4613      	mov	r3, r2
 800ab66:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ab76:	78bb      	ldrb	r3, [r7, #2]
 800ab78:	883a      	ldrh	r2, [r7, #0]
 800ab7a:	78f9      	ldrb	r1, [r7, #3]
 800ab7c:	f7fa fc4c 	bl	8005418 <HAL_PCD_EP_Open>
 800ab80:	4603      	mov	r3, r0
 800ab82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab84:	7bfb      	ldrb	r3, [r7, #15]
 800ab86:	4618      	mov	r0, r3
 800ab88:	f000 f91c 	bl	800adc4 <USBD_Get_USB_Status>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab90:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3710      	adds	r7, #16
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}

0800ab9a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab9a:	b580      	push	{r7, lr}
 800ab9c:	b084      	sub	sp, #16
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
 800aba2:	460b      	mov	r3, r1
 800aba4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aba6:	2300      	movs	r3, #0
 800aba8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abaa:	2300      	movs	r3, #0
 800abac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800abb4:	78fa      	ldrb	r2, [r7, #3]
 800abb6:	4611      	mov	r1, r2
 800abb8:	4618      	mov	r0, r3
 800abba:	f7fa fc95 	bl	80054e8 <HAL_PCD_EP_Close>
 800abbe:	4603      	mov	r3, r0
 800abc0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abc2:	7bfb      	ldrb	r3, [r7, #15]
 800abc4:	4618      	mov	r0, r3
 800abc6:	f000 f8fd 	bl	800adc4 <USBD_Get_USB_Status>
 800abca:	4603      	mov	r3, r0
 800abcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abce:	7bbb      	ldrb	r3, [r7, #14]
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3710      	adds	r7, #16
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	460b      	mov	r3, r1
 800abe2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abe4:	2300      	movs	r3, #0
 800abe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abe8:	2300      	movs	r3, #0
 800abea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800abf2:	78fa      	ldrb	r2, [r7, #3]
 800abf4:	4611      	mov	r1, r2
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7fa fd6d 	bl	80056d6 <HAL_PCD_EP_SetStall>
 800abfc:	4603      	mov	r3, r0
 800abfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac00:	7bfb      	ldrb	r3, [r7, #15]
 800ac02:	4618      	mov	r0, r3
 800ac04:	f000 f8de 	bl	800adc4 <USBD_Get_USB_Status>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3710      	adds	r7, #16
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b084      	sub	sp, #16
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
 800ac1e:	460b      	mov	r3, r1
 800ac20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac22:	2300      	movs	r3, #0
 800ac24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac26:	2300      	movs	r3, #0
 800ac28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac30:	78fa      	ldrb	r2, [r7, #3]
 800ac32:	4611      	mov	r1, r2
 800ac34:	4618      	mov	r0, r3
 800ac36:	f7fa fdb2 	bl	800579e <HAL_PCD_EP_ClrStall>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac3e:	7bfb      	ldrb	r3, [r7, #15]
 800ac40:	4618      	mov	r0, r3
 800ac42:	f000 f8bf 	bl	800adc4 <USBD_Get_USB_Status>
 800ac46:	4603      	mov	r3, r0
 800ac48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3710      	adds	r7, #16
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b085      	sub	sp, #20
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac66:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ac68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	da0b      	bge.n	800ac88 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ac70:	78fb      	ldrb	r3, [r7, #3]
 800ac72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac76:	68f9      	ldr	r1, [r7, #12]
 800ac78:	4613      	mov	r3, r2
 800ac7a:	00db      	lsls	r3, r3, #3
 800ac7c:	4413      	add	r3, r2
 800ac7e:	009b      	lsls	r3, r3, #2
 800ac80:	440b      	add	r3, r1
 800ac82:	333e      	adds	r3, #62	; 0x3e
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	e00b      	b.n	800aca0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ac88:	78fb      	ldrb	r3, [r7, #3]
 800ac8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac8e:	68f9      	ldr	r1, [r7, #12]
 800ac90:	4613      	mov	r3, r2
 800ac92:	00db      	lsls	r3, r3, #3
 800ac94:	4413      	add	r3, r2
 800ac96:	009b      	lsls	r3, r3, #2
 800ac98:	440b      	add	r3, r1
 800ac9a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ac9e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3714      	adds	r7, #20
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr

0800acac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	460b      	mov	r3, r1
 800acb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acb8:	2300      	movs	r3, #0
 800acba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acbc:	2300      	movs	r3, #0
 800acbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800acc6:	78fa      	ldrb	r2, [r7, #3]
 800acc8:	4611      	mov	r1, r2
 800acca:	4618      	mov	r0, r3
 800accc:	f7fa fb7f 	bl	80053ce <HAL_PCD_SetAddress>
 800acd0:	4603      	mov	r3, r0
 800acd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acd4:	7bfb      	ldrb	r3, [r7, #15]
 800acd6:	4618      	mov	r0, r3
 800acd8:	f000 f874 	bl	800adc4 <USBD_Get_USB_Status>
 800acdc:	4603      	mov	r3, r0
 800acde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ace0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}

0800acea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800acea:	b580      	push	{r7, lr}
 800acec:	b086      	sub	sp, #24
 800acee:	af00      	add	r7, sp, #0
 800acf0:	60f8      	str	r0, [r7, #12]
 800acf2:	607a      	str	r2, [r7, #4]
 800acf4:	603b      	str	r3, [r7, #0]
 800acf6:	460b      	mov	r3, r1
 800acf8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acfa:	2300      	movs	r3, #0
 800acfc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acfe:	2300      	movs	r3, #0
 800ad00:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ad08:	7af9      	ldrb	r1, [r7, #11]
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	f7fa fc98 	bl	8005642 <HAL_PCD_EP_Transmit>
 800ad12:	4603      	mov	r3, r0
 800ad14:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad16:	7dfb      	ldrb	r3, [r7, #23]
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f000 f853 	bl	800adc4 <USBD_Get_USB_Status>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ad22:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3718      	adds	r7, #24
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b086      	sub	sp, #24
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	60f8      	str	r0, [r7, #12]
 800ad34:	607a      	str	r2, [r7, #4]
 800ad36:	603b      	str	r3, [r7, #0]
 800ad38:	460b      	mov	r3, r1
 800ad3a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad40:	2300      	movs	r3, #0
 800ad42:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ad4a:	7af9      	ldrb	r1, [r7, #11]
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	f7fa fc14 	bl	800557c <HAL_PCD_EP_Receive>
 800ad54:	4603      	mov	r3, r0
 800ad56:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad58:	7dfb      	ldrb	r3, [r7, #23]
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f000 f832 	bl	800adc4 <USBD_Get_USB_Status>
 800ad60:	4603      	mov	r3, r0
 800ad62:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ad64:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3718      	adds	r7, #24
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}

0800ad6e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad6e:	b580      	push	{r7, lr}
 800ad70:	b082      	sub	sp, #8
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	6078      	str	r0, [r7, #4]
 800ad76:	460b      	mov	r3, r1
 800ad78:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad80:	78fa      	ldrb	r2, [r7, #3]
 800ad82:	4611      	mov	r1, r2
 800ad84:	4618      	mov	r0, r3
 800ad86:	f7fa fc44 	bl	8005612 <HAL_PCD_EP_GetRxCount>
 800ad8a:	4603      	mov	r3, r0
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3708      	adds	r7, #8
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ad9c:	4b03      	ldr	r3, [pc, #12]	; (800adac <USBD_static_malloc+0x18>)
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	370c      	adds	r7, #12
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop
 800adac:	20001d74 	.word	0x20001d74

0800adb0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b083      	sub	sp, #12
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]

}
 800adb8:	bf00      	nop
 800adba:	370c      	adds	r7, #12
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr

0800adc4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b085      	sub	sp, #20
 800adc8:	af00      	add	r7, sp, #0
 800adca:	4603      	mov	r3, r0
 800adcc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adce:	2300      	movs	r3, #0
 800add0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800add2:	79fb      	ldrb	r3, [r7, #7]
 800add4:	2b03      	cmp	r3, #3
 800add6:	d817      	bhi.n	800ae08 <USBD_Get_USB_Status+0x44>
 800add8:	a201      	add	r2, pc, #4	; (adr r2, 800ade0 <USBD_Get_USB_Status+0x1c>)
 800adda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adde:	bf00      	nop
 800ade0:	0800adf1 	.word	0x0800adf1
 800ade4:	0800adf7 	.word	0x0800adf7
 800ade8:	0800adfd 	.word	0x0800adfd
 800adec:	0800ae03 	.word	0x0800ae03
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800adf0:	2300      	movs	r3, #0
 800adf2:	73fb      	strb	r3, [r7, #15]
    break;
 800adf4:	e00b      	b.n	800ae0e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800adf6:	2303      	movs	r3, #3
 800adf8:	73fb      	strb	r3, [r7, #15]
    break;
 800adfa:	e008      	b.n	800ae0e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800adfc:	2301      	movs	r3, #1
 800adfe:	73fb      	strb	r3, [r7, #15]
    break;
 800ae00:	e005      	b.n	800ae0e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ae02:	2303      	movs	r3, #3
 800ae04:	73fb      	strb	r3, [r7, #15]
    break;
 800ae06:	e002      	b.n	800ae0e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ae08:	2303      	movs	r3, #3
 800ae0a:	73fb      	strb	r3, [r7, #15]
    break;
 800ae0c:	bf00      	nop
  }
  return usb_status;
 800ae0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3714      	adds	r7, #20
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr

0800ae1c <__errno>:
 800ae1c:	4b01      	ldr	r3, [pc, #4]	; (800ae24 <__errno+0x8>)
 800ae1e:	6818      	ldr	r0, [r3, #0]
 800ae20:	4770      	bx	lr
 800ae22:	bf00      	nop
 800ae24:	200000fc 	.word	0x200000fc

0800ae28 <__libc_init_array>:
 800ae28:	b570      	push	{r4, r5, r6, lr}
 800ae2a:	4d0d      	ldr	r5, [pc, #52]	; (800ae60 <__libc_init_array+0x38>)
 800ae2c:	4c0d      	ldr	r4, [pc, #52]	; (800ae64 <__libc_init_array+0x3c>)
 800ae2e:	1b64      	subs	r4, r4, r5
 800ae30:	10a4      	asrs	r4, r4, #2
 800ae32:	2600      	movs	r6, #0
 800ae34:	42a6      	cmp	r6, r4
 800ae36:	d109      	bne.n	800ae4c <__libc_init_array+0x24>
 800ae38:	4d0b      	ldr	r5, [pc, #44]	; (800ae68 <__libc_init_array+0x40>)
 800ae3a:	4c0c      	ldr	r4, [pc, #48]	; (800ae6c <__libc_init_array+0x44>)
 800ae3c:	f002 ff0c 	bl	800dc58 <_init>
 800ae40:	1b64      	subs	r4, r4, r5
 800ae42:	10a4      	asrs	r4, r4, #2
 800ae44:	2600      	movs	r6, #0
 800ae46:	42a6      	cmp	r6, r4
 800ae48:	d105      	bne.n	800ae56 <__libc_init_array+0x2e>
 800ae4a:	bd70      	pop	{r4, r5, r6, pc}
 800ae4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae50:	4798      	blx	r3
 800ae52:	3601      	adds	r6, #1
 800ae54:	e7ee      	b.n	800ae34 <__libc_init_array+0xc>
 800ae56:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae5a:	4798      	blx	r3
 800ae5c:	3601      	adds	r6, #1
 800ae5e:	e7f2      	b.n	800ae46 <__libc_init_array+0x1e>
 800ae60:	0800e0bc 	.word	0x0800e0bc
 800ae64:	0800e0bc 	.word	0x0800e0bc
 800ae68:	0800e0bc 	.word	0x0800e0bc
 800ae6c:	0800e0c0 	.word	0x0800e0c0

0800ae70 <malloc>:
 800ae70:	4b02      	ldr	r3, [pc, #8]	; (800ae7c <malloc+0xc>)
 800ae72:	4601      	mov	r1, r0
 800ae74:	6818      	ldr	r0, [r3, #0]
 800ae76:	f000 b877 	b.w	800af68 <_malloc_r>
 800ae7a:	bf00      	nop
 800ae7c:	200000fc 	.word	0x200000fc

0800ae80 <memset>:
 800ae80:	4402      	add	r2, r0
 800ae82:	4603      	mov	r3, r0
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d100      	bne.n	800ae8a <memset+0xa>
 800ae88:	4770      	bx	lr
 800ae8a:	f803 1b01 	strb.w	r1, [r3], #1
 800ae8e:	e7f9      	b.n	800ae84 <memset+0x4>

0800ae90 <_free_r>:
 800ae90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae92:	2900      	cmp	r1, #0
 800ae94:	d044      	beq.n	800af20 <_free_r+0x90>
 800ae96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae9a:	9001      	str	r0, [sp, #4]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	f1a1 0404 	sub.w	r4, r1, #4
 800aea2:	bfb8      	it	lt
 800aea4:	18e4      	addlt	r4, r4, r3
 800aea6:	f001 fc03 	bl	800c6b0 <__malloc_lock>
 800aeaa:	4a1e      	ldr	r2, [pc, #120]	; (800af24 <_free_r+0x94>)
 800aeac:	9801      	ldr	r0, [sp, #4]
 800aeae:	6813      	ldr	r3, [r2, #0]
 800aeb0:	b933      	cbnz	r3, 800aec0 <_free_r+0x30>
 800aeb2:	6063      	str	r3, [r4, #4]
 800aeb4:	6014      	str	r4, [r2, #0]
 800aeb6:	b003      	add	sp, #12
 800aeb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aebc:	f001 bbfe 	b.w	800c6bc <__malloc_unlock>
 800aec0:	42a3      	cmp	r3, r4
 800aec2:	d908      	bls.n	800aed6 <_free_r+0x46>
 800aec4:	6825      	ldr	r5, [r4, #0]
 800aec6:	1961      	adds	r1, r4, r5
 800aec8:	428b      	cmp	r3, r1
 800aeca:	bf01      	itttt	eq
 800aecc:	6819      	ldreq	r1, [r3, #0]
 800aece:	685b      	ldreq	r3, [r3, #4]
 800aed0:	1949      	addeq	r1, r1, r5
 800aed2:	6021      	streq	r1, [r4, #0]
 800aed4:	e7ed      	b.n	800aeb2 <_free_r+0x22>
 800aed6:	461a      	mov	r2, r3
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	b10b      	cbz	r3, 800aee0 <_free_r+0x50>
 800aedc:	42a3      	cmp	r3, r4
 800aede:	d9fa      	bls.n	800aed6 <_free_r+0x46>
 800aee0:	6811      	ldr	r1, [r2, #0]
 800aee2:	1855      	adds	r5, r2, r1
 800aee4:	42a5      	cmp	r5, r4
 800aee6:	d10b      	bne.n	800af00 <_free_r+0x70>
 800aee8:	6824      	ldr	r4, [r4, #0]
 800aeea:	4421      	add	r1, r4
 800aeec:	1854      	adds	r4, r2, r1
 800aeee:	42a3      	cmp	r3, r4
 800aef0:	6011      	str	r1, [r2, #0]
 800aef2:	d1e0      	bne.n	800aeb6 <_free_r+0x26>
 800aef4:	681c      	ldr	r4, [r3, #0]
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	6053      	str	r3, [r2, #4]
 800aefa:	4421      	add	r1, r4
 800aefc:	6011      	str	r1, [r2, #0]
 800aefe:	e7da      	b.n	800aeb6 <_free_r+0x26>
 800af00:	d902      	bls.n	800af08 <_free_r+0x78>
 800af02:	230c      	movs	r3, #12
 800af04:	6003      	str	r3, [r0, #0]
 800af06:	e7d6      	b.n	800aeb6 <_free_r+0x26>
 800af08:	6825      	ldr	r5, [r4, #0]
 800af0a:	1961      	adds	r1, r4, r5
 800af0c:	428b      	cmp	r3, r1
 800af0e:	bf04      	itt	eq
 800af10:	6819      	ldreq	r1, [r3, #0]
 800af12:	685b      	ldreq	r3, [r3, #4]
 800af14:	6063      	str	r3, [r4, #4]
 800af16:	bf04      	itt	eq
 800af18:	1949      	addeq	r1, r1, r5
 800af1a:	6021      	streq	r1, [r4, #0]
 800af1c:	6054      	str	r4, [r2, #4]
 800af1e:	e7ca      	b.n	800aeb6 <_free_r+0x26>
 800af20:	b003      	add	sp, #12
 800af22:	bd30      	pop	{r4, r5, pc}
 800af24:	20001f94 	.word	0x20001f94

0800af28 <sbrk_aligned>:
 800af28:	b570      	push	{r4, r5, r6, lr}
 800af2a:	4e0e      	ldr	r6, [pc, #56]	; (800af64 <sbrk_aligned+0x3c>)
 800af2c:	460c      	mov	r4, r1
 800af2e:	6831      	ldr	r1, [r6, #0]
 800af30:	4605      	mov	r5, r0
 800af32:	b911      	cbnz	r1, 800af3a <sbrk_aligned+0x12>
 800af34:	f000 fcf6 	bl	800b924 <_sbrk_r>
 800af38:	6030      	str	r0, [r6, #0]
 800af3a:	4621      	mov	r1, r4
 800af3c:	4628      	mov	r0, r5
 800af3e:	f000 fcf1 	bl	800b924 <_sbrk_r>
 800af42:	1c43      	adds	r3, r0, #1
 800af44:	d00a      	beq.n	800af5c <sbrk_aligned+0x34>
 800af46:	1cc4      	adds	r4, r0, #3
 800af48:	f024 0403 	bic.w	r4, r4, #3
 800af4c:	42a0      	cmp	r0, r4
 800af4e:	d007      	beq.n	800af60 <sbrk_aligned+0x38>
 800af50:	1a21      	subs	r1, r4, r0
 800af52:	4628      	mov	r0, r5
 800af54:	f000 fce6 	bl	800b924 <_sbrk_r>
 800af58:	3001      	adds	r0, #1
 800af5a:	d101      	bne.n	800af60 <sbrk_aligned+0x38>
 800af5c:	f04f 34ff 	mov.w	r4, #4294967295
 800af60:	4620      	mov	r0, r4
 800af62:	bd70      	pop	{r4, r5, r6, pc}
 800af64:	20001f98 	.word	0x20001f98

0800af68 <_malloc_r>:
 800af68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af6c:	1ccd      	adds	r5, r1, #3
 800af6e:	f025 0503 	bic.w	r5, r5, #3
 800af72:	3508      	adds	r5, #8
 800af74:	2d0c      	cmp	r5, #12
 800af76:	bf38      	it	cc
 800af78:	250c      	movcc	r5, #12
 800af7a:	2d00      	cmp	r5, #0
 800af7c:	4607      	mov	r7, r0
 800af7e:	db01      	blt.n	800af84 <_malloc_r+0x1c>
 800af80:	42a9      	cmp	r1, r5
 800af82:	d905      	bls.n	800af90 <_malloc_r+0x28>
 800af84:	230c      	movs	r3, #12
 800af86:	603b      	str	r3, [r7, #0]
 800af88:	2600      	movs	r6, #0
 800af8a:	4630      	mov	r0, r6
 800af8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af90:	4e2e      	ldr	r6, [pc, #184]	; (800b04c <_malloc_r+0xe4>)
 800af92:	f001 fb8d 	bl	800c6b0 <__malloc_lock>
 800af96:	6833      	ldr	r3, [r6, #0]
 800af98:	461c      	mov	r4, r3
 800af9a:	bb34      	cbnz	r4, 800afea <_malloc_r+0x82>
 800af9c:	4629      	mov	r1, r5
 800af9e:	4638      	mov	r0, r7
 800afa0:	f7ff ffc2 	bl	800af28 <sbrk_aligned>
 800afa4:	1c43      	adds	r3, r0, #1
 800afa6:	4604      	mov	r4, r0
 800afa8:	d14d      	bne.n	800b046 <_malloc_r+0xde>
 800afaa:	6834      	ldr	r4, [r6, #0]
 800afac:	4626      	mov	r6, r4
 800afae:	2e00      	cmp	r6, #0
 800afb0:	d140      	bne.n	800b034 <_malloc_r+0xcc>
 800afb2:	6823      	ldr	r3, [r4, #0]
 800afb4:	4631      	mov	r1, r6
 800afb6:	4638      	mov	r0, r7
 800afb8:	eb04 0803 	add.w	r8, r4, r3
 800afbc:	f000 fcb2 	bl	800b924 <_sbrk_r>
 800afc0:	4580      	cmp	r8, r0
 800afc2:	d13a      	bne.n	800b03a <_malloc_r+0xd2>
 800afc4:	6821      	ldr	r1, [r4, #0]
 800afc6:	3503      	adds	r5, #3
 800afc8:	1a6d      	subs	r5, r5, r1
 800afca:	f025 0503 	bic.w	r5, r5, #3
 800afce:	3508      	adds	r5, #8
 800afd0:	2d0c      	cmp	r5, #12
 800afd2:	bf38      	it	cc
 800afd4:	250c      	movcc	r5, #12
 800afd6:	4629      	mov	r1, r5
 800afd8:	4638      	mov	r0, r7
 800afda:	f7ff ffa5 	bl	800af28 <sbrk_aligned>
 800afde:	3001      	adds	r0, #1
 800afe0:	d02b      	beq.n	800b03a <_malloc_r+0xd2>
 800afe2:	6823      	ldr	r3, [r4, #0]
 800afe4:	442b      	add	r3, r5
 800afe6:	6023      	str	r3, [r4, #0]
 800afe8:	e00e      	b.n	800b008 <_malloc_r+0xa0>
 800afea:	6822      	ldr	r2, [r4, #0]
 800afec:	1b52      	subs	r2, r2, r5
 800afee:	d41e      	bmi.n	800b02e <_malloc_r+0xc6>
 800aff0:	2a0b      	cmp	r2, #11
 800aff2:	d916      	bls.n	800b022 <_malloc_r+0xba>
 800aff4:	1961      	adds	r1, r4, r5
 800aff6:	42a3      	cmp	r3, r4
 800aff8:	6025      	str	r5, [r4, #0]
 800affa:	bf18      	it	ne
 800affc:	6059      	strne	r1, [r3, #4]
 800affe:	6863      	ldr	r3, [r4, #4]
 800b000:	bf08      	it	eq
 800b002:	6031      	streq	r1, [r6, #0]
 800b004:	5162      	str	r2, [r4, r5]
 800b006:	604b      	str	r3, [r1, #4]
 800b008:	4638      	mov	r0, r7
 800b00a:	f104 060b 	add.w	r6, r4, #11
 800b00e:	f001 fb55 	bl	800c6bc <__malloc_unlock>
 800b012:	f026 0607 	bic.w	r6, r6, #7
 800b016:	1d23      	adds	r3, r4, #4
 800b018:	1af2      	subs	r2, r6, r3
 800b01a:	d0b6      	beq.n	800af8a <_malloc_r+0x22>
 800b01c:	1b9b      	subs	r3, r3, r6
 800b01e:	50a3      	str	r3, [r4, r2]
 800b020:	e7b3      	b.n	800af8a <_malloc_r+0x22>
 800b022:	6862      	ldr	r2, [r4, #4]
 800b024:	42a3      	cmp	r3, r4
 800b026:	bf0c      	ite	eq
 800b028:	6032      	streq	r2, [r6, #0]
 800b02a:	605a      	strne	r2, [r3, #4]
 800b02c:	e7ec      	b.n	800b008 <_malloc_r+0xa0>
 800b02e:	4623      	mov	r3, r4
 800b030:	6864      	ldr	r4, [r4, #4]
 800b032:	e7b2      	b.n	800af9a <_malloc_r+0x32>
 800b034:	4634      	mov	r4, r6
 800b036:	6876      	ldr	r6, [r6, #4]
 800b038:	e7b9      	b.n	800afae <_malloc_r+0x46>
 800b03a:	230c      	movs	r3, #12
 800b03c:	603b      	str	r3, [r7, #0]
 800b03e:	4638      	mov	r0, r7
 800b040:	f001 fb3c 	bl	800c6bc <__malloc_unlock>
 800b044:	e7a1      	b.n	800af8a <_malloc_r+0x22>
 800b046:	6025      	str	r5, [r4, #0]
 800b048:	e7de      	b.n	800b008 <_malloc_r+0xa0>
 800b04a:	bf00      	nop
 800b04c:	20001f94 	.word	0x20001f94

0800b050 <__cvt>:
 800b050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b054:	ec55 4b10 	vmov	r4, r5, d0
 800b058:	2d00      	cmp	r5, #0
 800b05a:	460e      	mov	r6, r1
 800b05c:	4619      	mov	r1, r3
 800b05e:	462b      	mov	r3, r5
 800b060:	bfbb      	ittet	lt
 800b062:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b066:	461d      	movlt	r5, r3
 800b068:	2300      	movge	r3, #0
 800b06a:	232d      	movlt	r3, #45	; 0x2d
 800b06c:	700b      	strb	r3, [r1, #0]
 800b06e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b070:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b074:	4691      	mov	r9, r2
 800b076:	f023 0820 	bic.w	r8, r3, #32
 800b07a:	bfbc      	itt	lt
 800b07c:	4622      	movlt	r2, r4
 800b07e:	4614      	movlt	r4, r2
 800b080:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b084:	d005      	beq.n	800b092 <__cvt+0x42>
 800b086:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b08a:	d100      	bne.n	800b08e <__cvt+0x3e>
 800b08c:	3601      	adds	r6, #1
 800b08e:	2102      	movs	r1, #2
 800b090:	e000      	b.n	800b094 <__cvt+0x44>
 800b092:	2103      	movs	r1, #3
 800b094:	ab03      	add	r3, sp, #12
 800b096:	9301      	str	r3, [sp, #4]
 800b098:	ab02      	add	r3, sp, #8
 800b09a:	9300      	str	r3, [sp, #0]
 800b09c:	ec45 4b10 	vmov	d0, r4, r5
 800b0a0:	4653      	mov	r3, sl
 800b0a2:	4632      	mov	r2, r6
 800b0a4:	f000 fd04 	bl	800bab0 <_dtoa_r>
 800b0a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b0ac:	4607      	mov	r7, r0
 800b0ae:	d102      	bne.n	800b0b6 <__cvt+0x66>
 800b0b0:	f019 0f01 	tst.w	r9, #1
 800b0b4:	d022      	beq.n	800b0fc <__cvt+0xac>
 800b0b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b0ba:	eb07 0906 	add.w	r9, r7, r6
 800b0be:	d110      	bne.n	800b0e2 <__cvt+0x92>
 800b0c0:	783b      	ldrb	r3, [r7, #0]
 800b0c2:	2b30      	cmp	r3, #48	; 0x30
 800b0c4:	d10a      	bne.n	800b0dc <__cvt+0x8c>
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	4629      	mov	r1, r5
 800b0ce:	f7f5 fcfb 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0d2:	b918      	cbnz	r0, 800b0dc <__cvt+0x8c>
 800b0d4:	f1c6 0601 	rsb	r6, r6, #1
 800b0d8:	f8ca 6000 	str.w	r6, [sl]
 800b0dc:	f8da 3000 	ldr.w	r3, [sl]
 800b0e0:	4499      	add	r9, r3
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	4629      	mov	r1, r5
 800b0ea:	f7f5 fced 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0ee:	b108      	cbz	r0, 800b0f4 <__cvt+0xa4>
 800b0f0:	f8cd 900c 	str.w	r9, [sp, #12]
 800b0f4:	2230      	movs	r2, #48	; 0x30
 800b0f6:	9b03      	ldr	r3, [sp, #12]
 800b0f8:	454b      	cmp	r3, r9
 800b0fa:	d307      	bcc.n	800b10c <__cvt+0xbc>
 800b0fc:	9b03      	ldr	r3, [sp, #12]
 800b0fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b100:	1bdb      	subs	r3, r3, r7
 800b102:	4638      	mov	r0, r7
 800b104:	6013      	str	r3, [r2, #0]
 800b106:	b004      	add	sp, #16
 800b108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b10c:	1c59      	adds	r1, r3, #1
 800b10e:	9103      	str	r1, [sp, #12]
 800b110:	701a      	strb	r2, [r3, #0]
 800b112:	e7f0      	b.n	800b0f6 <__cvt+0xa6>

0800b114 <__exponent>:
 800b114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b116:	4603      	mov	r3, r0
 800b118:	2900      	cmp	r1, #0
 800b11a:	bfb8      	it	lt
 800b11c:	4249      	neglt	r1, r1
 800b11e:	f803 2b02 	strb.w	r2, [r3], #2
 800b122:	bfb4      	ite	lt
 800b124:	222d      	movlt	r2, #45	; 0x2d
 800b126:	222b      	movge	r2, #43	; 0x2b
 800b128:	2909      	cmp	r1, #9
 800b12a:	7042      	strb	r2, [r0, #1]
 800b12c:	dd2a      	ble.n	800b184 <__exponent+0x70>
 800b12e:	f10d 0407 	add.w	r4, sp, #7
 800b132:	46a4      	mov	ip, r4
 800b134:	270a      	movs	r7, #10
 800b136:	46a6      	mov	lr, r4
 800b138:	460a      	mov	r2, r1
 800b13a:	fb91 f6f7 	sdiv	r6, r1, r7
 800b13e:	fb07 1516 	mls	r5, r7, r6, r1
 800b142:	3530      	adds	r5, #48	; 0x30
 800b144:	2a63      	cmp	r2, #99	; 0x63
 800b146:	f104 34ff 	add.w	r4, r4, #4294967295
 800b14a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b14e:	4631      	mov	r1, r6
 800b150:	dcf1      	bgt.n	800b136 <__exponent+0x22>
 800b152:	3130      	adds	r1, #48	; 0x30
 800b154:	f1ae 0502 	sub.w	r5, lr, #2
 800b158:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b15c:	1c44      	adds	r4, r0, #1
 800b15e:	4629      	mov	r1, r5
 800b160:	4561      	cmp	r1, ip
 800b162:	d30a      	bcc.n	800b17a <__exponent+0x66>
 800b164:	f10d 0209 	add.w	r2, sp, #9
 800b168:	eba2 020e 	sub.w	r2, r2, lr
 800b16c:	4565      	cmp	r5, ip
 800b16e:	bf88      	it	hi
 800b170:	2200      	movhi	r2, #0
 800b172:	4413      	add	r3, r2
 800b174:	1a18      	subs	r0, r3, r0
 800b176:	b003      	add	sp, #12
 800b178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b17a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b17e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b182:	e7ed      	b.n	800b160 <__exponent+0x4c>
 800b184:	2330      	movs	r3, #48	; 0x30
 800b186:	3130      	adds	r1, #48	; 0x30
 800b188:	7083      	strb	r3, [r0, #2]
 800b18a:	70c1      	strb	r1, [r0, #3]
 800b18c:	1d03      	adds	r3, r0, #4
 800b18e:	e7f1      	b.n	800b174 <__exponent+0x60>

0800b190 <_printf_float>:
 800b190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b194:	ed2d 8b02 	vpush	{d8}
 800b198:	b08d      	sub	sp, #52	; 0x34
 800b19a:	460c      	mov	r4, r1
 800b19c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b1a0:	4616      	mov	r6, r2
 800b1a2:	461f      	mov	r7, r3
 800b1a4:	4605      	mov	r5, r0
 800b1a6:	f001 fa71 	bl	800c68c <_localeconv_r>
 800b1aa:	f8d0 a000 	ldr.w	sl, [r0]
 800b1ae:	4650      	mov	r0, sl
 800b1b0:	f7f5 f80e 	bl	80001d0 <strlen>
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	930a      	str	r3, [sp, #40]	; 0x28
 800b1b8:	6823      	ldr	r3, [r4, #0]
 800b1ba:	9305      	str	r3, [sp, #20]
 800b1bc:	f8d8 3000 	ldr.w	r3, [r8]
 800b1c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b1c4:	3307      	adds	r3, #7
 800b1c6:	f023 0307 	bic.w	r3, r3, #7
 800b1ca:	f103 0208 	add.w	r2, r3, #8
 800b1ce:	f8c8 2000 	str.w	r2, [r8]
 800b1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b1da:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b1de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b1e2:	9307      	str	r3, [sp, #28]
 800b1e4:	f8cd 8018 	str.w	r8, [sp, #24]
 800b1e8:	ee08 0a10 	vmov	s16, r0
 800b1ec:	4b9f      	ldr	r3, [pc, #636]	; (800b46c <_printf_float+0x2dc>)
 800b1ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b1f6:	f7f5 fc99 	bl	8000b2c <__aeabi_dcmpun>
 800b1fa:	bb88      	cbnz	r0, 800b260 <_printf_float+0xd0>
 800b1fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b200:	4b9a      	ldr	r3, [pc, #616]	; (800b46c <_printf_float+0x2dc>)
 800b202:	f04f 32ff 	mov.w	r2, #4294967295
 800b206:	f7f5 fc73 	bl	8000af0 <__aeabi_dcmple>
 800b20a:	bb48      	cbnz	r0, 800b260 <_printf_float+0xd0>
 800b20c:	2200      	movs	r2, #0
 800b20e:	2300      	movs	r3, #0
 800b210:	4640      	mov	r0, r8
 800b212:	4649      	mov	r1, r9
 800b214:	f7f5 fc62 	bl	8000adc <__aeabi_dcmplt>
 800b218:	b110      	cbz	r0, 800b220 <_printf_float+0x90>
 800b21a:	232d      	movs	r3, #45	; 0x2d
 800b21c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b220:	4b93      	ldr	r3, [pc, #588]	; (800b470 <_printf_float+0x2e0>)
 800b222:	4894      	ldr	r0, [pc, #592]	; (800b474 <_printf_float+0x2e4>)
 800b224:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b228:	bf94      	ite	ls
 800b22a:	4698      	movls	r8, r3
 800b22c:	4680      	movhi	r8, r0
 800b22e:	2303      	movs	r3, #3
 800b230:	6123      	str	r3, [r4, #16]
 800b232:	9b05      	ldr	r3, [sp, #20]
 800b234:	f023 0204 	bic.w	r2, r3, #4
 800b238:	6022      	str	r2, [r4, #0]
 800b23a:	f04f 0900 	mov.w	r9, #0
 800b23e:	9700      	str	r7, [sp, #0]
 800b240:	4633      	mov	r3, r6
 800b242:	aa0b      	add	r2, sp, #44	; 0x2c
 800b244:	4621      	mov	r1, r4
 800b246:	4628      	mov	r0, r5
 800b248:	f000 f9d8 	bl	800b5fc <_printf_common>
 800b24c:	3001      	adds	r0, #1
 800b24e:	f040 8090 	bne.w	800b372 <_printf_float+0x1e2>
 800b252:	f04f 30ff 	mov.w	r0, #4294967295
 800b256:	b00d      	add	sp, #52	; 0x34
 800b258:	ecbd 8b02 	vpop	{d8}
 800b25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b260:	4642      	mov	r2, r8
 800b262:	464b      	mov	r3, r9
 800b264:	4640      	mov	r0, r8
 800b266:	4649      	mov	r1, r9
 800b268:	f7f5 fc60 	bl	8000b2c <__aeabi_dcmpun>
 800b26c:	b140      	cbz	r0, 800b280 <_printf_float+0xf0>
 800b26e:	464b      	mov	r3, r9
 800b270:	2b00      	cmp	r3, #0
 800b272:	bfbc      	itt	lt
 800b274:	232d      	movlt	r3, #45	; 0x2d
 800b276:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b27a:	487f      	ldr	r0, [pc, #508]	; (800b478 <_printf_float+0x2e8>)
 800b27c:	4b7f      	ldr	r3, [pc, #508]	; (800b47c <_printf_float+0x2ec>)
 800b27e:	e7d1      	b.n	800b224 <_printf_float+0x94>
 800b280:	6863      	ldr	r3, [r4, #4]
 800b282:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b286:	9206      	str	r2, [sp, #24]
 800b288:	1c5a      	adds	r2, r3, #1
 800b28a:	d13f      	bne.n	800b30c <_printf_float+0x17c>
 800b28c:	2306      	movs	r3, #6
 800b28e:	6063      	str	r3, [r4, #4]
 800b290:	9b05      	ldr	r3, [sp, #20]
 800b292:	6861      	ldr	r1, [r4, #4]
 800b294:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b298:	2300      	movs	r3, #0
 800b29a:	9303      	str	r3, [sp, #12]
 800b29c:	ab0a      	add	r3, sp, #40	; 0x28
 800b29e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b2a2:	ab09      	add	r3, sp, #36	; 0x24
 800b2a4:	ec49 8b10 	vmov	d0, r8, r9
 800b2a8:	9300      	str	r3, [sp, #0]
 800b2aa:	6022      	str	r2, [r4, #0]
 800b2ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b2b0:	4628      	mov	r0, r5
 800b2b2:	f7ff fecd 	bl	800b050 <__cvt>
 800b2b6:	9b06      	ldr	r3, [sp, #24]
 800b2b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2ba:	2b47      	cmp	r3, #71	; 0x47
 800b2bc:	4680      	mov	r8, r0
 800b2be:	d108      	bne.n	800b2d2 <_printf_float+0x142>
 800b2c0:	1cc8      	adds	r0, r1, #3
 800b2c2:	db02      	blt.n	800b2ca <_printf_float+0x13a>
 800b2c4:	6863      	ldr	r3, [r4, #4]
 800b2c6:	4299      	cmp	r1, r3
 800b2c8:	dd41      	ble.n	800b34e <_printf_float+0x1be>
 800b2ca:	f1ab 0b02 	sub.w	fp, fp, #2
 800b2ce:	fa5f fb8b 	uxtb.w	fp, fp
 800b2d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b2d6:	d820      	bhi.n	800b31a <_printf_float+0x18a>
 800b2d8:	3901      	subs	r1, #1
 800b2da:	465a      	mov	r2, fp
 800b2dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b2e0:	9109      	str	r1, [sp, #36]	; 0x24
 800b2e2:	f7ff ff17 	bl	800b114 <__exponent>
 800b2e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2e8:	1813      	adds	r3, r2, r0
 800b2ea:	2a01      	cmp	r2, #1
 800b2ec:	4681      	mov	r9, r0
 800b2ee:	6123      	str	r3, [r4, #16]
 800b2f0:	dc02      	bgt.n	800b2f8 <_printf_float+0x168>
 800b2f2:	6822      	ldr	r2, [r4, #0]
 800b2f4:	07d2      	lsls	r2, r2, #31
 800b2f6:	d501      	bpl.n	800b2fc <_printf_float+0x16c>
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	6123      	str	r3, [r4, #16]
 800b2fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b300:	2b00      	cmp	r3, #0
 800b302:	d09c      	beq.n	800b23e <_printf_float+0xae>
 800b304:	232d      	movs	r3, #45	; 0x2d
 800b306:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b30a:	e798      	b.n	800b23e <_printf_float+0xae>
 800b30c:	9a06      	ldr	r2, [sp, #24]
 800b30e:	2a47      	cmp	r2, #71	; 0x47
 800b310:	d1be      	bne.n	800b290 <_printf_float+0x100>
 800b312:	2b00      	cmp	r3, #0
 800b314:	d1bc      	bne.n	800b290 <_printf_float+0x100>
 800b316:	2301      	movs	r3, #1
 800b318:	e7b9      	b.n	800b28e <_printf_float+0xfe>
 800b31a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b31e:	d118      	bne.n	800b352 <_printf_float+0x1c2>
 800b320:	2900      	cmp	r1, #0
 800b322:	6863      	ldr	r3, [r4, #4]
 800b324:	dd0b      	ble.n	800b33e <_printf_float+0x1ae>
 800b326:	6121      	str	r1, [r4, #16]
 800b328:	b913      	cbnz	r3, 800b330 <_printf_float+0x1a0>
 800b32a:	6822      	ldr	r2, [r4, #0]
 800b32c:	07d0      	lsls	r0, r2, #31
 800b32e:	d502      	bpl.n	800b336 <_printf_float+0x1a6>
 800b330:	3301      	adds	r3, #1
 800b332:	440b      	add	r3, r1
 800b334:	6123      	str	r3, [r4, #16]
 800b336:	65a1      	str	r1, [r4, #88]	; 0x58
 800b338:	f04f 0900 	mov.w	r9, #0
 800b33c:	e7de      	b.n	800b2fc <_printf_float+0x16c>
 800b33e:	b913      	cbnz	r3, 800b346 <_printf_float+0x1b6>
 800b340:	6822      	ldr	r2, [r4, #0]
 800b342:	07d2      	lsls	r2, r2, #31
 800b344:	d501      	bpl.n	800b34a <_printf_float+0x1ba>
 800b346:	3302      	adds	r3, #2
 800b348:	e7f4      	b.n	800b334 <_printf_float+0x1a4>
 800b34a:	2301      	movs	r3, #1
 800b34c:	e7f2      	b.n	800b334 <_printf_float+0x1a4>
 800b34e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b354:	4299      	cmp	r1, r3
 800b356:	db05      	blt.n	800b364 <_printf_float+0x1d4>
 800b358:	6823      	ldr	r3, [r4, #0]
 800b35a:	6121      	str	r1, [r4, #16]
 800b35c:	07d8      	lsls	r0, r3, #31
 800b35e:	d5ea      	bpl.n	800b336 <_printf_float+0x1a6>
 800b360:	1c4b      	adds	r3, r1, #1
 800b362:	e7e7      	b.n	800b334 <_printf_float+0x1a4>
 800b364:	2900      	cmp	r1, #0
 800b366:	bfd4      	ite	le
 800b368:	f1c1 0202 	rsble	r2, r1, #2
 800b36c:	2201      	movgt	r2, #1
 800b36e:	4413      	add	r3, r2
 800b370:	e7e0      	b.n	800b334 <_printf_float+0x1a4>
 800b372:	6823      	ldr	r3, [r4, #0]
 800b374:	055a      	lsls	r2, r3, #21
 800b376:	d407      	bmi.n	800b388 <_printf_float+0x1f8>
 800b378:	6923      	ldr	r3, [r4, #16]
 800b37a:	4642      	mov	r2, r8
 800b37c:	4631      	mov	r1, r6
 800b37e:	4628      	mov	r0, r5
 800b380:	47b8      	blx	r7
 800b382:	3001      	adds	r0, #1
 800b384:	d12c      	bne.n	800b3e0 <_printf_float+0x250>
 800b386:	e764      	b.n	800b252 <_printf_float+0xc2>
 800b388:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b38c:	f240 80e0 	bls.w	800b550 <_printf_float+0x3c0>
 800b390:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b394:	2200      	movs	r2, #0
 800b396:	2300      	movs	r3, #0
 800b398:	f7f5 fb96 	bl	8000ac8 <__aeabi_dcmpeq>
 800b39c:	2800      	cmp	r0, #0
 800b39e:	d034      	beq.n	800b40a <_printf_float+0x27a>
 800b3a0:	4a37      	ldr	r2, [pc, #220]	; (800b480 <_printf_float+0x2f0>)
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	4631      	mov	r1, r6
 800b3a6:	4628      	mov	r0, r5
 800b3a8:	47b8      	blx	r7
 800b3aa:	3001      	adds	r0, #1
 800b3ac:	f43f af51 	beq.w	800b252 <_printf_float+0xc2>
 800b3b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	db02      	blt.n	800b3be <_printf_float+0x22e>
 800b3b8:	6823      	ldr	r3, [r4, #0]
 800b3ba:	07d8      	lsls	r0, r3, #31
 800b3bc:	d510      	bpl.n	800b3e0 <_printf_float+0x250>
 800b3be:	ee18 3a10 	vmov	r3, s16
 800b3c2:	4652      	mov	r2, sl
 800b3c4:	4631      	mov	r1, r6
 800b3c6:	4628      	mov	r0, r5
 800b3c8:	47b8      	blx	r7
 800b3ca:	3001      	adds	r0, #1
 800b3cc:	f43f af41 	beq.w	800b252 <_printf_float+0xc2>
 800b3d0:	f04f 0800 	mov.w	r8, #0
 800b3d4:	f104 091a 	add.w	r9, r4, #26
 800b3d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3da:	3b01      	subs	r3, #1
 800b3dc:	4543      	cmp	r3, r8
 800b3de:	dc09      	bgt.n	800b3f4 <_printf_float+0x264>
 800b3e0:	6823      	ldr	r3, [r4, #0]
 800b3e2:	079b      	lsls	r3, r3, #30
 800b3e4:	f100 8105 	bmi.w	800b5f2 <_printf_float+0x462>
 800b3e8:	68e0      	ldr	r0, [r4, #12]
 800b3ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3ec:	4298      	cmp	r0, r3
 800b3ee:	bfb8      	it	lt
 800b3f0:	4618      	movlt	r0, r3
 800b3f2:	e730      	b.n	800b256 <_printf_float+0xc6>
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	464a      	mov	r2, r9
 800b3f8:	4631      	mov	r1, r6
 800b3fa:	4628      	mov	r0, r5
 800b3fc:	47b8      	blx	r7
 800b3fe:	3001      	adds	r0, #1
 800b400:	f43f af27 	beq.w	800b252 <_printf_float+0xc2>
 800b404:	f108 0801 	add.w	r8, r8, #1
 800b408:	e7e6      	b.n	800b3d8 <_printf_float+0x248>
 800b40a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	dc39      	bgt.n	800b484 <_printf_float+0x2f4>
 800b410:	4a1b      	ldr	r2, [pc, #108]	; (800b480 <_printf_float+0x2f0>)
 800b412:	2301      	movs	r3, #1
 800b414:	4631      	mov	r1, r6
 800b416:	4628      	mov	r0, r5
 800b418:	47b8      	blx	r7
 800b41a:	3001      	adds	r0, #1
 800b41c:	f43f af19 	beq.w	800b252 <_printf_float+0xc2>
 800b420:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b424:	4313      	orrs	r3, r2
 800b426:	d102      	bne.n	800b42e <_printf_float+0x29e>
 800b428:	6823      	ldr	r3, [r4, #0]
 800b42a:	07d9      	lsls	r1, r3, #31
 800b42c:	d5d8      	bpl.n	800b3e0 <_printf_float+0x250>
 800b42e:	ee18 3a10 	vmov	r3, s16
 800b432:	4652      	mov	r2, sl
 800b434:	4631      	mov	r1, r6
 800b436:	4628      	mov	r0, r5
 800b438:	47b8      	blx	r7
 800b43a:	3001      	adds	r0, #1
 800b43c:	f43f af09 	beq.w	800b252 <_printf_float+0xc2>
 800b440:	f04f 0900 	mov.w	r9, #0
 800b444:	f104 0a1a 	add.w	sl, r4, #26
 800b448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b44a:	425b      	negs	r3, r3
 800b44c:	454b      	cmp	r3, r9
 800b44e:	dc01      	bgt.n	800b454 <_printf_float+0x2c4>
 800b450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b452:	e792      	b.n	800b37a <_printf_float+0x1ea>
 800b454:	2301      	movs	r3, #1
 800b456:	4652      	mov	r2, sl
 800b458:	4631      	mov	r1, r6
 800b45a:	4628      	mov	r0, r5
 800b45c:	47b8      	blx	r7
 800b45e:	3001      	adds	r0, #1
 800b460:	f43f aef7 	beq.w	800b252 <_printf_float+0xc2>
 800b464:	f109 0901 	add.w	r9, r9, #1
 800b468:	e7ee      	b.n	800b448 <_printf_float+0x2b8>
 800b46a:	bf00      	nop
 800b46c:	7fefffff 	.word	0x7fefffff
 800b470:	0800dce0 	.word	0x0800dce0
 800b474:	0800dce4 	.word	0x0800dce4
 800b478:	0800dcec 	.word	0x0800dcec
 800b47c:	0800dce8 	.word	0x0800dce8
 800b480:	0800dcf0 	.word	0x0800dcf0
 800b484:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b486:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b488:	429a      	cmp	r2, r3
 800b48a:	bfa8      	it	ge
 800b48c:	461a      	movge	r2, r3
 800b48e:	2a00      	cmp	r2, #0
 800b490:	4691      	mov	r9, r2
 800b492:	dc37      	bgt.n	800b504 <_printf_float+0x374>
 800b494:	f04f 0b00 	mov.w	fp, #0
 800b498:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b49c:	f104 021a 	add.w	r2, r4, #26
 800b4a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b4a2:	9305      	str	r3, [sp, #20]
 800b4a4:	eba3 0309 	sub.w	r3, r3, r9
 800b4a8:	455b      	cmp	r3, fp
 800b4aa:	dc33      	bgt.n	800b514 <_printf_float+0x384>
 800b4ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	db3b      	blt.n	800b52c <_printf_float+0x39c>
 800b4b4:	6823      	ldr	r3, [r4, #0]
 800b4b6:	07da      	lsls	r2, r3, #31
 800b4b8:	d438      	bmi.n	800b52c <_printf_float+0x39c>
 800b4ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4bc:	9a05      	ldr	r2, [sp, #20]
 800b4be:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4c0:	1a9a      	subs	r2, r3, r2
 800b4c2:	eba3 0901 	sub.w	r9, r3, r1
 800b4c6:	4591      	cmp	r9, r2
 800b4c8:	bfa8      	it	ge
 800b4ca:	4691      	movge	r9, r2
 800b4cc:	f1b9 0f00 	cmp.w	r9, #0
 800b4d0:	dc35      	bgt.n	800b53e <_printf_float+0x3ae>
 800b4d2:	f04f 0800 	mov.w	r8, #0
 800b4d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b4da:	f104 0a1a 	add.w	sl, r4, #26
 800b4de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4e2:	1a9b      	subs	r3, r3, r2
 800b4e4:	eba3 0309 	sub.w	r3, r3, r9
 800b4e8:	4543      	cmp	r3, r8
 800b4ea:	f77f af79 	ble.w	800b3e0 <_printf_float+0x250>
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	4652      	mov	r2, sl
 800b4f2:	4631      	mov	r1, r6
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	47b8      	blx	r7
 800b4f8:	3001      	adds	r0, #1
 800b4fa:	f43f aeaa 	beq.w	800b252 <_printf_float+0xc2>
 800b4fe:	f108 0801 	add.w	r8, r8, #1
 800b502:	e7ec      	b.n	800b4de <_printf_float+0x34e>
 800b504:	4613      	mov	r3, r2
 800b506:	4631      	mov	r1, r6
 800b508:	4642      	mov	r2, r8
 800b50a:	4628      	mov	r0, r5
 800b50c:	47b8      	blx	r7
 800b50e:	3001      	adds	r0, #1
 800b510:	d1c0      	bne.n	800b494 <_printf_float+0x304>
 800b512:	e69e      	b.n	800b252 <_printf_float+0xc2>
 800b514:	2301      	movs	r3, #1
 800b516:	4631      	mov	r1, r6
 800b518:	4628      	mov	r0, r5
 800b51a:	9205      	str	r2, [sp, #20]
 800b51c:	47b8      	blx	r7
 800b51e:	3001      	adds	r0, #1
 800b520:	f43f ae97 	beq.w	800b252 <_printf_float+0xc2>
 800b524:	9a05      	ldr	r2, [sp, #20]
 800b526:	f10b 0b01 	add.w	fp, fp, #1
 800b52a:	e7b9      	b.n	800b4a0 <_printf_float+0x310>
 800b52c:	ee18 3a10 	vmov	r3, s16
 800b530:	4652      	mov	r2, sl
 800b532:	4631      	mov	r1, r6
 800b534:	4628      	mov	r0, r5
 800b536:	47b8      	blx	r7
 800b538:	3001      	adds	r0, #1
 800b53a:	d1be      	bne.n	800b4ba <_printf_float+0x32a>
 800b53c:	e689      	b.n	800b252 <_printf_float+0xc2>
 800b53e:	9a05      	ldr	r2, [sp, #20]
 800b540:	464b      	mov	r3, r9
 800b542:	4442      	add	r2, r8
 800b544:	4631      	mov	r1, r6
 800b546:	4628      	mov	r0, r5
 800b548:	47b8      	blx	r7
 800b54a:	3001      	adds	r0, #1
 800b54c:	d1c1      	bne.n	800b4d2 <_printf_float+0x342>
 800b54e:	e680      	b.n	800b252 <_printf_float+0xc2>
 800b550:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b552:	2a01      	cmp	r2, #1
 800b554:	dc01      	bgt.n	800b55a <_printf_float+0x3ca>
 800b556:	07db      	lsls	r3, r3, #31
 800b558:	d538      	bpl.n	800b5cc <_printf_float+0x43c>
 800b55a:	2301      	movs	r3, #1
 800b55c:	4642      	mov	r2, r8
 800b55e:	4631      	mov	r1, r6
 800b560:	4628      	mov	r0, r5
 800b562:	47b8      	blx	r7
 800b564:	3001      	adds	r0, #1
 800b566:	f43f ae74 	beq.w	800b252 <_printf_float+0xc2>
 800b56a:	ee18 3a10 	vmov	r3, s16
 800b56e:	4652      	mov	r2, sl
 800b570:	4631      	mov	r1, r6
 800b572:	4628      	mov	r0, r5
 800b574:	47b8      	blx	r7
 800b576:	3001      	adds	r0, #1
 800b578:	f43f ae6b 	beq.w	800b252 <_printf_float+0xc2>
 800b57c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b580:	2200      	movs	r2, #0
 800b582:	2300      	movs	r3, #0
 800b584:	f7f5 faa0 	bl	8000ac8 <__aeabi_dcmpeq>
 800b588:	b9d8      	cbnz	r0, 800b5c2 <_printf_float+0x432>
 800b58a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b58c:	f108 0201 	add.w	r2, r8, #1
 800b590:	3b01      	subs	r3, #1
 800b592:	4631      	mov	r1, r6
 800b594:	4628      	mov	r0, r5
 800b596:	47b8      	blx	r7
 800b598:	3001      	adds	r0, #1
 800b59a:	d10e      	bne.n	800b5ba <_printf_float+0x42a>
 800b59c:	e659      	b.n	800b252 <_printf_float+0xc2>
 800b59e:	2301      	movs	r3, #1
 800b5a0:	4652      	mov	r2, sl
 800b5a2:	4631      	mov	r1, r6
 800b5a4:	4628      	mov	r0, r5
 800b5a6:	47b8      	blx	r7
 800b5a8:	3001      	adds	r0, #1
 800b5aa:	f43f ae52 	beq.w	800b252 <_printf_float+0xc2>
 800b5ae:	f108 0801 	add.w	r8, r8, #1
 800b5b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5b4:	3b01      	subs	r3, #1
 800b5b6:	4543      	cmp	r3, r8
 800b5b8:	dcf1      	bgt.n	800b59e <_printf_float+0x40e>
 800b5ba:	464b      	mov	r3, r9
 800b5bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b5c0:	e6dc      	b.n	800b37c <_printf_float+0x1ec>
 800b5c2:	f04f 0800 	mov.w	r8, #0
 800b5c6:	f104 0a1a 	add.w	sl, r4, #26
 800b5ca:	e7f2      	b.n	800b5b2 <_printf_float+0x422>
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	4642      	mov	r2, r8
 800b5d0:	e7df      	b.n	800b592 <_printf_float+0x402>
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	464a      	mov	r2, r9
 800b5d6:	4631      	mov	r1, r6
 800b5d8:	4628      	mov	r0, r5
 800b5da:	47b8      	blx	r7
 800b5dc:	3001      	adds	r0, #1
 800b5de:	f43f ae38 	beq.w	800b252 <_printf_float+0xc2>
 800b5e2:	f108 0801 	add.w	r8, r8, #1
 800b5e6:	68e3      	ldr	r3, [r4, #12]
 800b5e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b5ea:	1a5b      	subs	r3, r3, r1
 800b5ec:	4543      	cmp	r3, r8
 800b5ee:	dcf0      	bgt.n	800b5d2 <_printf_float+0x442>
 800b5f0:	e6fa      	b.n	800b3e8 <_printf_float+0x258>
 800b5f2:	f04f 0800 	mov.w	r8, #0
 800b5f6:	f104 0919 	add.w	r9, r4, #25
 800b5fa:	e7f4      	b.n	800b5e6 <_printf_float+0x456>

0800b5fc <_printf_common>:
 800b5fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b600:	4616      	mov	r6, r2
 800b602:	4699      	mov	r9, r3
 800b604:	688a      	ldr	r2, [r1, #8]
 800b606:	690b      	ldr	r3, [r1, #16]
 800b608:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b60c:	4293      	cmp	r3, r2
 800b60e:	bfb8      	it	lt
 800b610:	4613      	movlt	r3, r2
 800b612:	6033      	str	r3, [r6, #0]
 800b614:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b618:	4607      	mov	r7, r0
 800b61a:	460c      	mov	r4, r1
 800b61c:	b10a      	cbz	r2, 800b622 <_printf_common+0x26>
 800b61e:	3301      	adds	r3, #1
 800b620:	6033      	str	r3, [r6, #0]
 800b622:	6823      	ldr	r3, [r4, #0]
 800b624:	0699      	lsls	r1, r3, #26
 800b626:	bf42      	ittt	mi
 800b628:	6833      	ldrmi	r3, [r6, #0]
 800b62a:	3302      	addmi	r3, #2
 800b62c:	6033      	strmi	r3, [r6, #0]
 800b62e:	6825      	ldr	r5, [r4, #0]
 800b630:	f015 0506 	ands.w	r5, r5, #6
 800b634:	d106      	bne.n	800b644 <_printf_common+0x48>
 800b636:	f104 0a19 	add.w	sl, r4, #25
 800b63a:	68e3      	ldr	r3, [r4, #12]
 800b63c:	6832      	ldr	r2, [r6, #0]
 800b63e:	1a9b      	subs	r3, r3, r2
 800b640:	42ab      	cmp	r3, r5
 800b642:	dc26      	bgt.n	800b692 <_printf_common+0x96>
 800b644:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b648:	1e13      	subs	r3, r2, #0
 800b64a:	6822      	ldr	r2, [r4, #0]
 800b64c:	bf18      	it	ne
 800b64e:	2301      	movne	r3, #1
 800b650:	0692      	lsls	r2, r2, #26
 800b652:	d42b      	bmi.n	800b6ac <_printf_common+0xb0>
 800b654:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b658:	4649      	mov	r1, r9
 800b65a:	4638      	mov	r0, r7
 800b65c:	47c0      	blx	r8
 800b65e:	3001      	adds	r0, #1
 800b660:	d01e      	beq.n	800b6a0 <_printf_common+0xa4>
 800b662:	6823      	ldr	r3, [r4, #0]
 800b664:	68e5      	ldr	r5, [r4, #12]
 800b666:	6832      	ldr	r2, [r6, #0]
 800b668:	f003 0306 	and.w	r3, r3, #6
 800b66c:	2b04      	cmp	r3, #4
 800b66e:	bf08      	it	eq
 800b670:	1aad      	subeq	r5, r5, r2
 800b672:	68a3      	ldr	r3, [r4, #8]
 800b674:	6922      	ldr	r2, [r4, #16]
 800b676:	bf0c      	ite	eq
 800b678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b67c:	2500      	movne	r5, #0
 800b67e:	4293      	cmp	r3, r2
 800b680:	bfc4      	itt	gt
 800b682:	1a9b      	subgt	r3, r3, r2
 800b684:	18ed      	addgt	r5, r5, r3
 800b686:	2600      	movs	r6, #0
 800b688:	341a      	adds	r4, #26
 800b68a:	42b5      	cmp	r5, r6
 800b68c:	d11a      	bne.n	800b6c4 <_printf_common+0xc8>
 800b68e:	2000      	movs	r0, #0
 800b690:	e008      	b.n	800b6a4 <_printf_common+0xa8>
 800b692:	2301      	movs	r3, #1
 800b694:	4652      	mov	r2, sl
 800b696:	4649      	mov	r1, r9
 800b698:	4638      	mov	r0, r7
 800b69a:	47c0      	blx	r8
 800b69c:	3001      	adds	r0, #1
 800b69e:	d103      	bne.n	800b6a8 <_printf_common+0xac>
 800b6a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6a8:	3501      	adds	r5, #1
 800b6aa:	e7c6      	b.n	800b63a <_printf_common+0x3e>
 800b6ac:	18e1      	adds	r1, r4, r3
 800b6ae:	1c5a      	adds	r2, r3, #1
 800b6b0:	2030      	movs	r0, #48	; 0x30
 800b6b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b6b6:	4422      	add	r2, r4
 800b6b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b6bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b6c0:	3302      	adds	r3, #2
 800b6c2:	e7c7      	b.n	800b654 <_printf_common+0x58>
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	4622      	mov	r2, r4
 800b6c8:	4649      	mov	r1, r9
 800b6ca:	4638      	mov	r0, r7
 800b6cc:	47c0      	blx	r8
 800b6ce:	3001      	adds	r0, #1
 800b6d0:	d0e6      	beq.n	800b6a0 <_printf_common+0xa4>
 800b6d2:	3601      	adds	r6, #1
 800b6d4:	e7d9      	b.n	800b68a <_printf_common+0x8e>
	...

0800b6d8 <_printf_i>:
 800b6d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6dc:	7e0f      	ldrb	r7, [r1, #24]
 800b6de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b6e0:	2f78      	cmp	r7, #120	; 0x78
 800b6e2:	4691      	mov	r9, r2
 800b6e4:	4680      	mov	r8, r0
 800b6e6:	460c      	mov	r4, r1
 800b6e8:	469a      	mov	sl, r3
 800b6ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b6ee:	d807      	bhi.n	800b700 <_printf_i+0x28>
 800b6f0:	2f62      	cmp	r7, #98	; 0x62
 800b6f2:	d80a      	bhi.n	800b70a <_printf_i+0x32>
 800b6f4:	2f00      	cmp	r7, #0
 800b6f6:	f000 80d8 	beq.w	800b8aa <_printf_i+0x1d2>
 800b6fa:	2f58      	cmp	r7, #88	; 0x58
 800b6fc:	f000 80a3 	beq.w	800b846 <_printf_i+0x16e>
 800b700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b704:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b708:	e03a      	b.n	800b780 <_printf_i+0xa8>
 800b70a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b70e:	2b15      	cmp	r3, #21
 800b710:	d8f6      	bhi.n	800b700 <_printf_i+0x28>
 800b712:	a101      	add	r1, pc, #4	; (adr r1, 800b718 <_printf_i+0x40>)
 800b714:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b718:	0800b771 	.word	0x0800b771
 800b71c:	0800b785 	.word	0x0800b785
 800b720:	0800b701 	.word	0x0800b701
 800b724:	0800b701 	.word	0x0800b701
 800b728:	0800b701 	.word	0x0800b701
 800b72c:	0800b701 	.word	0x0800b701
 800b730:	0800b785 	.word	0x0800b785
 800b734:	0800b701 	.word	0x0800b701
 800b738:	0800b701 	.word	0x0800b701
 800b73c:	0800b701 	.word	0x0800b701
 800b740:	0800b701 	.word	0x0800b701
 800b744:	0800b891 	.word	0x0800b891
 800b748:	0800b7b5 	.word	0x0800b7b5
 800b74c:	0800b873 	.word	0x0800b873
 800b750:	0800b701 	.word	0x0800b701
 800b754:	0800b701 	.word	0x0800b701
 800b758:	0800b8b3 	.word	0x0800b8b3
 800b75c:	0800b701 	.word	0x0800b701
 800b760:	0800b7b5 	.word	0x0800b7b5
 800b764:	0800b701 	.word	0x0800b701
 800b768:	0800b701 	.word	0x0800b701
 800b76c:	0800b87b 	.word	0x0800b87b
 800b770:	682b      	ldr	r3, [r5, #0]
 800b772:	1d1a      	adds	r2, r3, #4
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	602a      	str	r2, [r5, #0]
 800b778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b77c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b780:	2301      	movs	r3, #1
 800b782:	e0a3      	b.n	800b8cc <_printf_i+0x1f4>
 800b784:	6820      	ldr	r0, [r4, #0]
 800b786:	6829      	ldr	r1, [r5, #0]
 800b788:	0606      	lsls	r6, r0, #24
 800b78a:	f101 0304 	add.w	r3, r1, #4
 800b78e:	d50a      	bpl.n	800b7a6 <_printf_i+0xce>
 800b790:	680e      	ldr	r6, [r1, #0]
 800b792:	602b      	str	r3, [r5, #0]
 800b794:	2e00      	cmp	r6, #0
 800b796:	da03      	bge.n	800b7a0 <_printf_i+0xc8>
 800b798:	232d      	movs	r3, #45	; 0x2d
 800b79a:	4276      	negs	r6, r6
 800b79c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7a0:	485e      	ldr	r0, [pc, #376]	; (800b91c <_printf_i+0x244>)
 800b7a2:	230a      	movs	r3, #10
 800b7a4:	e019      	b.n	800b7da <_printf_i+0x102>
 800b7a6:	680e      	ldr	r6, [r1, #0]
 800b7a8:	602b      	str	r3, [r5, #0]
 800b7aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b7ae:	bf18      	it	ne
 800b7b0:	b236      	sxthne	r6, r6
 800b7b2:	e7ef      	b.n	800b794 <_printf_i+0xbc>
 800b7b4:	682b      	ldr	r3, [r5, #0]
 800b7b6:	6820      	ldr	r0, [r4, #0]
 800b7b8:	1d19      	adds	r1, r3, #4
 800b7ba:	6029      	str	r1, [r5, #0]
 800b7bc:	0601      	lsls	r1, r0, #24
 800b7be:	d501      	bpl.n	800b7c4 <_printf_i+0xec>
 800b7c0:	681e      	ldr	r6, [r3, #0]
 800b7c2:	e002      	b.n	800b7ca <_printf_i+0xf2>
 800b7c4:	0646      	lsls	r6, r0, #25
 800b7c6:	d5fb      	bpl.n	800b7c0 <_printf_i+0xe8>
 800b7c8:	881e      	ldrh	r6, [r3, #0]
 800b7ca:	4854      	ldr	r0, [pc, #336]	; (800b91c <_printf_i+0x244>)
 800b7cc:	2f6f      	cmp	r7, #111	; 0x6f
 800b7ce:	bf0c      	ite	eq
 800b7d0:	2308      	moveq	r3, #8
 800b7d2:	230a      	movne	r3, #10
 800b7d4:	2100      	movs	r1, #0
 800b7d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b7da:	6865      	ldr	r5, [r4, #4]
 800b7dc:	60a5      	str	r5, [r4, #8]
 800b7de:	2d00      	cmp	r5, #0
 800b7e0:	bfa2      	ittt	ge
 800b7e2:	6821      	ldrge	r1, [r4, #0]
 800b7e4:	f021 0104 	bicge.w	r1, r1, #4
 800b7e8:	6021      	strge	r1, [r4, #0]
 800b7ea:	b90e      	cbnz	r6, 800b7f0 <_printf_i+0x118>
 800b7ec:	2d00      	cmp	r5, #0
 800b7ee:	d04d      	beq.n	800b88c <_printf_i+0x1b4>
 800b7f0:	4615      	mov	r5, r2
 800b7f2:	fbb6 f1f3 	udiv	r1, r6, r3
 800b7f6:	fb03 6711 	mls	r7, r3, r1, r6
 800b7fa:	5dc7      	ldrb	r7, [r0, r7]
 800b7fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b800:	4637      	mov	r7, r6
 800b802:	42bb      	cmp	r3, r7
 800b804:	460e      	mov	r6, r1
 800b806:	d9f4      	bls.n	800b7f2 <_printf_i+0x11a>
 800b808:	2b08      	cmp	r3, #8
 800b80a:	d10b      	bne.n	800b824 <_printf_i+0x14c>
 800b80c:	6823      	ldr	r3, [r4, #0]
 800b80e:	07de      	lsls	r6, r3, #31
 800b810:	d508      	bpl.n	800b824 <_printf_i+0x14c>
 800b812:	6923      	ldr	r3, [r4, #16]
 800b814:	6861      	ldr	r1, [r4, #4]
 800b816:	4299      	cmp	r1, r3
 800b818:	bfde      	ittt	le
 800b81a:	2330      	movle	r3, #48	; 0x30
 800b81c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b820:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b824:	1b52      	subs	r2, r2, r5
 800b826:	6122      	str	r2, [r4, #16]
 800b828:	f8cd a000 	str.w	sl, [sp]
 800b82c:	464b      	mov	r3, r9
 800b82e:	aa03      	add	r2, sp, #12
 800b830:	4621      	mov	r1, r4
 800b832:	4640      	mov	r0, r8
 800b834:	f7ff fee2 	bl	800b5fc <_printf_common>
 800b838:	3001      	adds	r0, #1
 800b83a:	d14c      	bne.n	800b8d6 <_printf_i+0x1fe>
 800b83c:	f04f 30ff 	mov.w	r0, #4294967295
 800b840:	b004      	add	sp, #16
 800b842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b846:	4835      	ldr	r0, [pc, #212]	; (800b91c <_printf_i+0x244>)
 800b848:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b84c:	6829      	ldr	r1, [r5, #0]
 800b84e:	6823      	ldr	r3, [r4, #0]
 800b850:	f851 6b04 	ldr.w	r6, [r1], #4
 800b854:	6029      	str	r1, [r5, #0]
 800b856:	061d      	lsls	r5, r3, #24
 800b858:	d514      	bpl.n	800b884 <_printf_i+0x1ac>
 800b85a:	07df      	lsls	r7, r3, #31
 800b85c:	bf44      	itt	mi
 800b85e:	f043 0320 	orrmi.w	r3, r3, #32
 800b862:	6023      	strmi	r3, [r4, #0]
 800b864:	b91e      	cbnz	r6, 800b86e <_printf_i+0x196>
 800b866:	6823      	ldr	r3, [r4, #0]
 800b868:	f023 0320 	bic.w	r3, r3, #32
 800b86c:	6023      	str	r3, [r4, #0]
 800b86e:	2310      	movs	r3, #16
 800b870:	e7b0      	b.n	800b7d4 <_printf_i+0xfc>
 800b872:	6823      	ldr	r3, [r4, #0]
 800b874:	f043 0320 	orr.w	r3, r3, #32
 800b878:	6023      	str	r3, [r4, #0]
 800b87a:	2378      	movs	r3, #120	; 0x78
 800b87c:	4828      	ldr	r0, [pc, #160]	; (800b920 <_printf_i+0x248>)
 800b87e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b882:	e7e3      	b.n	800b84c <_printf_i+0x174>
 800b884:	0659      	lsls	r1, r3, #25
 800b886:	bf48      	it	mi
 800b888:	b2b6      	uxthmi	r6, r6
 800b88a:	e7e6      	b.n	800b85a <_printf_i+0x182>
 800b88c:	4615      	mov	r5, r2
 800b88e:	e7bb      	b.n	800b808 <_printf_i+0x130>
 800b890:	682b      	ldr	r3, [r5, #0]
 800b892:	6826      	ldr	r6, [r4, #0]
 800b894:	6961      	ldr	r1, [r4, #20]
 800b896:	1d18      	adds	r0, r3, #4
 800b898:	6028      	str	r0, [r5, #0]
 800b89a:	0635      	lsls	r5, r6, #24
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	d501      	bpl.n	800b8a4 <_printf_i+0x1cc>
 800b8a0:	6019      	str	r1, [r3, #0]
 800b8a2:	e002      	b.n	800b8aa <_printf_i+0x1d2>
 800b8a4:	0670      	lsls	r0, r6, #25
 800b8a6:	d5fb      	bpl.n	800b8a0 <_printf_i+0x1c8>
 800b8a8:	8019      	strh	r1, [r3, #0]
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	6123      	str	r3, [r4, #16]
 800b8ae:	4615      	mov	r5, r2
 800b8b0:	e7ba      	b.n	800b828 <_printf_i+0x150>
 800b8b2:	682b      	ldr	r3, [r5, #0]
 800b8b4:	1d1a      	adds	r2, r3, #4
 800b8b6:	602a      	str	r2, [r5, #0]
 800b8b8:	681d      	ldr	r5, [r3, #0]
 800b8ba:	6862      	ldr	r2, [r4, #4]
 800b8bc:	2100      	movs	r1, #0
 800b8be:	4628      	mov	r0, r5
 800b8c0:	f7f4 fc8e 	bl	80001e0 <memchr>
 800b8c4:	b108      	cbz	r0, 800b8ca <_printf_i+0x1f2>
 800b8c6:	1b40      	subs	r0, r0, r5
 800b8c8:	6060      	str	r0, [r4, #4]
 800b8ca:	6863      	ldr	r3, [r4, #4]
 800b8cc:	6123      	str	r3, [r4, #16]
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8d4:	e7a8      	b.n	800b828 <_printf_i+0x150>
 800b8d6:	6923      	ldr	r3, [r4, #16]
 800b8d8:	462a      	mov	r2, r5
 800b8da:	4649      	mov	r1, r9
 800b8dc:	4640      	mov	r0, r8
 800b8de:	47d0      	blx	sl
 800b8e0:	3001      	adds	r0, #1
 800b8e2:	d0ab      	beq.n	800b83c <_printf_i+0x164>
 800b8e4:	6823      	ldr	r3, [r4, #0]
 800b8e6:	079b      	lsls	r3, r3, #30
 800b8e8:	d413      	bmi.n	800b912 <_printf_i+0x23a>
 800b8ea:	68e0      	ldr	r0, [r4, #12]
 800b8ec:	9b03      	ldr	r3, [sp, #12]
 800b8ee:	4298      	cmp	r0, r3
 800b8f0:	bfb8      	it	lt
 800b8f2:	4618      	movlt	r0, r3
 800b8f4:	e7a4      	b.n	800b840 <_printf_i+0x168>
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	4632      	mov	r2, r6
 800b8fa:	4649      	mov	r1, r9
 800b8fc:	4640      	mov	r0, r8
 800b8fe:	47d0      	blx	sl
 800b900:	3001      	adds	r0, #1
 800b902:	d09b      	beq.n	800b83c <_printf_i+0x164>
 800b904:	3501      	adds	r5, #1
 800b906:	68e3      	ldr	r3, [r4, #12]
 800b908:	9903      	ldr	r1, [sp, #12]
 800b90a:	1a5b      	subs	r3, r3, r1
 800b90c:	42ab      	cmp	r3, r5
 800b90e:	dcf2      	bgt.n	800b8f6 <_printf_i+0x21e>
 800b910:	e7eb      	b.n	800b8ea <_printf_i+0x212>
 800b912:	2500      	movs	r5, #0
 800b914:	f104 0619 	add.w	r6, r4, #25
 800b918:	e7f5      	b.n	800b906 <_printf_i+0x22e>
 800b91a:	bf00      	nop
 800b91c:	0800dcf2 	.word	0x0800dcf2
 800b920:	0800dd03 	.word	0x0800dd03

0800b924 <_sbrk_r>:
 800b924:	b538      	push	{r3, r4, r5, lr}
 800b926:	4d06      	ldr	r5, [pc, #24]	; (800b940 <_sbrk_r+0x1c>)
 800b928:	2300      	movs	r3, #0
 800b92a:	4604      	mov	r4, r0
 800b92c:	4608      	mov	r0, r1
 800b92e:	602b      	str	r3, [r5, #0]
 800b930:	f7f6 f81e 	bl	8001970 <_sbrk>
 800b934:	1c43      	adds	r3, r0, #1
 800b936:	d102      	bne.n	800b93e <_sbrk_r+0x1a>
 800b938:	682b      	ldr	r3, [r5, #0]
 800b93a:	b103      	cbz	r3, 800b93e <_sbrk_r+0x1a>
 800b93c:	6023      	str	r3, [r4, #0]
 800b93e:	bd38      	pop	{r3, r4, r5, pc}
 800b940:	20001f9c 	.word	0x20001f9c

0800b944 <siprintf>:
 800b944:	b40e      	push	{r1, r2, r3}
 800b946:	b500      	push	{lr}
 800b948:	b09c      	sub	sp, #112	; 0x70
 800b94a:	ab1d      	add	r3, sp, #116	; 0x74
 800b94c:	9002      	str	r0, [sp, #8]
 800b94e:	9006      	str	r0, [sp, #24]
 800b950:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b954:	4809      	ldr	r0, [pc, #36]	; (800b97c <siprintf+0x38>)
 800b956:	9107      	str	r1, [sp, #28]
 800b958:	9104      	str	r1, [sp, #16]
 800b95a:	4909      	ldr	r1, [pc, #36]	; (800b980 <siprintf+0x3c>)
 800b95c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b960:	9105      	str	r1, [sp, #20]
 800b962:	6800      	ldr	r0, [r0, #0]
 800b964:	9301      	str	r3, [sp, #4]
 800b966:	a902      	add	r1, sp, #8
 800b968:	f001 faa4 	bl	800ceb4 <_svfiprintf_r>
 800b96c:	9b02      	ldr	r3, [sp, #8]
 800b96e:	2200      	movs	r2, #0
 800b970:	701a      	strb	r2, [r3, #0]
 800b972:	b01c      	add	sp, #112	; 0x70
 800b974:	f85d eb04 	ldr.w	lr, [sp], #4
 800b978:	b003      	add	sp, #12
 800b97a:	4770      	bx	lr
 800b97c:	200000fc 	.word	0x200000fc
 800b980:	ffff0208 	.word	0xffff0208

0800b984 <strcpy>:
 800b984:	4603      	mov	r3, r0
 800b986:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b98a:	f803 2b01 	strb.w	r2, [r3], #1
 800b98e:	2a00      	cmp	r2, #0
 800b990:	d1f9      	bne.n	800b986 <strcpy+0x2>
 800b992:	4770      	bx	lr

0800b994 <quorem>:
 800b994:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b998:	6903      	ldr	r3, [r0, #16]
 800b99a:	690c      	ldr	r4, [r1, #16]
 800b99c:	42a3      	cmp	r3, r4
 800b99e:	4607      	mov	r7, r0
 800b9a0:	f2c0 8081 	blt.w	800baa6 <quorem+0x112>
 800b9a4:	3c01      	subs	r4, #1
 800b9a6:	f101 0814 	add.w	r8, r1, #20
 800b9aa:	f100 0514 	add.w	r5, r0, #20
 800b9ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b9b2:	9301      	str	r3, [sp, #4]
 800b9b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b9b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b9bc:	3301      	adds	r3, #1
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b9c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b9c8:	fbb2 f6f3 	udiv	r6, r2, r3
 800b9cc:	d331      	bcc.n	800ba32 <quorem+0x9e>
 800b9ce:	f04f 0e00 	mov.w	lr, #0
 800b9d2:	4640      	mov	r0, r8
 800b9d4:	46ac      	mov	ip, r5
 800b9d6:	46f2      	mov	sl, lr
 800b9d8:	f850 2b04 	ldr.w	r2, [r0], #4
 800b9dc:	b293      	uxth	r3, r2
 800b9de:	fb06 e303 	mla	r3, r6, r3, lr
 800b9e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	ebaa 0303 	sub.w	r3, sl, r3
 800b9ec:	f8dc a000 	ldr.w	sl, [ip]
 800b9f0:	0c12      	lsrs	r2, r2, #16
 800b9f2:	fa13 f38a 	uxtah	r3, r3, sl
 800b9f6:	fb06 e202 	mla	r2, r6, r2, lr
 800b9fa:	9300      	str	r3, [sp, #0]
 800b9fc:	9b00      	ldr	r3, [sp, #0]
 800b9fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ba02:	b292      	uxth	r2, r2
 800ba04:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ba08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ba0c:	f8bd 3000 	ldrh.w	r3, [sp]
 800ba10:	4581      	cmp	r9, r0
 800ba12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba16:	f84c 3b04 	str.w	r3, [ip], #4
 800ba1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ba1e:	d2db      	bcs.n	800b9d8 <quorem+0x44>
 800ba20:	f855 300b 	ldr.w	r3, [r5, fp]
 800ba24:	b92b      	cbnz	r3, 800ba32 <quorem+0x9e>
 800ba26:	9b01      	ldr	r3, [sp, #4]
 800ba28:	3b04      	subs	r3, #4
 800ba2a:	429d      	cmp	r5, r3
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	d32e      	bcc.n	800ba8e <quorem+0xfa>
 800ba30:	613c      	str	r4, [r7, #16]
 800ba32:	4638      	mov	r0, r7
 800ba34:	f001 f8ca 	bl	800cbcc <__mcmp>
 800ba38:	2800      	cmp	r0, #0
 800ba3a:	db24      	blt.n	800ba86 <quorem+0xf2>
 800ba3c:	3601      	adds	r6, #1
 800ba3e:	4628      	mov	r0, r5
 800ba40:	f04f 0c00 	mov.w	ip, #0
 800ba44:	f858 2b04 	ldr.w	r2, [r8], #4
 800ba48:	f8d0 e000 	ldr.w	lr, [r0]
 800ba4c:	b293      	uxth	r3, r2
 800ba4e:	ebac 0303 	sub.w	r3, ip, r3
 800ba52:	0c12      	lsrs	r2, r2, #16
 800ba54:	fa13 f38e 	uxtah	r3, r3, lr
 800ba58:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ba5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ba60:	b29b      	uxth	r3, r3
 800ba62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba66:	45c1      	cmp	r9, r8
 800ba68:	f840 3b04 	str.w	r3, [r0], #4
 800ba6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ba70:	d2e8      	bcs.n	800ba44 <quorem+0xb0>
 800ba72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba7a:	b922      	cbnz	r2, 800ba86 <quorem+0xf2>
 800ba7c:	3b04      	subs	r3, #4
 800ba7e:	429d      	cmp	r5, r3
 800ba80:	461a      	mov	r2, r3
 800ba82:	d30a      	bcc.n	800ba9a <quorem+0x106>
 800ba84:	613c      	str	r4, [r7, #16]
 800ba86:	4630      	mov	r0, r6
 800ba88:	b003      	add	sp, #12
 800ba8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba8e:	6812      	ldr	r2, [r2, #0]
 800ba90:	3b04      	subs	r3, #4
 800ba92:	2a00      	cmp	r2, #0
 800ba94:	d1cc      	bne.n	800ba30 <quorem+0x9c>
 800ba96:	3c01      	subs	r4, #1
 800ba98:	e7c7      	b.n	800ba2a <quorem+0x96>
 800ba9a:	6812      	ldr	r2, [r2, #0]
 800ba9c:	3b04      	subs	r3, #4
 800ba9e:	2a00      	cmp	r2, #0
 800baa0:	d1f0      	bne.n	800ba84 <quorem+0xf0>
 800baa2:	3c01      	subs	r4, #1
 800baa4:	e7eb      	b.n	800ba7e <quorem+0xea>
 800baa6:	2000      	movs	r0, #0
 800baa8:	e7ee      	b.n	800ba88 <quorem+0xf4>
 800baaa:	0000      	movs	r0, r0
 800baac:	0000      	movs	r0, r0
	...

0800bab0 <_dtoa_r>:
 800bab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab4:	ed2d 8b04 	vpush	{d8-d9}
 800bab8:	ec57 6b10 	vmov	r6, r7, d0
 800babc:	b093      	sub	sp, #76	; 0x4c
 800babe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bac0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bac4:	9106      	str	r1, [sp, #24]
 800bac6:	ee10 aa10 	vmov	sl, s0
 800baca:	4604      	mov	r4, r0
 800bacc:	9209      	str	r2, [sp, #36]	; 0x24
 800bace:	930c      	str	r3, [sp, #48]	; 0x30
 800bad0:	46bb      	mov	fp, r7
 800bad2:	b975      	cbnz	r5, 800baf2 <_dtoa_r+0x42>
 800bad4:	2010      	movs	r0, #16
 800bad6:	f7ff f9cb 	bl	800ae70 <malloc>
 800bada:	4602      	mov	r2, r0
 800badc:	6260      	str	r0, [r4, #36]	; 0x24
 800bade:	b920      	cbnz	r0, 800baea <_dtoa_r+0x3a>
 800bae0:	4ba7      	ldr	r3, [pc, #668]	; (800bd80 <_dtoa_r+0x2d0>)
 800bae2:	21ea      	movs	r1, #234	; 0xea
 800bae4:	48a7      	ldr	r0, [pc, #668]	; (800bd84 <_dtoa_r+0x2d4>)
 800bae6:	f001 fae5 	bl	800d0b4 <__assert_func>
 800baea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800baee:	6005      	str	r5, [r0, #0]
 800baf0:	60c5      	str	r5, [r0, #12]
 800baf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800baf4:	6819      	ldr	r1, [r3, #0]
 800baf6:	b151      	cbz	r1, 800bb0e <_dtoa_r+0x5e>
 800baf8:	685a      	ldr	r2, [r3, #4]
 800bafa:	604a      	str	r2, [r1, #4]
 800bafc:	2301      	movs	r3, #1
 800bafe:	4093      	lsls	r3, r2
 800bb00:	608b      	str	r3, [r1, #8]
 800bb02:	4620      	mov	r0, r4
 800bb04:	f000 fe20 	bl	800c748 <_Bfree>
 800bb08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	601a      	str	r2, [r3, #0]
 800bb0e:	1e3b      	subs	r3, r7, #0
 800bb10:	bfaa      	itet	ge
 800bb12:	2300      	movge	r3, #0
 800bb14:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800bb18:	f8c8 3000 	strge.w	r3, [r8]
 800bb1c:	4b9a      	ldr	r3, [pc, #616]	; (800bd88 <_dtoa_r+0x2d8>)
 800bb1e:	bfbc      	itt	lt
 800bb20:	2201      	movlt	r2, #1
 800bb22:	f8c8 2000 	strlt.w	r2, [r8]
 800bb26:	ea33 030b 	bics.w	r3, r3, fp
 800bb2a:	d11b      	bne.n	800bb64 <_dtoa_r+0xb4>
 800bb2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb2e:	f242 730f 	movw	r3, #9999	; 0x270f
 800bb32:	6013      	str	r3, [r2, #0]
 800bb34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb38:	4333      	orrs	r3, r6
 800bb3a:	f000 8592 	beq.w	800c662 <_dtoa_r+0xbb2>
 800bb3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb40:	b963      	cbnz	r3, 800bb5c <_dtoa_r+0xac>
 800bb42:	4b92      	ldr	r3, [pc, #584]	; (800bd8c <_dtoa_r+0x2dc>)
 800bb44:	e022      	b.n	800bb8c <_dtoa_r+0xdc>
 800bb46:	4b92      	ldr	r3, [pc, #584]	; (800bd90 <_dtoa_r+0x2e0>)
 800bb48:	9301      	str	r3, [sp, #4]
 800bb4a:	3308      	adds	r3, #8
 800bb4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bb4e:	6013      	str	r3, [r2, #0]
 800bb50:	9801      	ldr	r0, [sp, #4]
 800bb52:	b013      	add	sp, #76	; 0x4c
 800bb54:	ecbd 8b04 	vpop	{d8-d9}
 800bb58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb5c:	4b8b      	ldr	r3, [pc, #556]	; (800bd8c <_dtoa_r+0x2dc>)
 800bb5e:	9301      	str	r3, [sp, #4]
 800bb60:	3303      	adds	r3, #3
 800bb62:	e7f3      	b.n	800bb4c <_dtoa_r+0x9c>
 800bb64:	2200      	movs	r2, #0
 800bb66:	2300      	movs	r3, #0
 800bb68:	4650      	mov	r0, sl
 800bb6a:	4659      	mov	r1, fp
 800bb6c:	f7f4 ffac 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb70:	ec4b ab19 	vmov	d9, sl, fp
 800bb74:	4680      	mov	r8, r0
 800bb76:	b158      	cbz	r0, 800bb90 <_dtoa_r+0xe0>
 800bb78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	6013      	str	r3, [r2, #0]
 800bb7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	f000 856b 	beq.w	800c65c <_dtoa_r+0xbac>
 800bb86:	4883      	ldr	r0, [pc, #524]	; (800bd94 <_dtoa_r+0x2e4>)
 800bb88:	6018      	str	r0, [r3, #0]
 800bb8a:	1e43      	subs	r3, r0, #1
 800bb8c:	9301      	str	r3, [sp, #4]
 800bb8e:	e7df      	b.n	800bb50 <_dtoa_r+0xa0>
 800bb90:	ec4b ab10 	vmov	d0, sl, fp
 800bb94:	aa10      	add	r2, sp, #64	; 0x40
 800bb96:	a911      	add	r1, sp, #68	; 0x44
 800bb98:	4620      	mov	r0, r4
 800bb9a:	f001 f8bd 	bl	800cd18 <__d2b>
 800bb9e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800bba2:	ee08 0a10 	vmov	s16, r0
 800bba6:	2d00      	cmp	r5, #0
 800bba8:	f000 8084 	beq.w	800bcb4 <_dtoa_r+0x204>
 800bbac:	ee19 3a90 	vmov	r3, s19
 800bbb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bbb4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bbb8:	4656      	mov	r6, sl
 800bbba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bbbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bbc2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800bbc6:	4b74      	ldr	r3, [pc, #464]	; (800bd98 <_dtoa_r+0x2e8>)
 800bbc8:	2200      	movs	r2, #0
 800bbca:	4630      	mov	r0, r6
 800bbcc:	4639      	mov	r1, r7
 800bbce:	f7f4 fb5b 	bl	8000288 <__aeabi_dsub>
 800bbd2:	a365      	add	r3, pc, #404	; (adr r3, 800bd68 <_dtoa_r+0x2b8>)
 800bbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd8:	f7f4 fd0e 	bl	80005f8 <__aeabi_dmul>
 800bbdc:	a364      	add	r3, pc, #400	; (adr r3, 800bd70 <_dtoa_r+0x2c0>)
 800bbde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe2:	f7f4 fb53 	bl	800028c <__adddf3>
 800bbe6:	4606      	mov	r6, r0
 800bbe8:	4628      	mov	r0, r5
 800bbea:	460f      	mov	r7, r1
 800bbec:	f7f4 fc9a 	bl	8000524 <__aeabi_i2d>
 800bbf0:	a361      	add	r3, pc, #388	; (adr r3, 800bd78 <_dtoa_r+0x2c8>)
 800bbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf6:	f7f4 fcff 	bl	80005f8 <__aeabi_dmul>
 800bbfa:	4602      	mov	r2, r0
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	4630      	mov	r0, r6
 800bc00:	4639      	mov	r1, r7
 800bc02:	f7f4 fb43 	bl	800028c <__adddf3>
 800bc06:	4606      	mov	r6, r0
 800bc08:	460f      	mov	r7, r1
 800bc0a:	f7f4 ffa5 	bl	8000b58 <__aeabi_d2iz>
 800bc0e:	2200      	movs	r2, #0
 800bc10:	9000      	str	r0, [sp, #0]
 800bc12:	2300      	movs	r3, #0
 800bc14:	4630      	mov	r0, r6
 800bc16:	4639      	mov	r1, r7
 800bc18:	f7f4 ff60 	bl	8000adc <__aeabi_dcmplt>
 800bc1c:	b150      	cbz	r0, 800bc34 <_dtoa_r+0x184>
 800bc1e:	9800      	ldr	r0, [sp, #0]
 800bc20:	f7f4 fc80 	bl	8000524 <__aeabi_i2d>
 800bc24:	4632      	mov	r2, r6
 800bc26:	463b      	mov	r3, r7
 800bc28:	f7f4 ff4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc2c:	b910      	cbnz	r0, 800bc34 <_dtoa_r+0x184>
 800bc2e:	9b00      	ldr	r3, [sp, #0]
 800bc30:	3b01      	subs	r3, #1
 800bc32:	9300      	str	r3, [sp, #0]
 800bc34:	9b00      	ldr	r3, [sp, #0]
 800bc36:	2b16      	cmp	r3, #22
 800bc38:	d85a      	bhi.n	800bcf0 <_dtoa_r+0x240>
 800bc3a:	9a00      	ldr	r2, [sp, #0]
 800bc3c:	4b57      	ldr	r3, [pc, #348]	; (800bd9c <_dtoa_r+0x2ec>)
 800bc3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc46:	ec51 0b19 	vmov	r0, r1, d9
 800bc4a:	f7f4 ff47 	bl	8000adc <__aeabi_dcmplt>
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	d050      	beq.n	800bcf4 <_dtoa_r+0x244>
 800bc52:	9b00      	ldr	r3, [sp, #0]
 800bc54:	3b01      	subs	r3, #1
 800bc56:	9300      	str	r3, [sp, #0]
 800bc58:	2300      	movs	r3, #0
 800bc5a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc5e:	1b5d      	subs	r5, r3, r5
 800bc60:	1e6b      	subs	r3, r5, #1
 800bc62:	9305      	str	r3, [sp, #20]
 800bc64:	bf45      	ittet	mi
 800bc66:	f1c5 0301 	rsbmi	r3, r5, #1
 800bc6a:	9304      	strmi	r3, [sp, #16]
 800bc6c:	2300      	movpl	r3, #0
 800bc6e:	2300      	movmi	r3, #0
 800bc70:	bf4c      	ite	mi
 800bc72:	9305      	strmi	r3, [sp, #20]
 800bc74:	9304      	strpl	r3, [sp, #16]
 800bc76:	9b00      	ldr	r3, [sp, #0]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	db3d      	blt.n	800bcf8 <_dtoa_r+0x248>
 800bc7c:	9b05      	ldr	r3, [sp, #20]
 800bc7e:	9a00      	ldr	r2, [sp, #0]
 800bc80:	920a      	str	r2, [sp, #40]	; 0x28
 800bc82:	4413      	add	r3, r2
 800bc84:	9305      	str	r3, [sp, #20]
 800bc86:	2300      	movs	r3, #0
 800bc88:	9307      	str	r3, [sp, #28]
 800bc8a:	9b06      	ldr	r3, [sp, #24]
 800bc8c:	2b09      	cmp	r3, #9
 800bc8e:	f200 8089 	bhi.w	800bda4 <_dtoa_r+0x2f4>
 800bc92:	2b05      	cmp	r3, #5
 800bc94:	bfc4      	itt	gt
 800bc96:	3b04      	subgt	r3, #4
 800bc98:	9306      	strgt	r3, [sp, #24]
 800bc9a:	9b06      	ldr	r3, [sp, #24]
 800bc9c:	f1a3 0302 	sub.w	r3, r3, #2
 800bca0:	bfcc      	ite	gt
 800bca2:	2500      	movgt	r5, #0
 800bca4:	2501      	movle	r5, #1
 800bca6:	2b03      	cmp	r3, #3
 800bca8:	f200 8087 	bhi.w	800bdba <_dtoa_r+0x30a>
 800bcac:	e8df f003 	tbb	[pc, r3]
 800bcb0:	59383a2d 	.word	0x59383a2d
 800bcb4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bcb8:	441d      	add	r5, r3
 800bcba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bcbe:	2b20      	cmp	r3, #32
 800bcc0:	bfc1      	itttt	gt
 800bcc2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bcc6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bcca:	fa0b f303 	lslgt.w	r3, fp, r3
 800bcce:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bcd2:	bfda      	itte	le
 800bcd4:	f1c3 0320 	rsble	r3, r3, #32
 800bcd8:	fa06 f003 	lslle.w	r0, r6, r3
 800bcdc:	4318      	orrgt	r0, r3
 800bcde:	f7f4 fc11 	bl	8000504 <__aeabi_ui2d>
 800bce2:	2301      	movs	r3, #1
 800bce4:	4606      	mov	r6, r0
 800bce6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bcea:	3d01      	subs	r5, #1
 800bcec:	930e      	str	r3, [sp, #56]	; 0x38
 800bcee:	e76a      	b.n	800bbc6 <_dtoa_r+0x116>
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	e7b2      	b.n	800bc5a <_dtoa_r+0x1aa>
 800bcf4:	900b      	str	r0, [sp, #44]	; 0x2c
 800bcf6:	e7b1      	b.n	800bc5c <_dtoa_r+0x1ac>
 800bcf8:	9b04      	ldr	r3, [sp, #16]
 800bcfa:	9a00      	ldr	r2, [sp, #0]
 800bcfc:	1a9b      	subs	r3, r3, r2
 800bcfe:	9304      	str	r3, [sp, #16]
 800bd00:	4253      	negs	r3, r2
 800bd02:	9307      	str	r3, [sp, #28]
 800bd04:	2300      	movs	r3, #0
 800bd06:	930a      	str	r3, [sp, #40]	; 0x28
 800bd08:	e7bf      	b.n	800bc8a <_dtoa_r+0x1da>
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	9308      	str	r3, [sp, #32]
 800bd0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	dc55      	bgt.n	800bdc0 <_dtoa_r+0x310>
 800bd14:	2301      	movs	r3, #1
 800bd16:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	9209      	str	r2, [sp, #36]	; 0x24
 800bd1e:	e00c      	b.n	800bd3a <_dtoa_r+0x28a>
 800bd20:	2301      	movs	r3, #1
 800bd22:	e7f3      	b.n	800bd0c <_dtoa_r+0x25c>
 800bd24:	2300      	movs	r3, #0
 800bd26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd28:	9308      	str	r3, [sp, #32]
 800bd2a:	9b00      	ldr	r3, [sp, #0]
 800bd2c:	4413      	add	r3, r2
 800bd2e:	9302      	str	r3, [sp, #8]
 800bd30:	3301      	adds	r3, #1
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	9303      	str	r3, [sp, #12]
 800bd36:	bfb8      	it	lt
 800bd38:	2301      	movlt	r3, #1
 800bd3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	6042      	str	r2, [r0, #4]
 800bd40:	2204      	movs	r2, #4
 800bd42:	f102 0614 	add.w	r6, r2, #20
 800bd46:	429e      	cmp	r6, r3
 800bd48:	6841      	ldr	r1, [r0, #4]
 800bd4a:	d93d      	bls.n	800bdc8 <_dtoa_r+0x318>
 800bd4c:	4620      	mov	r0, r4
 800bd4e:	f000 fcbb 	bl	800c6c8 <_Balloc>
 800bd52:	9001      	str	r0, [sp, #4]
 800bd54:	2800      	cmp	r0, #0
 800bd56:	d13b      	bne.n	800bdd0 <_dtoa_r+0x320>
 800bd58:	4b11      	ldr	r3, [pc, #68]	; (800bda0 <_dtoa_r+0x2f0>)
 800bd5a:	4602      	mov	r2, r0
 800bd5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bd60:	e6c0      	b.n	800bae4 <_dtoa_r+0x34>
 800bd62:	2301      	movs	r3, #1
 800bd64:	e7df      	b.n	800bd26 <_dtoa_r+0x276>
 800bd66:	bf00      	nop
 800bd68:	636f4361 	.word	0x636f4361
 800bd6c:	3fd287a7 	.word	0x3fd287a7
 800bd70:	8b60c8b3 	.word	0x8b60c8b3
 800bd74:	3fc68a28 	.word	0x3fc68a28
 800bd78:	509f79fb 	.word	0x509f79fb
 800bd7c:	3fd34413 	.word	0x3fd34413
 800bd80:	0800dd21 	.word	0x0800dd21
 800bd84:	0800dd38 	.word	0x0800dd38
 800bd88:	7ff00000 	.word	0x7ff00000
 800bd8c:	0800dd1d 	.word	0x0800dd1d
 800bd90:	0800dd14 	.word	0x0800dd14
 800bd94:	0800dcf1 	.word	0x0800dcf1
 800bd98:	3ff80000 	.word	0x3ff80000
 800bd9c:	0800de28 	.word	0x0800de28
 800bda0:	0800dd93 	.word	0x0800dd93
 800bda4:	2501      	movs	r5, #1
 800bda6:	2300      	movs	r3, #0
 800bda8:	9306      	str	r3, [sp, #24]
 800bdaa:	9508      	str	r5, [sp, #32]
 800bdac:	f04f 33ff 	mov.w	r3, #4294967295
 800bdb0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	2312      	movs	r3, #18
 800bdb8:	e7b0      	b.n	800bd1c <_dtoa_r+0x26c>
 800bdba:	2301      	movs	r3, #1
 800bdbc:	9308      	str	r3, [sp, #32]
 800bdbe:	e7f5      	b.n	800bdac <_dtoa_r+0x2fc>
 800bdc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdc2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bdc6:	e7b8      	b.n	800bd3a <_dtoa_r+0x28a>
 800bdc8:	3101      	adds	r1, #1
 800bdca:	6041      	str	r1, [r0, #4]
 800bdcc:	0052      	lsls	r2, r2, #1
 800bdce:	e7b8      	b.n	800bd42 <_dtoa_r+0x292>
 800bdd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdd2:	9a01      	ldr	r2, [sp, #4]
 800bdd4:	601a      	str	r2, [r3, #0]
 800bdd6:	9b03      	ldr	r3, [sp, #12]
 800bdd8:	2b0e      	cmp	r3, #14
 800bdda:	f200 809d 	bhi.w	800bf18 <_dtoa_r+0x468>
 800bdde:	2d00      	cmp	r5, #0
 800bde0:	f000 809a 	beq.w	800bf18 <_dtoa_r+0x468>
 800bde4:	9b00      	ldr	r3, [sp, #0]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	dd32      	ble.n	800be50 <_dtoa_r+0x3a0>
 800bdea:	4ab7      	ldr	r2, [pc, #732]	; (800c0c8 <_dtoa_r+0x618>)
 800bdec:	f003 030f 	and.w	r3, r3, #15
 800bdf0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bdf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bdf8:	9b00      	ldr	r3, [sp, #0]
 800bdfa:	05d8      	lsls	r0, r3, #23
 800bdfc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800be00:	d516      	bpl.n	800be30 <_dtoa_r+0x380>
 800be02:	4bb2      	ldr	r3, [pc, #712]	; (800c0cc <_dtoa_r+0x61c>)
 800be04:	ec51 0b19 	vmov	r0, r1, d9
 800be08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800be0c:	f7f4 fd1e 	bl	800084c <__aeabi_ddiv>
 800be10:	f007 070f 	and.w	r7, r7, #15
 800be14:	4682      	mov	sl, r0
 800be16:	468b      	mov	fp, r1
 800be18:	2503      	movs	r5, #3
 800be1a:	4eac      	ldr	r6, [pc, #688]	; (800c0cc <_dtoa_r+0x61c>)
 800be1c:	b957      	cbnz	r7, 800be34 <_dtoa_r+0x384>
 800be1e:	4642      	mov	r2, r8
 800be20:	464b      	mov	r3, r9
 800be22:	4650      	mov	r0, sl
 800be24:	4659      	mov	r1, fp
 800be26:	f7f4 fd11 	bl	800084c <__aeabi_ddiv>
 800be2a:	4682      	mov	sl, r0
 800be2c:	468b      	mov	fp, r1
 800be2e:	e028      	b.n	800be82 <_dtoa_r+0x3d2>
 800be30:	2502      	movs	r5, #2
 800be32:	e7f2      	b.n	800be1a <_dtoa_r+0x36a>
 800be34:	07f9      	lsls	r1, r7, #31
 800be36:	d508      	bpl.n	800be4a <_dtoa_r+0x39a>
 800be38:	4640      	mov	r0, r8
 800be3a:	4649      	mov	r1, r9
 800be3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800be40:	f7f4 fbda 	bl	80005f8 <__aeabi_dmul>
 800be44:	3501      	adds	r5, #1
 800be46:	4680      	mov	r8, r0
 800be48:	4689      	mov	r9, r1
 800be4a:	107f      	asrs	r7, r7, #1
 800be4c:	3608      	adds	r6, #8
 800be4e:	e7e5      	b.n	800be1c <_dtoa_r+0x36c>
 800be50:	f000 809b 	beq.w	800bf8a <_dtoa_r+0x4da>
 800be54:	9b00      	ldr	r3, [sp, #0]
 800be56:	4f9d      	ldr	r7, [pc, #628]	; (800c0cc <_dtoa_r+0x61c>)
 800be58:	425e      	negs	r6, r3
 800be5a:	4b9b      	ldr	r3, [pc, #620]	; (800c0c8 <_dtoa_r+0x618>)
 800be5c:	f006 020f 	and.w	r2, r6, #15
 800be60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be68:	ec51 0b19 	vmov	r0, r1, d9
 800be6c:	f7f4 fbc4 	bl	80005f8 <__aeabi_dmul>
 800be70:	1136      	asrs	r6, r6, #4
 800be72:	4682      	mov	sl, r0
 800be74:	468b      	mov	fp, r1
 800be76:	2300      	movs	r3, #0
 800be78:	2502      	movs	r5, #2
 800be7a:	2e00      	cmp	r6, #0
 800be7c:	d17a      	bne.n	800bf74 <_dtoa_r+0x4c4>
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d1d3      	bne.n	800be2a <_dtoa_r+0x37a>
 800be82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be84:	2b00      	cmp	r3, #0
 800be86:	f000 8082 	beq.w	800bf8e <_dtoa_r+0x4de>
 800be8a:	4b91      	ldr	r3, [pc, #580]	; (800c0d0 <_dtoa_r+0x620>)
 800be8c:	2200      	movs	r2, #0
 800be8e:	4650      	mov	r0, sl
 800be90:	4659      	mov	r1, fp
 800be92:	f7f4 fe23 	bl	8000adc <__aeabi_dcmplt>
 800be96:	2800      	cmp	r0, #0
 800be98:	d079      	beq.n	800bf8e <_dtoa_r+0x4de>
 800be9a:	9b03      	ldr	r3, [sp, #12]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d076      	beq.n	800bf8e <_dtoa_r+0x4de>
 800bea0:	9b02      	ldr	r3, [sp, #8]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	dd36      	ble.n	800bf14 <_dtoa_r+0x464>
 800bea6:	9b00      	ldr	r3, [sp, #0]
 800bea8:	4650      	mov	r0, sl
 800beaa:	4659      	mov	r1, fp
 800beac:	1e5f      	subs	r7, r3, #1
 800beae:	2200      	movs	r2, #0
 800beb0:	4b88      	ldr	r3, [pc, #544]	; (800c0d4 <_dtoa_r+0x624>)
 800beb2:	f7f4 fba1 	bl	80005f8 <__aeabi_dmul>
 800beb6:	9e02      	ldr	r6, [sp, #8]
 800beb8:	4682      	mov	sl, r0
 800beba:	468b      	mov	fp, r1
 800bebc:	3501      	adds	r5, #1
 800bebe:	4628      	mov	r0, r5
 800bec0:	f7f4 fb30 	bl	8000524 <__aeabi_i2d>
 800bec4:	4652      	mov	r2, sl
 800bec6:	465b      	mov	r3, fp
 800bec8:	f7f4 fb96 	bl	80005f8 <__aeabi_dmul>
 800becc:	4b82      	ldr	r3, [pc, #520]	; (800c0d8 <_dtoa_r+0x628>)
 800bece:	2200      	movs	r2, #0
 800bed0:	f7f4 f9dc 	bl	800028c <__adddf3>
 800bed4:	46d0      	mov	r8, sl
 800bed6:	46d9      	mov	r9, fp
 800bed8:	4682      	mov	sl, r0
 800beda:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bede:	2e00      	cmp	r6, #0
 800bee0:	d158      	bne.n	800bf94 <_dtoa_r+0x4e4>
 800bee2:	4b7e      	ldr	r3, [pc, #504]	; (800c0dc <_dtoa_r+0x62c>)
 800bee4:	2200      	movs	r2, #0
 800bee6:	4640      	mov	r0, r8
 800bee8:	4649      	mov	r1, r9
 800beea:	f7f4 f9cd 	bl	8000288 <__aeabi_dsub>
 800beee:	4652      	mov	r2, sl
 800bef0:	465b      	mov	r3, fp
 800bef2:	4680      	mov	r8, r0
 800bef4:	4689      	mov	r9, r1
 800bef6:	f7f4 fe0f 	bl	8000b18 <__aeabi_dcmpgt>
 800befa:	2800      	cmp	r0, #0
 800befc:	f040 8295 	bne.w	800c42a <_dtoa_r+0x97a>
 800bf00:	4652      	mov	r2, sl
 800bf02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bf06:	4640      	mov	r0, r8
 800bf08:	4649      	mov	r1, r9
 800bf0a:	f7f4 fde7 	bl	8000adc <__aeabi_dcmplt>
 800bf0e:	2800      	cmp	r0, #0
 800bf10:	f040 8289 	bne.w	800c426 <_dtoa_r+0x976>
 800bf14:	ec5b ab19 	vmov	sl, fp, d9
 800bf18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	f2c0 8148 	blt.w	800c1b0 <_dtoa_r+0x700>
 800bf20:	9a00      	ldr	r2, [sp, #0]
 800bf22:	2a0e      	cmp	r2, #14
 800bf24:	f300 8144 	bgt.w	800c1b0 <_dtoa_r+0x700>
 800bf28:	4b67      	ldr	r3, [pc, #412]	; (800c0c8 <_dtoa_r+0x618>)
 800bf2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bf32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	f280 80d5 	bge.w	800c0e4 <_dtoa_r+0x634>
 800bf3a:	9b03      	ldr	r3, [sp, #12]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	f300 80d1 	bgt.w	800c0e4 <_dtoa_r+0x634>
 800bf42:	f040 826f 	bne.w	800c424 <_dtoa_r+0x974>
 800bf46:	4b65      	ldr	r3, [pc, #404]	; (800c0dc <_dtoa_r+0x62c>)
 800bf48:	2200      	movs	r2, #0
 800bf4a:	4640      	mov	r0, r8
 800bf4c:	4649      	mov	r1, r9
 800bf4e:	f7f4 fb53 	bl	80005f8 <__aeabi_dmul>
 800bf52:	4652      	mov	r2, sl
 800bf54:	465b      	mov	r3, fp
 800bf56:	f7f4 fdd5 	bl	8000b04 <__aeabi_dcmpge>
 800bf5a:	9e03      	ldr	r6, [sp, #12]
 800bf5c:	4637      	mov	r7, r6
 800bf5e:	2800      	cmp	r0, #0
 800bf60:	f040 8245 	bne.w	800c3ee <_dtoa_r+0x93e>
 800bf64:	9d01      	ldr	r5, [sp, #4]
 800bf66:	2331      	movs	r3, #49	; 0x31
 800bf68:	f805 3b01 	strb.w	r3, [r5], #1
 800bf6c:	9b00      	ldr	r3, [sp, #0]
 800bf6e:	3301      	adds	r3, #1
 800bf70:	9300      	str	r3, [sp, #0]
 800bf72:	e240      	b.n	800c3f6 <_dtoa_r+0x946>
 800bf74:	07f2      	lsls	r2, r6, #31
 800bf76:	d505      	bpl.n	800bf84 <_dtoa_r+0x4d4>
 800bf78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf7c:	f7f4 fb3c 	bl	80005f8 <__aeabi_dmul>
 800bf80:	3501      	adds	r5, #1
 800bf82:	2301      	movs	r3, #1
 800bf84:	1076      	asrs	r6, r6, #1
 800bf86:	3708      	adds	r7, #8
 800bf88:	e777      	b.n	800be7a <_dtoa_r+0x3ca>
 800bf8a:	2502      	movs	r5, #2
 800bf8c:	e779      	b.n	800be82 <_dtoa_r+0x3d2>
 800bf8e:	9f00      	ldr	r7, [sp, #0]
 800bf90:	9e03      	ldr	r6, [sp, #12]
 800bf92:	e794      	b.n	800bebe <_dtoa_r+0x40e>
 800bf94:	9901      	ldr	r1, [sp, #4]
 800bf96:	4b4c      	ldr	r3, [pc, #304]	; (800c0c8 <_dtoa_r+0x618>)
 800bf98:	4431      	add	r1, r6
 800bf9a:	910d      	str	r1, [sp, #52]	; 0x34
 800bf9c:	9908      	ldr	r1, [sp, #32]
 800bf9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bfa2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bfa6:	2900      	cmp	r1, #0
 800bfa8:	d043      	beq.n	800c032 <_dtoa_r+0x582>
 800bfaa:	494d      	ldr	r1, [pc, #308]	; (800c0e0 <_dtoa_r+0x630>)
 800bfac:	2000      	movs	r0, #0
 800bfae:	f7f4 fc4d 	bl	800084c <__aeabi_ddiv>
 800bfb2:	4652      	mov	r2, sl
 800bfb4:	465b      	mov	r3, fp
 800bfb6:	f7f4 f967 	bl	8000288 <__aeabi_dsub>
 800bfba:	9d01      	ldr	r5, [sp, #4]
 800bfbc:	4682      	mov	sl, r0
 800bfbe:	468b      	mov	fp, r1
 800bfc0:	4649      	mov	r1, r9
 800bfc2:	4640      	mov	r0, r8
 800bfc4:	f7f4 fdc8 	bl	8000b58 <__aeabi_d2iz>
 800bfc8:	4606      	mov	r6, r0
 800bfca:	f7f4 faab 	bl	8000524 <__aeabi_i2d>
 800bfce:	4602      	mov	r2, r0
 800bfd0:	460b      	mov	r3, r1
 800bfd2:	4640      	mov	r0, r8
 800bfd4:	4649      	mov	r1, r9
 800bfd6:	f7f4 f957 	bl	8000288 <__aeabi_dsub>
 800bfda:	3630      	adds	r6, #48	; 0x30
 800bfdc:	f805 6b01 	strb.w	r6, [r5], #1
 800bfe0:	4652      	mov	r2, sl
 800bfe2:	465b      	mov	r3, fp
 800bfe4:	4680      	mov	r8, r0
 800bfe6:	4689      	mov	r9, r1
 800bfe8:	f7f4 fd78 	bl	8000adc <__aeabi_dcmplt>
 800bfec:	2800      	cmp	r0, #0
 800bfee:	d163      	bne.n	800c0b8 <_dtoa_r+0x608>
 800bff0:	4642      	mov	r2, r8
 800bff2:	464b      	mov	r3, r9
 800bff4:	4936      	ldr	r1, [pc, #216]	; (800c0d0 <_dtoa_r+0x620>)
 800bff6:	2000      	movs	r0, #0
 800bff8:	f7f4 f946 	bl	8000288 <__aeabi_dsub>
 800bffc:	4652      	mov	r2, sl
 800bffe:	465b      	mov	r3, fp
 800c000:	f7f4 fd6c 	bl	8000adc <__aeabi_dcmplt>
 800c004:	2800      	cmp	r0, #0
 800c006:	f040 80b5 	bne.w	800c174 <_dtoa_r+0x6c4>
 800c00a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c00c:	429d      	cmp	r5, r3
 800c00e:	d081      	beq.n	800bf14 <_dtoa_r+0x464>
 800c010:	4b30      	ldr	r3, [pc, #192]	; (800c0d4 <_dtoa_r+0x624>)
 800c012:	2200      	movs	r2, #0
 800c014:	4650      	mov	r0, sl
 800c016:	4659      	mov	r1, fp
 800c018:	f7f4 faee 	bl	80005f8 <__aeabi_dmul>
 800c01c:	4b2d      	ldr	r3, [pc, #180]	; (800c0d4 <_dtoa_r+0x624>)
 800c01e:	4682      	mov	sl, r0
 800c020:	468b      	mov	fp, r1
 800c022:	4640      	mov	r0, r8
 800c024:	4649      	mov	r1, r9
 800c026:	2200      	movs	r2, #0
 800c028:	f7f4 fae6 	bl	80005f8 <__aeabi_dmul>
 800c02c:	4680      	mov	r8, r0
 800c02e:	4689      	mov	r9, r1
 800c030:	e7c6      	b.n	800bfc0 <_dtoa_r+0x510>
 800c032:	4650      	mov	r0, sl
 800c034:	4659      	mov	r1, fp
 800c036:	f7f4 fadf 	bl	80005f8 <__aeabi_dmul>
 800c03a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c03c:	9d01      	ldr	r5, [sp, #4]
 800c03e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c040:	4682      	mov	sl, r0
 800c042:	468b      	mov	fp, r1
 800c044:	4649      	mov	r1, r9
 800c046:	4640      	mov	r0, r8
 800c048:	f7f4 fd86 	bl	8000b58 <__aeabi_d2iz>
 800c04c:	4606      	mov	r6, r0
 800c04e:	f7f4 fa69 	bl	8000524 <__aeabi_i2d>
 800c052:	3630      	adds	r6, #48	; 0x30
 800c054:	4602      	mov	r2, r0
 800c056:	460b      	mov	r3, r1
 800c058:	4640      	mov	r0, r8
 800c05a:	4649      	mov	r1, r9
 800c05c:	f7f4 f914 	bl	8000288 <__aeabi_dsub>
 800c060:	f805 6b01 	strb.w	r6, [r5], #1
 800c064:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c066:	429d      	cmp	r5, r3
 800c068:	4680      	mov	r8, r0
 800c06a:	4689      	mov	r9, r1
 800c06c:	f04f 0200 	mov.w	r2, #0
 800c070:	d124      	bne.n	800c0bc <_dtoa_r+0x60c>
 800c072:	4b1b      	ldr	r3, [pc, #108]	; (800c0e0 <_dtoa_r+0x630>)
 800c074:	4650      	mov	r0, sl
 800c076:	4659      	mov	r1, fp
 800c078:	f7f4 f908 	bl	800028c <__adddf3>
 800c07c:	4602      	mov	r2, r0
 800c07e:	460b      	mov	r3, r1
 800c080:	4640      	mov	r0, r8
 800c082:	4649      	mov	r1, r9
 800c084:	f7f4 fd48 	bl	8000b18 <__aeabi_dcmpgt>
 800c088:	2800      	cmp	r0, #0
 800c08a:	d173      	bne.n	800c174 <_dtoa_r+0x6c4>
 800c08c:	4652      	mov	r2, sl
 800c08e:	465b      	mov	r3, fp
 800c090:	4913      	ldr	r1, [pc, #76]	; (800c0e0 <_dtoa_r+0x630>)
 800c092:	2000      	movs	r0, #0
 800c094:	f7f4 f8f8 	bl	8000288 <__aeabi_dsub>
 800c098:	4602      	mov	r2, r0
 800c09a:	460b      	mov	r3, r1
 800c09c:	4640      	mov	r0, r8
 800c09e:	4649      	mov	r1, r9
 800c0a0:	f7f4 fd1c 	bl	8000adc <__aeabi_dcmplt>
 800c0a4:	2800      	cmp	r0, #0
 800c0a6:	f43f af35 	beq.w	800bf14 <_dtoa_r+0x464>
 800c0aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c0ac:	1e6b      	subs	r3, r5, #1
 800c0ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800c0b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c0b4:	2b30      	cmp	r3, #48	; 0x30
 800c0b6:	d0f8      	beq.n	800c0aa <_dtoa_r+0x5fa>
 800c0b8:	9700      	str	r7, [sp, #0]
 800c0ba:	e049      	b.n	800c150 <_dtoa_r+0x6a0>
 800c0bc:	4b05      	ldr	r3, [pc, #20]	; (800c0d4 <_dtoa_r+0x624>)
 800c0be:	f7f4 fa9b 	bl	80005f8 <__aeabi_dmul>
 800c0c2:	4680      	mov	r8, r0
 800c0c4:	4689      	mov	r9, r1
 800c0c6:	e7bd      	b.n	800c044 <_dtoa_r+0x594>
 800c0c8:	0800de28 	.word	0x0800de28
 800c0cc:	0800de00 	.word	0x0800de00
 800c0d0:	3ff00000 	.word	0x3ff00000
 800c0d4:	40240000 	.word	0x40240000
 800c0d8:	401c0000 	.word	0x401c0000
 800c0dc:	40140000 	.word	0x40140000
 800c0e0:	3fe00000 	.word	0x3fe00000
 800c0e4:	9d01      	ldr	r5, [sp, #4]
 800c0e6:	4656      	mov	r6, sl
 800c0e8:	465f      	mov	r7, fp
 800c0ea:	4642      	mov	r2, r8
 800c0ec:	464b      	mov	r3, r9
 800c0ee:	4630      	mov	r0, r6
 800c0f0:	4639      	mov	r1, r7
 800c0f2:	f7f4 fbab 	bl	800084c <__aeabi_ddiv>
 800c0f6:	f7f4 fd2f 	bl	8000b58 <__aeabi_d2iz>
 800c0fa:	4682      	mov	sl, r0
 800c0fc:	f7f4 fa12 	bl	8000524 <__aeabi_i2d>
 800c100:	4642      	mov	r2, r8
 800c102:	464b      	mov	r3, r9
 800c104:	f7f4 fa78 	bl	80005f8 <__aeabi_dmul>
 800c108:	4602      	mov	r2, r0
 800c10a:	460b      	mov	r3, r1
 800c10c:	4630      	mov	r0, r6
 800c10e:	4639      	mov	r1, r7
 800c110:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c114:	f7f4 f8b8 	bl	8000288 <__aeabi_dsub>
 800c118:	f805 6b01 	strb.w	r6, [r5], #1
 800c11c:	9e01      	ldr	r6, [sp, #4]
 800c11e:	9f03      	ldr	r7, [sp, #12]
 800c120:	1bae      	subs	r6, r5, r6
 800c122:	42b7      	cmp	r7, r6
 800c124:	4602      	mov	r2, r0
 800c126:	460b      	mov	r3, r1
 800c128:	d135      	bne.n	800c196 <_dtoa_r+0x6e6>
 800c12a:	f7f4 f8af 	bl	800028c <__adddf3>
 800c12e:	4642      	mov	r2, r8
 800c130:	464b      	mov	r3, r9
 800c132:	4606      	mov	r6, r0
 800c134:	460f      	mov	r7, r1
 800c136:	f7f4 fcef 	bl	8000b18 <__aeabi_dcmpgt>
 800c13a:	b9d0      	cbnz	r0, 800c172 <_dtoa_r+0x6c2>
 800c13c:	4642      	mov	r2, r8
 800c13e:	464b      	mov	r3, r9
 800c140:	4630      	mov	r0, r6
 800c142:	4639      	mov	r1, r7
 800c144:	f7f4 fcc0 	bl	8000ac8 <__aeabi_dcmpeq>
 800c148:	b110      	cbz	r0, 800c150 <_dtoa_r+0x6a0>
 800c14a:	f01a 0f01 	tst.w	sl, #1
 800c14e:	d110      	bne.n	800c172 <_dtoa_r+0x6c2>
 800c150:	4620      	mov	r0, r4
 800c152:	ee18 1a10 	vmov	r1, s16
 800c156:	f000 faf7 	bl	800c748 <_Bfree>
 800c15a:	2300      	movs	r3, #0
 800c15c:	9800      	ldr	r0, [sp, #0]
 800c15e:	702b      	strb	r3, [r5, #0]
 800c160:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c162:	3001      	adds	r0, #1
 800c164:	6018      	str	r0, [r3, #0]
 800c166:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c168:	2b00      	cmp	r3, #0
 800c16a:	f43f acf1 	beq.w	800bb50 <_dtoa_r+0xa0>
 800c16e:	601d      	str	r5, [r3, #0]
 800c170:	e4ee      	b.n	800bb50 <_dtoa_r+0xa0>
 800c172:	9f00      	ldr	r7, [sp, #0]
 800c174:	462b      	mov	r3, r5
 800c176:	461d      	mov	r5, r3
 800c178:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c17c:	2a39      	cmp	r2, #57	; 0x39
 800c17e:	d106      	bne.n	800c18e <_dtoa_r+0x6de>
 800c180:	9a01      	ldr	r2, [sp, #4]
 800c182:	429a      	cmp	r2, r3
 800c184:	d1f7      	bne.n	800c176 <_dtoa_r+0x6c6>
 800c186:	9901      	ldr	r1, [sp, #4]
 800c188:	2230      	movs	r2, #48	; 0x30
 800c18a:	3701      	adds	r7, #1
 800c18c:	700a      	strb	r2, [r1, #0]
 800c18e:	781a      	ldrb	r2, [r3, #0]
 800c190:	3201      	adds	r2, #1
 800c192:	701a      	strb	r2, [r3, #0]
 800c194:	e790      	b.n	800c0b8 <_dtoa_r+0x608>
 800c196:	4ba6      	ldr	r3, [pc, #664]	; (800c430 <_dtoa_r+0x980>)
 800c198:	2200      	movs	r2, #0
 800c19a:	f7f4 fa2d 	bl	80005f8 <__aeabi_dmul>
 800c19e:	2200      	movs	r2, #0
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	4606      	mov	r6, r0
 800c1a4:	460f      	mov	r7, r1
 800c1a6:	f7f4 fc8f 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1aa:	2800      	cmp	r0, #0
 800c1ac:	d09d      	beq.n	800c0ea <_dtoa_r+0x63a>
 800c1ae:	e7cf      	b.n	800c150 <_dtoa_r+0x6a0>
 800c1b0:	9a08      	ldr	r2, [sp, #32]
 800c1b2:	2a00      	cmp	r2, #0
 800c1b4:	f000 80d7 	beq.w	800c366 <_dtoa_r+0x8b6>
 800c1b8:	9a06      	ldr	r2, [sp, #24]
 800c1ba:	2a01      	cmp	r2, #1
 800c1bc:	f300 80ba 	bgt.w	800c334 <_dtoa_r+0x884>
 800c1c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c1c2:	2a00      	cmp	r2, #0
 800c1c4:	f000 80b2 	beq.w	800c32c <_dtoa_r+0x87c>
 800c1c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c1cc:	9e07      	ldr	r6, [sp, #28]
 800c1ce:	9d04      	ldr	r5, [sp, #16]
 800c1d0:	9a04      	ldr	r2, [sp, #16]
 800c1d2:	441a      	add	r2, r3
 800c1d4:	9204      	str	r2, [sp, #16]
 800c1d6:	9a05      	ldr	r2, [sp, #20]
 800c1d8:	2101      	movs	r1, #1
 800c1da:	441a      	add	r2, r3
 800c1dc:	4620      	mov	r0, r4
 800c1de:	9205      	str	r2, [sp, #20]
 800c1e0:	f000 fb6a 	bl	800c8b8 <__i2b>
 800c1e4:	4607      	mov	r7, r0
 800c1e6:	2d00      	cmp	r5, #0
 800c1e8:	dd0c      	ble.n	800c204 <_dtoa_r+0x754>
 800c1ea:	9b05      	ldr	r3, [sp, #20]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	dd09      	ble.n	800c204 <_dtoa_r+0x754>
 800c1f0:	42ab      	cmp	r3, r5
 800c1f2:	9a04      	ldr	r2, [sp, #16]
 800c1f4:	bfa8      	it	ge
 800c1f6:	462b      	movge	r3, r5
 800c1f8:	1ad2      	subs	r2, r2, r3
 800c1fa:	9204      	str	r2, [sp, #16]
 800c1fc:	9a05      	ldr	r2, [sp, #20]
 800c1fe:	1aed      	subs	r5, r5, r3
 800c200:	1ad3      	subs	r3, r2, r3
 800c202:	9305      	str	r3, [sp, #20]
 800c204:	9b07      	ldr	r3, [sp, #28]
 800c206:	b31b      	cbz	r3, 800c250 <_dtoa_r+0x7a0>
 800c208:	9b08      	ldr	r3, [sp, #32]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	f000 80af 	beq.w	800c36e <_dtoa_r+0x8be>
 800c210:	2e00      	cmp	r6, #0
 800c212:	dd13      	ble.n	800c23c <_dtoa_r+0x78c>
 800c214:	4639      	mov	r1, r7
 800c216:	4632      	mov	r2, r6
 800c218:	4620      	mov	r0, r4
 800c21a:	f000 fc0d 	bl	800ca38 <__pow5mult>
 800c21e:	ee18 2a10 	vmov	r2, s16
 800c222:	4601      	mov	r1, r0
 800c224:	4607      	mov	r7, r0
 800c226:	4620      	mov	r0, r4
 800c228:	f000 fb5c 	bl	800c8e4 <__multiply>
 800c22c:	ee18 1a10 	vmov	r1, s16
 800c230:	4680      	mov	r8, r0
 800c232:	4620      	mov	r0, r4
 800c234:	f000 fa88 	bl	800c748 <_Bfree>
 800c238:	ee08 8a10 	vmov	s16, r8
 800c23c:	9b07      	ldr	r3, [sp, #28]
 800c23e:	1b9a      	subs	r2, r3, r6
 800c240:	d006      	beq.n	800c250 <_dtoa_r+0x7a0>
 800c242:	ee18 1a10 	vmov	r1, s16
 800c246:	4620      	mov	r0, r4
 800c248:	f000 fbf6 	bl	800ca38 <__pow5mult>
 800c24c:	ee08 0a10 	vmov	s16, r0
 800c250:	2101      	movs	r1, #1
 800c252:	4620      	mov	r0, r4
 800c254:	f000 fb30 	bl	800c8b8 <__i2b>
 800c258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	4606      	mov	r6, r0
 800c25e:	f340 8088 	ble.w	800c372 <_dtoa_r+0x8c2>
 800c262:	461a      	mov	r2, r3
 800c264:	4601      	mov	r1, r0
 800c266:	4620      	mov	r0, r4
 800c268:	f000 fbe6 	bl	800ca38 <__pow5mult>
 800c26c:	9b06      	ldr	r3, [sp, #24]
 800c26e:	2b01      	cmp	r3, #1
 800c270:	4606      	mov	r6, r0
 800c272:	f340 8081 	ble.w	800c378 <_dtoa_r+0x8c8>
 800c276:	f04f 0800 	mov.w	r8, #0
 800c27a:	6933      	ldr	r3, [r6, #16]
 800c27c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c280:	6918      	ldr	r0, [r3, #16]
 800c282:	f000 fac9 	bl	800c818 <__hi0bits>
 800c286:	f1c0 0020 	rsb	r0, r0, #32
 800c28a:	9b05      	ldr	r3, [sp, #20]
 800c28c:	4418      	add	r0, r3
 800c28e:	f010 001f 	ands.w	r0, r0, #31
 800c292:	f000 8092 	beq.w	800c3ba <_dtoa_r+0x90a>
 800c296:	f1c0 0320 	rsb	r3, r0, #32
 800c29a:	2b04      	cmp	r3, #4
 800c29c:	f340 808a 	ble.w	800c3b4 <_dtoa_r+0x904>
 800c2a0:	f1c0 001c 	rsb	r0, r0, #28
 800c2a4:	9b04      	ldr	r3, [sp, #16]
 800c2a6:	4403      	add	r3, r0
 800c2a8:	9304      	str	r3, [sp, #16]
 800c2aa:	9b05      	ldr	r3, [sp, #20]
 800c2ac:	4403      	add	r3, r0
 800c2ae:	4405      	add	r5, r0
 800c2b0:	9305      	str	r3, [sp, #20]
 800c2b2:	9b04      	ldr	r3, [sp, #16]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	dd07      	ble.n	800c2c8 <_dtoa_r+0x818>
 800c2b8:	ee18 1a10 	vmov	r1, s16
 800c2bc:	461a      	mov	r2, r3
 800c2be:	4620      	mov	r0, r4
 800c2c0:	f000 fc14 	bl	800caec <__lshift>
 800c2c4:	ee08 0a10 	vmov	s16, r0
 800c2c8:	9b05      	ldr	r3, [sp, #20]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	dd05      	ble.n	800c2da <_dtoa_r+0x82a>
 800c2ce:	4631      	mov	r1, r6
 800c2d0:	461a      	mov	r2, r3
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	f000 fc0a 	bl	800caec <__lshift>
 800c2d8:	4606      	mov	r6, r0
 800c2da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d06e      	beq.n	800c3be <_dtoa_r+0x90e>
 800c2e0:	ee18 0a10 	vmov	r0, s16
 800c2e4:	4631      	mov	r1, r6
 800c2e6:	f000 fc71 	bl	800cbcc <__mcmp>
 800c2ea:	2800      	cmp	r0, #0
 800c2ec:	da67      	bge.n	800c3be <_dtoa_r+0x90e>
 800c2ee:	9b00      	ldr	r3, [sp, #0]
 800c2f0:	3b01      	subs	r3, #1
 800c2f2:	ee18 1a10 	vmov	r1, s16
 800c2f6:	9300      	str	r3, [sp, #0]
 800c2f8:	220a      	movs	r2, #10
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	4620      	mov	r0, r4
 800c2fe:	f000 fa45 	bl	800c78c <__multadd>
 800c302:	9b08      	ldr	r3, [sp, #32]
 800c304:	ee08 0a10 	vmov	s16, r0
 800c308:	2b00      	cmp	r3, #0
 800c30a:	f000 81b1 	beq.w	800c670 <_dtoa_r+0xbc0>
 800c30e:	2300      	movs	r3, #0
 800c310:	4639      	mov	r1, r7
 800c312:	220a      	movs	r2, #10
 800c314:	4620      	mov	r0, r4
 800c316:	f000 fa39 	bl	800c78c <__multadd>
 800c31a:	9b02      	ldr	r3, [sp, #8]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	4607      	mov	r7, r0
 800c320:	f300 808e 	bgt.w	800c440 <_dtoa_r+0x990>
 800c324:	9b06      	ldr	r3, [sp, #24]
 800c326:	2b02      	cmp	r3, #2
 800c328:	dc51      	bgt.n	800c3ce <_dtoa_r+0x91e>
 800c32a:	e089      	b.n	800c440 <_dtoa_r+0x990>
 800c32c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c32e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c332:	e74b      	b.n	800c1cc <_dtoa_r+0x71c>
 800c334:	9b03      	ldr	r3, [sp, #12]
 800c336:	1e5e      	subs	r6, r3, #1
 800c338:	9b07      	ldr	r3, [sp, #28]
 800c33a:	42b3      	cmp	r3, r6
 800c33c:	bfbf      	itttt	lt
 800c33e:	9b07      	ldrlt	r3, [sp, #28]
 800c340:	9607      	strlt	r6, [sp, #28]
 800c342:	1af2      	sublt	r2, r6, r3
 800c344:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c346:	bfb6      	itet	lt
 800c348:	189b      	addlt	r3, r3, r2
 800c34a:	1b9e      	subge	r6, r3, r6
 800c34c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c34e:	9b03      	ldr	r3, [sp, #12]
 800c350:	bfb8      	it	lt
 800c352:	2600      	movlt	r6, #0
 800c354:	2b00      	cmp	r3, #0
 800c356:	bfb7      	itett	lt
 800c358:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c35c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c360:	1a9d      	sublt	r5, r3, r2
 800c362:	2300      	movlt	r3, #0
 800c364:	e734      	b.n	800c1d0 <_dtoa_r+0x720>
 800c366:	9e07      	ldr	r6, [sp, #28]
 800c368:	9d04      	ldr	r5, [sp, #16]
 800c36a:	9f08      	ldr	r7, [sp, #32]
 800c36c:	e73b      	b.n	800c1e6 <_dtoa_r+0x736>
 800c36e:	9a07      	ldr	r2, [sp, #28]
 800c370:	e767      	b.n	800c242 <_dtoa_r+0x792>
 800c372:	9b06      	ldr	r3, [sp, #24]
 800c374:	2b01      	cmp	r3, #1
 800c376:	dc18      	bgt.n	800c3aa <_dtoa_r+0x8fa>
 800c378:	f1ba 0f00 	cmp.w	sl, #0
 800c37c:	d115      	bne.n	800c3aa <_dtoa_r+0x8fa>
 800c37e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c382:	b993      	cbnz	r3, 800c3aa <_dtoa_r+0x8fa>
 800c384:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c388:	0d1b      	lsrs	r3, r3, #20
 800c38a:	051b      	lsls	r3, r3, #20
 800c38c:	b183      	cbz	r3, 800c3b0 <_dtoa_r+0x900>
 800c38e:	9b04      	ldr	r3, [sp, #16]
 800c390:	3301      	adds	r3, #1
 800c392:	9304      	str	r3, [sp, #16]
 800c394:	9b05      	ldr	r3, [sp, #20]
 800c396:	3301      	adds	r3, #1
 800c398:	9305      	str	r3, [sp, #20]
 800c39a:	f04f 0801 	mov.w	r8, #1
 800c39e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	f47f af6a 	bne.w	800c27a <_dtoa_r+0x7ca>
 800c3a6:	2001      	movs	r0, #1
 800c3a8:	e76f      	b.n	800c28a <_dtoa_r+0x7da>
 800c3aa:	f04f 0800 	mov.w	r8, #0
 800c3ae:	e7f6      	b.n	800c39e <_dtoa_r+0x8ee>
 800c3b0:	4698      	mov	r8, r3
 800c3b2:	e7f4      	b.n	800c39e <_dtoa_r+0x8ee>
 800c3b4:	f43f af7d 	beq.w	800c2b2 <_dtoa_r+0x802>
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	301c      	adds	r0, #28
 800c3bc:	e772      	b.n	800c2a4 <_dtoa_r+0x7f4>
 800c3be:	9b03      	ldr	r3, [sp, #12]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	dc37      	bgt.n	800c434 <_dtoa_r+0x984>
 800c3c4:	9b06      	ldr	r3, [sp, #24]
 800c3c6:	2b02      	cmp	r3, #2
 800c3c8:	dd34      	ble.n	800c434 <_dtoa_r+0x984>
 800c3ca:	9b03      	ldr	r3, [sp, #12]
 800c3cc:	9302      	str	r3, [sp, #8]
 800c3ce:	9b02      	ldr	r3, [sp, #8]
 800c3d0:	b96b      	cbnz	r3, 800c3ee <_dtoa_r+0x93e>
 800c3d2:	4631      	mov	r1, r6
 800c3d4:	2205      	movs	r2, #5
 800c3d6:	4620      	mov	r0, r4
 800c3d8:	f000 f9d8 	bl	800c78c <__multadd>
 800c3dc:	4601      	mov	r1, r0
 800c3de:	4606      	mov	r6, r0
 800c3e0:	ee18 0a10 	vmov	r0, s16
 800c3e4:	f000 fbf2 	bl	800cbcc <__mcmp>
 800c3e8:	2800      	cmp	r0, #0
 800c3ea:	f73f adbb 	bgt.w	800bf64 <_dtoa_r+0x4b4>
 800c3ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3f0:	9d01      	ldr	r5, [sp, #4]
 800c3f2:	43db      	mvns	r3, r3
 800c3f4:	9300      	str	r3, [sp, #0]
 800c3f6:	f04f 0800 	mov.w	r8, #0
 800c3fa:	4631      	mov	r1, r6
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	f000 f9a3 	bl	800c748 <_Bfree>
 800c402:	2f00      	cmp	r7, #0
 800c404:	f43f aea4 	beq.w	800c150 <_dtoa_r+0x6a0>
 800c408:	f1b8 0f00 	cmp.w	r8, #0
 800c40c:	d005      	beq.n	800c41a <_dtoa_r+0x96a>
 800c40e:	45b8      	cmp	r8, r7
 800c410:	d003      	beq.n	800c41a <_dtoa_r+0x96a>
 800c412:	4641      	mov	r1, r8
 800c414:	4620      	mov	r0, r4
 800c416:	f000 f997 	bl	800c748 <_Bfree>
 800c41a:	4639      	mov	r1, r7
 800c41c:	4620      	mov	r0, r4
 800c41e:	f000 f993 	bl	800c748 <_Bfree>
 800c422:	e695      	b.n	800c150 <_dtoa_r+0x6a0>
 800c424:	2600      	movs	r6, #0
 800c426:	4637      	mov	r7, r6
 800c428:	e7e1      	b.n	800c3ee <_dtoa_r+0x93e>
 800c42a:	9700      	str	r7, [sp, #0]
 800c42c:	4637      	mov	r7, r6
 800c42e:	e599      	b.n	800bf64 <_dtoa_r+0x4b4>
 800c430:	40240000 	.word	0x40240000
 800c434:	9b08      	ldr	r3, [sp, #32]
 800c436:	2b00      	cmp	r3, #0
 800c438:	f000 80ca 	beq.w	800c5d0 <_dtoa_r+0xb20>
 800c43c:	9b03      	ldr	r3, [sp, #12]
 800c43e:	9302      	str	r3, [sp, #8]
 800c440:	2d00      	cmp	r5, #0
 800c442:	dd05      	ble.n	800c450 <_dtoa_r+0x9a0>
 800c444:	4639      	mov	r1, r7
 800c446:	462a      	mov	r2, r5
 800c448:	4620      	mov	r0, r4
 800c44a:	f000 fb4f 	bl	800caec <__lshift>
 800c44e:	4607      	mov	r7, r0
 800c450:	f1b8 0f00 	cmp.w	r8, #0
 800c454:	d05b      	beq.n	800c50e <_dtoa_r+0xa5e>
 800c456:	6879      	ldr	r1, [r7, #4]
 800c458:	4620      	mov	r0, r4
 800c45a:	f000 f935 	bl	800c6c8 <_Balloc>
 800c45e:	4605      	mov	r5, r0
 800c460:	b928      	cbnz	r0, 800c46e <_dtoa_r+0x9be>
 800c462:	4b87      	ldr	r3, [pc, #540]	; (800c680 <_dtoa_r+0xbd0>)
 800c464:	4602      	mov	r2, r0
 800c466:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c46a:	f7ff bb3b 	b.w	800bae4 <_dtoa_r+0x34>
 800c46e:	693a      	ldr	r2, [r7, #16]
 800c470:	3202      	adds	r2, #2
 800c472:	0092      	lsls	r2, r2, #2
 800c474:	f107 010c 	add.w	r1, r7, #12
 800c478:	300c      	adds	r0, #12
 800c47a:	f000 f90b 	bl	800c694 <memcpy>
 800c47e:	2201      	movs	r2, #1
 800c480:	4629      	mov	r1, r5
 800c482:	4620      	mov	r0, r4
 800c484:	f000 fb32 	bl	800caec <__lshift>
 800c488:	9b01      	ldr	r3, [sp, #4]
 800c48a:	f103 0901 	add.w	r9, r3, #1
 800c48e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c492:	4413      	add	r3, r2
 800c494:	9305      	str	r3, [sp, #20]
 800c496:	f00a 0301 	and.w	r3, sl, #1
 800c49a:	46b8      	mov	r8, r7
 800c49c:	9304      	str	r3, [sp, #16]
 800c49e:	4607      	mov	r7, r0
 800c4a0:	4631      	mov	r1, r6
 800c4a2:	ee18 0a10 	vmov	r0, s16
 800c4a6:	f7ff fa75 	bl	800b994 <quorem>
 800c4aa:	4641      	mov	r1, r8
 800c4ac:	9002      	str	r0, [sp, #8]
 800c4ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c4b2:	ee18 0a10 	vmov	r0, s16
 800c4b6:	f000 fb89 	bl	800cbcc <__mcmp>
 800c4ba:	463a      	mov	r2, r7
 800c4bc:	9003      	str	r0, [sp, #12]
 800c4be:	4631      	mov	r1, r6
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	f000 fb9f 	bl	800cc04 <__mdiff>
 800c4c6:	68c2      	ldr	r2, [r0, #12]
 800c4c8:	f109 3bff 	add.w	fp, r9, #4294967295
 800c4cc:	4605      	mov	r5, r0
 800c4ce:	bb02      	cbnz	r2, 800c512 <_dtoa_r+0xa62>
 800c4d0:	4601      	mov	r1, r0
 800c4d2:	ee18 0a10 	vmov	r0, s16
 800c4d6:	f000 fb79 	bl	800cbcc <__mcmp>
 800c4da:	4602      	mov	r2, r0
 800c4dc:	4629      	mov	r1, r5
 800c4de:	4620      	mov	r0, r4
 800c4e0:	9207      	str	r2, [sp, #28]
 800c4e2:	f000 f931 	bl	800c748 <_Bfree>
 800c4e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c4ea:	ea43 0102 	orr.w	r1, r3, r2
 800c4ee:	9b04      	ldr	r3, [sp, #16]
 800c4f0:	430b      	orrs	r3, r1
 800c4f2:	464d      	mov	r5, r9
 800c4f4:	d10f      	bne.n	800c516 <_dtoa_r+0xa66>
 800c4f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c4fa:	d02a      	beq.n	800c552 <_dtoa_r+0xaa2>
 800c4fc:	9b03      	ldr	r3, [sp, #12]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	dd02      	ble.n	800c508 <_dtoa_r+0xa58>
 800c502:	9b02      	ldr	r3, [sp, #8]
 800c504:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c508:	f88b a000 	strb.w	sl, [fp]
 800c50c:	e775      	b.n	800c3fa <_dtoa_r+0x94a>
 800c50e:	4638      	mov	r0, r7
 800c510:	e7ba      	b.n	800c488 <_dtoa_r+0x9d8>
 800c512:	2201      	movs	r2, #1
 800c514:	e7e2      	b.n	800c4dc <_dtoa_r+0xa2c>
 800c516:	9b03      	ldr	r3, [sp, #12]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	db04      	blt.n	800c526 <_dtoa_r+0xa76>
 800c51c:	9906      	ldr	r1, [sp, #24]
 800c51e:	430b      	orrs	r3, r1
 800c520:	9904      	ldr	r1, [sp, #16]
 800c522:	430b      	orrs	r3, r1
 800c524:	d122      	bne.n	800c56c <_dtoa_r+0xabc>
 800c526:	2a00      	cmp	r2, #0
 800c528:	ddee      	ble.n	800c508 <_dtoa_r+0xa58>
 800c52a:	ee18 1a10 	vmov	r1, s16
 800c52e:	2201      	movs	r2, #1
 800c530:	4620      	mov	r0, r4
 800c532:	f000 fadb 	bl	800caec <__lshift>
 800c536:	4631      	mov	r1, r6
 800c538:	ee08 0a10 	vmov	s16, r0
 800c53c:	f000 fb46 	bl	800cbcc <__mcmp>
 800c540:	2800      	cmp	r0, #0
 800c542:	dc03      	bgt.n	800c54c <_dtoa_r+0xa9c>
 800c544:	d1e0      	bne.n	800c508 <_dtoa_r+0xa58>
 800c546:	f01a 0f01 	tst.w	sl, #1
 800c54a:	d0dd      	beq.n	800c508 <_dtoa_r+0xa58>
 800c54c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c550:	d1d7      	bne.n	800c502 <_dtoa_r+0xa52>
 800c552:	2339      	movs	r3, #57	; 0x39
 800c554:	f88b 3000 	strb.w	r3, [fp]
 800c558:	462b      	mov	r3, r5
 800c55a:	461d      	mov	r5, r3
 800c55c:	3b01      	subs	r3, #1
 800c55e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c562:	2a39      	cmp	r2, #57	; 0x39
 800c564:	d071      	beq.n	800c64a <_dtoa_r+0xb9a>
 800c566:	3201      	adds	r2, #1
 800c568:	701a      	strb	r2, [r3, #0]
 800c56a:	e746      	b.n	800c3fa <_dtoa_r+0x94a>
 800c56c:	2a00      	cmp	r2, #0
 800c56e:	dd07      	ble.n	800c580 <_dtoa_r+0xad0>
 800c570:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c574:	d0ed      	beq.n	800c552 <_dtoa_r+0xaa2>
 800c576:	f10a 0301 	add.w	r3, sl, #1
 800c57a:	f88b 3000 	strb.w	r3, [fp]
 800c57e:	e73c      	b.n	800c3fa <_dtoa_r+0x94a>
 800c580:	9b05      	ldr	r3, [sp, #20]
 800c582:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c586:	4599      	cmp	r9, r3
 800c588:	d047      	beq.n	800c61a <_dtoa_r+0xb6a>
 800c58a:	ee18 1a10 	vmov	r1, s16
 800c58e:	2300      	movs	r3, #0
 800c590:	220a      	movs	r2, #10
 800c592:	4620      	mov	r0, r4
 800c594:	f000 f8fa 	bl	800c78c <__multadd>
 800c598:	45b8      	cmp	r8, r7
 800c59a:	ee08 0a10 	vmov	s16, r0
 800c59e:	f04f 0300 	mov.w	r3, #0
 800c5a2:	f04f 020a 	mov.w	r2, #10
 800c5a6:	4641      	mov	r1, r8
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	d106      	bne.n	800c5ba <_dtoa_r+0xb0a>
 800c5ac:	f000 f8ee 	bl	800c78c <__multadd>
 800c5b0:	4680      	mov	r8, r0
 800c5b2:	4607      	mov	r7, r0
 800c5b4:	f109 0901 	add.w	r9, r9, #1
 800c5b8:	e772      	b.n	800c4a0 <_dtoa_r+0x9f0>
 800c5ba:	f000 f8e7 	bl	800c78c <__multadd>
 800c5be:	4639      	mov	r1, r7
 800c5c0:	4680      	mov	r8, r0
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	220a      	movs	r2, #10
 800c5c6:	4620      	mov	r0, r4
 800c5c8:	f000 f8e0 	bl	800c78c <__multadd>
 800c5cc:	4607      	mov	r7, r0
 800c5ce:	e7f1      	b.n	800c5b4 <_dtoa_r+0xb04>
 800c5d0:	9b03      	ldr	r3, [sp, #12]
 800c5d2:	9302      	str	r3, [sp, #8]
 800c5d4:	9d01      	ldr	r5, [sp, #4]
 800c5d6:	ee18 0a10 	vmov	r0, s16
 800c5da:	4631      	mov	r1, r6
 800c5dc:	f7ff f9da 	bl	800b994 <quorem>
 800c5e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c5e4:	9b01      	ldr	r3, [sp, #4]
 800c5e6:	f805 ab01 	strb.w	sl, [r5], #1
 800c5ea:	1aea      	subs	r2, r5, r3
 800c5ec:	9b02      	ldr	r3, [sp, #8]
 800c5ee:	4293      	cmp	r3, r2
 800c5f0:	dd09      	ble.n	800c606 <_dtoa_r+0xb56>
 800c5f2:	ee18 1a10 	vmov	r1, s16
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	220a      	movs	r2, #10
 800c5fa:	4620      	mov	r0, r4
 800c5fc:	f000 f8c6 	bl	800c78c <__multadd>
 800c600:	ee08 0a10 	vmov	s16, r0
 800c604:	e7e7      	b.n	800c5d6 <_dtoa_r+0xb26>
 800c606:	9b02      	ldr	r3, [sp, #8]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	bfc8      	it	gt
 800c60c:	461d      	movgt	r5, r3
 800c60e:	9b01      	ldr	r3, [sp, #4]
 800c610:	bfd8      	it	le
 800c612:	2501      	movle	r5, #1
 800c614:	441d      	add	r5, r3
 800c616:	f04f 0800 	mov.w	r8, #0
 800c61a:	ee18 1a10 	vmov	r1, s16
 800c61e:	2201      	movs	r2, #1
 800c620:	4620      	mov	r0, r4
 800c622:	f000 fa63 	bl	800caec <__lshift>
 800c626:	4631      	mov	r1, r6
 800c628:	ee08 0a10 	vmov	s16, r0
 800c62c:	f000 face 	bl	800cbcc <__mcmp>
 800c630:	2800      	cmp	r0, #0
 800c632:	dc91      	bgt.n	800c558 <_dtoa_r+0xaa8>
 800c634:	d102      	bne.n	800c63c <_dtoa_r+0xb8c>
 800c636:	f01a 0f01 	tst.w	sl, #1
 800c63a:	d18d      	bne.n	800c558 <_dtoa_r+0xaa8>
 800c63c:	462b      	mov	r3, r5
 800c63e:	461d      	mov	r5, r3
 800c640:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c644:	2a30      	cmp	r2, #48	; 0x30
 800c646:	d0fa      	beq.n	800c63e <_dtoa_r+0xb8e>
 800c648:	e6d7      	b.n	800c3fa <_dtoa_r+0x94a>
 800c64a:	9a01      	ldr	r2, [sp, #4]
 800c64c:	429a      	cmp	r2, r3
 800c64e:	d184      	bne.n	800c55a <_dtoa_r+0xaaa>
 800c650:	9b00      	ldr	r3, [sp, #0]
 800c652:	3301      	adds	r3, #1
 800c654:	9300      	str	r3, [sp, #0]
 800c656:	2331      	movs	r3, #49	; 0x31
 800c658:	7013      	strb	r3, [r2, #0]
 800c65a:	e6ce      	b.n	800c3fa <_dtoa_r+0x94a>
 800c65c:	4b09      	ldr	r3, [pc, #36]	; (800c684 <_dtoa_r+0xbd4>)
 800c65e:	f7ff ba95 	b.w	800bb8c <_dtoa_r+0xdc>
 800c662:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c664:	2b00      	cmp	r3, #0
 800c666:	f47f aa6e 	bne.w	800bb46 <_dtoa_r+0x96>
 800c66a:	4b07      	ldr	r3, [pc, #28]	; (800c688 <_dtoa_r+0xbd8>)
 800c66c:	f7ff ba8e 	b.w	800bb8c <_dtoa_r+0xdc>
 800c670:	9b02      	ldr	r3, [sp, #8]
 800c672:	2b00      	cmp	r3, #0
 800c674:	dcae      	bgt.n	800c5d4 <_dtoa_r+0xb24>
 800c676:	9b06      	ldr	r3, [sp, #24]
 800c678:	2b02      	cmp	r3, #2
 800c67a:	f73f aea8 	bgt.w	800c3ce <_dtoa_r+0x91e>
 800c67e:	e7a9      	b.n	800c5d4 <_dtoa_r+0xb24>
 800c680:	0800dd93 	.word	0x0800dd93
 800c684:	0800dcf0 	.word	0x0800dcf0
 800c688:	0800dd14 	.word	0x0800dd14

0800c68c <_localeconv_r>:
 800c68c:	4800      	ldr	r0, [pc, #0]	; (800c690 <_localeconv_r+0x4>)
 800c68e:	4770      	bx	lr
 800c690:	20000250 	.word	0x20000250

0800c694 <memcpy>:
 800c694:	440a      	add	r2, r1
 800c696:	4291      	cmp	r1, r2
 800c698:	f100 33ff 	add.w	r3, r0, #4294967295
 800c69c:	d100      	bne.n	800c6a0 <memcpy+0xc>
 800c69e:	4770      	bx	lr
 800c6a0:	b510      	push	{r4, lr}
 800c6a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6aa:	4291      	cmp	r1, r2
 800c6ac:	d1f9      	bne.n	800c6a2 <memcpy+0xe>
 800c6ae:	bd10      	pop	{r4, pc}

0800c6b0 <__malloc_lock>:
 800c6b0:	4801      	ldr	r0, [pc, #4]	; (800c6b8 <__malloc_lock+0x8>)
 800c6b2:	f000 bd30 	b.w	800d116 <__retarget_lock_acquire_recursive>
 800c6b6:	bf00      	nop
 800c6b8:	20001fa0 	.word	0x20001fa0

0800c6bc <__malloc_unlock>:
 800c6bc:	4801      	ldr	r0, [pc, #4]	; (800c6c4 <__malloc_unlock+0x8>)
 800c6be:	f000 bd2b 	b.w	800d118 <__retarget_lock_release_recursive>
 800c6c2:	bf00      	nop
 800c6c4:	20001fa0 	.word	0x20001fa0

0800c6c8 <_Balloc>:
 800c6c8:	b570      	push	{r4, r5, r6, lr}
 800c6ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c6cc:	4604      	mov	r4, r0
 800c6ce:	460d      	mov	r5, r1
 800c6d0:	b976      	cbnz	r6, 800c6f0 <_Balloc+0x28>
 800c6d2:	2010      	movs	r0, #16
 800c6d4:	f7fe fbcc 	bl	800ae70 <malloc>
 800c6d8:	4602      	mov	r2, r0
 800c6da:	6260      	str	r0, [r4, #36]	; 0x24
 800c6dc:	b920      	cbnz	r0, 800c6e8 <_Balloc+0x20>
 800c6de:	4b18      	ldr	r3, [pc, #96]	; (800c740 <_Balloc+0x78>)
 800c6e0:	4818      	ldr	r0, [pc, #96]	; (800c744 <_Balloc+0x7c>)
 800c6e2:	2166      	movs	r1, #102	; 0x66
 800c6e4:	f000 fce6 	bl	800d0b4 <__assert_func>
 800c6e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c6ec:	6006      	str	r6, [r0, #0]
 800c6ee:	60c6      	str	r6, [r0, #12]
 800c6f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c6f2:	68f3      	ldr	r3, [r6, #12]
 800c6f4:	b183      	cbz	r3, 800c718 <_Balloc+0x50>
 800c6f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6f8:	68db      	ldr	r3, [r3, #12]
 800c6fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c6fe:	b9b8      	cbnz	r0, 800c730 <_Balloc+0x68>
 800c700:	2101      	movs	r1, #1
 800c702:	fa01 f605 	lsl.w	r6, r1, r5
 800c706:	1d72      	adds	r2, r6, #5
 800c708:	0092      	lsls	r2, r2, #2
 800c70a:	4620      	mov	r0, r4
 800c70c:	f000 fb60 	bl	800cdd0 <_calloc_r>
 800c710:	b160      	cbz	r0, 800c72c <_Balloc+0x64>
 800c712:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c716:	e00e      	b.n	800c736 <_Balloc+0x6e>
 800c718:	2221      	movs	r2, #33	; 0x21
 800c71a:	2104      	movs	r1, #4
 800c71c:	4620      	mov	r0, r4
 800c71e:	f000 fb57 	bl	800cdd0 <_calloc_r>
 800c722:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c724:	60f0      	str	r0, [r6, #12]
 800c726:	68db      	ldr	r3, [r3, #12]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d1e4      	bne.n	800c6f6 <_Balloc+0x2e>
 800c72c:	2000      	movs	r0, #0
 800c72e:	bd70      	pop	{r4, r5, r6, pc}
 800c730:	6802      	ldr	r2, [r0, #0]
 800c732:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c736:	2300      	movs	r3, #0
 800c738:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c73c:	e7f7      	b.n	800c72e <_Balloc+0x66>
 800c73e:	bf00      	nop
 800c740:	0800dd21 	.word	0x0800dd21
 800c744:	0800dda4 	.word	0x0800dda4

0800c748 <_Bfree>:
 800c748:	b570      	push	{r4, r5, r6, lr}
 800c74a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c74c:	4605      	mov	r5, r0
 800c74e:	460c      	mov	r4, r1
 800c750:	b976      	cbnz	r6, 800c770 <_Bfree+0x28>
 800c752:	2010      	movs	r0, #16
 800c754:	f7fe fb8c 	bl	800ae70 <malloc>
 800c758:	4602      	mov	r2, r0
 800c75a:	6268      	str	r0, [r5, #36]	; 0x24
 800c75c:	b920      	cbnz	r0, 800c768 <_Bfree+0x20>
 800c75e:	4b09      	ldr	r3, [pc, #36]	; (800c784 <_Bfree+0x3c>)
 800c760:	4809      	ldr	r0, [pc, #36]	; (800c788 <_Bfree+0x40>)
 800c762:	218a      	movs	r1, #138	; 0x8a
 800c764:	f000 fca6 	bl	800d0b4 <__assert_func>
 800c768:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c76c:	6006      	str	r6, [r0, #0]
 800c76e:	60c6      	str	r6, [r0, #12]
 800c770:	b13c      	cbz	r4, 800c782 <_Bfree+0x3a>
 800c772:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c774:	6862      	ldr	r2, [r4, #4]
 800c776:	68db      	ldr	r3, [r3, #12]
 800c778:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c77c:	6021      	str	r1, [r4, #0]
 800c77e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c782:	bd70      	pop	{r4, r5, r6, pc}
 800c784:	0800dd21 	.word	0x0800dd21
 800c788:	0800dda4 	.word	0x0800dda4

0800c78c <__multadd>:
 800c78c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c790:	690d      	ldr	r5, [r1, #16]
 800c792:	4607      	mov	r7, r0
 800c794:	460c      	mov	r4, r1
 800c796:	461e      	mov	r6, r3
 800c798:	f101 0c14 	add.w	ip, r1, #20
 800c79c:	2000      	movs	r0, #0
 800c79e:	f8dc 3000 	ldr.w	r3, [ip]
 800c7a2:	b299      	uxth	r1, r3
 800c7a4:	fb02 6101 	mla	r1, r2, r1, r6
 800c7a8:	0c1e      	lsrs	r6, r3, #16
 800c7aa:	0c0b      	lsrs	r3, r1, #16
 800c7ac:	fb02 3306 	mla	r3, r2, r6, r3
 800c7b0:	b289      	uxth	r1, r1
 800c7b2:	3001      	adds	r0, #1
 800c7b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c7b8:	4285      	cmp	r5, r0
 800c7ba:	f84c 1b04 	str.w	r1, [ip], #4
 800c7be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c7c2:	dcec      	bgt.n	800c79e <__multadd+0x12>
 800c7c4:	b30e      	cbz	r6, 800c80a <__multadd+0x7e>
 800c7c6:	68a3      	ldr	r3, [r4, #8]
 800c7c8:	42ab      	cmp	r3, r5
 800c7ca:	dc19      	bgt.n	800c800 <__multadd+0x74>
 800c7cc:	6861      	ldr	r1, [r4, #4]
 800c7ce:	4638      	mov	r0, r7
 800c7d0:	3101      	adds	r1, #1
 800c7d2:	f7ff ff79 	bl	800c6c8 <_Balloc>
 800c7d6:	4680      	mov	r8, r0
 800c7d8:	b928      	cbnz	r0, 800c7e6 <__multadd+0x5a>
 800c7da:	4602      	mov	r2, r0
 800c7dc:	4b0c      	ldr	r3, [pc, #48]	; (800c810 <__multadd+0x84>)
 800c7de:	480d      	ldr	r0, [pc, #52]	; (800c814 <__multadd+0x88>)
 800c7e0:	21b5      	movs	r1, #181	; 0xb5
 800c7e2:	f000 fc67 	bl	800d0b4 <__assert_func>
 800c7e6:	6922      	ldr	r2, [r4, #16]
 800c7e8:	3202      	adds	r2, #2
 800c7ea:	f104 010c 	add.w	r1, r4, #12
 800c7ee:	0092      	lsls	r2, r2, #2
 800c7f0:	300c      	adds	r0, #12
 800c7f2:	f7ff ff4f 	bl	800c694 <memcpy>
 800c7f6:	4621      	mov	r1, r4
 800c7f8:	4638      	mov	r0, r7
 800c7fa:	f7ff ffa5 	bl	800c748 <_Bfree>
 800c7fe:	4644      	mov	r4, r8
 800c800:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c804:	3501      	adds	r5, #1
 800c806:	615e      	str	r6, [r3, #20]
 800c808:	6125      	str	r5, [r4, #16]
 800c80a:	4620      	mov	r0, r4
 800c80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c810:	0800dd93 	.word	0x0800dd93
 800c814:	0800dda4 	.word	0x0800dda4

0800c818 <__hi0bits>:
 800c818:	0c03      	lsrs	r3, r0, #16
 800c81a:	041b      	lsls	r3, r3, #16
 800c81c:	b9d3      	cbnz	r3, 800c854 <__hi0bits+0x3c>
 800c81e:	0400      	lsls	r0, r0, #16
 800c820:	2310      	movs	r3, #16
 800c822:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c826:	bf04      	itt	eq
 800c828:	0200      	lsleq	r0, r0, #8
 800c82a:	3308      	addeq	r3, #8
 800c82c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c830:	bf04      	itt	eq
 800c832:	0100      	lsleq	r0, r0, #4
 800c834:	3304      	addeq	r3, #4
 800c836:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c83a:	bf04      	itt	eq
 800c83c:	0080      	lsleq	r0, r0, #2
 800c83e:	3302      	addeq	r3, #2
 800c840:	2800      	cmp	r0, #0
 800c842:	db05      	blt.n	800c850 <__hi0bits+0x38>
 800c844:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c848:	f103 0301 	add.w	r3, r3, #1
 800c84c:	bf08      	it	eq
 800c84e:	2320      	moveq	r3, #32
 800c850:	4618      	mov	r0, r3
 800c852:	4770      	bx	lr
 800c854:	2300      	movs	r3, #0
 800c856:	e7e4      	b.n	800c822 <__hi0bits+0xa>

0800c858 <__lo0bits>:
 800c858:	6803      	ldr	r3, [r0, #0]
 800c85a:	f013 0207 	ands.w	r2, r3, #7
 800c85e:	4601      	mov	r1, r0
 800c860:	d00b      	beq.n	800c87a <__lo0bits+0x22>
 800c862:	07da      	lsls	r2, r3, #31
 800c864:	d423      	bmi.n	800c8ae <__lo0bits+0x56>
 800c866:	0798      	lsls	r0, r3, #30
 800c868:	bf49      	itett	mi
 800c86a:	085b      	lsrmi	r3, r3, #1
 800c86c:	089b      	lsrpl	r3, r3, #2
 800c86e:	2001      	movmi	r0, #1
 800c870:	600b      	strmi	r3, [r1, #0]
 800c872:	bf5c      	itt	pl
 800c874:	600b      	strpl	r3, [r1, #0]
 800c876:	2002      	movpl	r0, #2
 800c878:	4770      	bx	lr
 800c87a:	b298      	uxth	r0, r3
 800c87c:	b9a8      	cbnz	r0, 800c8aa <__lo0bits+0x52>
 800c87e:	0c1b      	lsrs	r3, r3, #16
 800c880:	2010      	movs	r0, #16
 800c882:	b2da      	uxtb	r2, r3
 800c884:	b90a      	cbnz	r2, 800c88a <__lo0bits+0x32>
 800c886:	3008      	adds	r0, #8
 800c888:	0a1b      	lsrs	r3, r3, #8
 800c88a:	071a      	lsls	r2, r3, #28
 800c88c:	bf04      	itt	eq
 800c88e:	091b      	lsreq	r3, r3, #4
 800c890:	3004      	addeq	r0, #4
 800c892:	079a      	lsls	r2, r3, #30
 800c894:	bf04      	itt	eq
 800c896:	089b      	lsreq	r3, r3, #2
 800c898:	3002      	addeq	r0, #2
 800c89a:	07da      	lsls	r2, r3, #31
 800c89c:	d403      	bmi.n	800c8a6 <__lo0bits+0x4e>
 800c89e:	085b      	lsrs	r3, r3, #1
 800c8a0:	f100 0001 	add.w	r0, r0, #1
 800c8a4:	d005      	beq.n	800c8b2 <__lo0bits+0x5a>
 800c8a6:	600b      	str	r3, [r1, #0]
 800c8a8:	4770      	bx	lr
 800c8aa:	4610      	mov	r0, r2
 800c8ac:	e7e9      	b.n	800c882 <__lo0bits+0x2a>
 800c8ae:	2000      	movs	r0, #0
 800c8b0:	4770      	bx	lr
 800c8b2:	2020      	movs	r0, #32
 800c8b4:	4770      	bx	lr
	...

0800c8b8 <__i2b>:
 800c8b8:	b510      	push	{r4, lr}
 800c8ba:	460c      	mov	r4, r1
 800c8bc:	2101      	movs	r1, #1
 800c8be:	f7ff ff03 	bl	800c6c8 <_Balloc>
 800c8c2:	4602      	mov	r2, r0
 800c8c4:	b928      	cbnz	r0, 800c8d2 <__i2b+0x1a>
 800c8c6:	4b05      	ldr	r3, [pc, #20]	; (800c8dc <__i2b+0x24>)
 800c8c8:	4805      	ldr	r0, [pc, #20]	; (800c8e0 <__i2b+0x28>)
 800c8ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c8ce:	f000 fbf1 	bl	800d0b4 <__assert_func>
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	6144      	str	r4, [r0, #20]
 800c8d6:	6103      	str	r3, [r0, #16]
 800c8d8:	bd10      	pop	{r4, pc}
 800c8da:	bf00      	nop
 800c8dc:	0800dd93 	.word	0x0800dd93
 800c8e0:	0800dda4 	.word	0x0800dda4

0800c8e4 <__multiply>:
 800c8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8e8:	4691      	mov	r9, r2
 800c8ea:	690a      	ldr	r2, [r1, #16]
 800c8ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	bfb8      	it	lt
 800c8f4:	460b      	movlt	r3, r1
 800c8f6:	460c      	mov	r4, r1
 800c8f8:	bfbc      	itt	lt
 800c8fa:	464c      	movlt	r4, r9
 800c8fc:	4699      	movlt	r9, r3
 800c8fe:	6927      	ldr	r7, [r4, #16]
 800c900:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c904:	68a3      	ldr	r3, [r4, #8]
 800c906:	6861      	ldr	r1, [r4, #4]
 800c908:	eb07 060a 	add.w	r6, r7, sl
 800c90c:	42b3      	cmp	r3, r6
 800c90e:	b085      	sub	sp, #20
 800c910:	bfb8      	it	lt
 800c912:	3101      	addlt	r1, #1
 800c914:	f7ff fed8 	bl	800c6c8 <_Balloc>
 800c918:	b930      	cbnz	r0, 800c928 <__multiply+0x44>
 800c91a:	4602      	mov	r2, r0
 800c91c:	4b44      	ldr	r3, [pc, #272]	; (800ca30 <__multiply+0x14c>)
 800c91e:	4845      	ldr	r0, [pc, #276]	; (800ca34 <__multiply+0x150>)
 800c920:	f240 115d 	movw	r1, #349	; 0x15d
 800c924:	f000 fbc6 	bl	800d0b4 <__assert_func>
 800c928:	f100 0514 	add.w	r5, r0, #20
 800c92c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c930:	462b      	mov	r3, r5
 800c932:	2200      	movs	r2, #0
 800c934:	4543      	cmp	r3, r8
 800c936:	d321      	bcc.n	800c97c <__multiply+0x98>
 800c938:	f104 0314 	add.w	r3, r4, #20
 800c93c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c940:	f109 0314 	add.w	r3, r9, #20
 800c944:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c948:	9202      	str	r2, [sp, #8]
 800c94a:	1b3a      	subs	r2, r7, r4
 800c94c:	3a15      	subs	r2, #21
 800c94e:	f022 0203 	bic.w	r2, r2, #3
 800c952:	3204      	adds	r2, #4
 800c954:	f104 0115 	add.w	r1, r4, #21
 800c958:	428f      	cmp	r7, r1
 800c95a:	bf38      	it	cc
 800c95c:	2204      	movcc	r2, #4
 800c95e:	9201      	str	r2, [sp, #4]
 800c960:	9a02      	ldr	r2, [sp, #8]
 800c962:	9303      	str	r3, [sp, #12]
 800c964:	429a      	cmp	r2, r3
 800c966:	d80c      	bhi.n	800c982 <__multiply+0x9e>
 800c968:	2e00      	cmp	r6, #0
 800c96a:	dd03      	ble.n	800c974 <__multiply+0x90>
 800c96c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c970:	2b00      	cmp	r3, #0
 800c972:	d05a      	beq.n	800ca2a <__multiply+0x146>
 800c974:	6106      	str	r6, [r0, #16]
 800c976:	b005      	add	sp, #20
 800c978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c97c:	f843 2b04 	str.w	r2, [r3], #4
 800c980:	e7d8      	b.n	800c934 <__multiply+0x50>
 800c982:	f8b3 a000 	ldrh.w	sl, [r3]
 800c986:	f1ba 0f00 	cmp.w	sl, #0
 800c98a:	d024      	beq.n	800c9d6 <__multiply+0xf2>
 800c98c:	f104 0e14 	add.w	lr, r4, #20
 800c990:	46a9      	mov	r9, r5
 800c992:	f04f 0c00 	mov.w	ip, #0
 800c996:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c99a:	f8d9 1000 	ldr.w	r1, [r9]
 800c99e:	fa1f fb82 	uxth.w	fp, r2
 800c9a2:	b289      	uxth	r1, r1
 800c9a4:	fb0a 110b 	mla	r1, sl, fp, r1
 800c9a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c9ac:	f8d9 2000 	ldr.w	r2, [r9]
 800c9b0:	4461      	add	r1, ip
 800c9b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c9b6:	fb0a c20b 	mla	r2, sl, fp, ip
 800c9ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c9be:	b289      	uxth	r1, r1
 800c9c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c9c4:	4577      	cmp	r7, lr
 800c9c6:	f849 1b04 	str.w	r1, [r9], #4
 800c9ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c9ce:	d8e2      	bhi.n	800c996 <__multiply+0xb2>
 800c9d0:	9a01      	ldr	r2, [sp, #4]
 800c9d2:	f845 c002 	str.w	ip, [r5, r2]
 800c9d6:	9a03      	ldr	r2, [sp, #12]
 800c9d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c9dc:	3304      	adds	r3, #4
 800c9de:	f1b9 0f00 	cmp.w	r9, #0
 800c9e2:	d020      	beq.n	800ca26 <__multiply+0x142>
 800c9e4:	6829      	ldr	r1, [r5, #0]
 800c9e6:	f104 0c14 	add.w	ip, r4, #20
 800c9ea:	46ae      	mov	lr, r5
 800c9ec:	f04f 0a00 	mov.w	sl, #0
 800c9f0:	f8bc b000 	ldrh.w	fp, [ip]
 800c9f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c9f8:	fb09 220b 	mla	r2, r9, fp, r2
 800c9fc:	4492      	add	sl, r2
 800c9fe:	b289      	uxth	r1, r1
 800ca00:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ca04:	f84e 1b04 	str.w	r1, [lr], #4
 800ca08:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ca0c:	f8be 1000 	ldrh.w	r1, [lr]
 800ca10:	0c12      	lsrs	r2, r2, #16
 800ca12:	fb09 1102 	mla	r1, r9, r2, r1
 800ca16:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ca1a:	4567      	cmp	r7, ip
 800ca1c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ca20:	d8e6      	bhi.n	800c9f0 <__multiply+0x10c>
 800ca22:	9a01      	ldr	r2, [sp, #4]
 800ca24:	50a9      	str	r1, [r5, r2]
 800ca26:	3504      	adds	r5, #4
 800ca28:	e79a      	b.n	800c960 <__multiply+0x7c>
 800ca2a:	3e01      	subs	r6, #1
 800ca2c:	e79c      	b.n	800c968 <__multiply+0x84>
 800ca2e:	bf00      	nop
 800ca30:	0800dd93 	.word	0x0800dd93
 800ca34:	0800dda4 	.word	0x0800dda4

0800ca38 <__pow5mult>:
 800ca38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca3c:	4615      	mov	r5, r2
 800ca3e:	f012 0203 	ands.w	r2, r2, #3
 800ca42:	4606      	mov	r6, r0
 800ca44:	460f      	mov	r7, r1
 800ca46:	d007      	beq.n	800ca58 <__pow5mult+0x20>
 800ca48:	4c25      	ldr	r4, [pc, #148]	; (800cae0 <__pow5mult+0xa8>)
 800ca4a:	3a01      	subs	r2, #1
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ca52:	f7ff fe9b 	bl	800c78c <__multadd>
 800ca56:	4607      	mov	r7, r0
 800ca58:	10ad      	asrs	r5, r5, #2
 800ca5a:	d03d      	beq.n	800cad8 <__pow5mult+0xa0>
 800ca5c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ca5e:	b97c      	cbnz	r4, 800ca80 <__pow5mult+0x48>
 800ca60:	2010      	movs	r0, #16
 800ca62:	f7fe fa05 	bl	800ae70 <malloc>
 800ca66:	4602      	mov	r2, r0
 800ca68:	6270      	str	r0, [r6, #36]	; 0x24
 800ca6a:	b928      	cbnz	r0, 800ca78 <__pow5mult+0x40>
 800ca6c:	4b1d      	ldr	r3, [pc, #116]	; (800cae4 <__pow5mult+0xac>)
 800ca6e:	481e      	ldr	r0, [pc, #120]	; (800cae8 <__pow5mult+0xb0>)
 800ca70:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ca74:	f000 fb1e 	bl	800d0b4 <__assert_func>
 800ca78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ca7c:	6004      	str	r4, [r0, #0]
 800ca7e:	60c4      	str	r4, [r0, #12]
 800ca80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ca84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ca88:	b94c      	cbnz	r4, 800ca9e <__pow5mult+0x66>
 800ca8a:	f240 2171 	movw	r1, #625	; 0x271
 800ca8e:	4630      	mov	r0, r6
 800ca90:	f7ff ff12 	bl	800c8b8 <__i2b>
 800ca94:	2300      	movs	r3, #0
 800ca96:	f8c8 0008 	str.w	r0, [r8, #8]
 800ca9a:	4604      	mov	r4, r0
 800ca9c:	6003      	str	r3, [r0, #0]
 800ca9e:	f04f 0900 	mov.w	r9, #0
 800caa2:	07eb      	lsls	r3, r5, #31
 800caa4:	d50a      	bpl.n	800cabc <__pow5mult+0x84>
 800caa6:	4639      	mov	r1, r7
 800caa8:	4622      	mov	r2, r4
 800caaa:	4630      	mov	r0, r6
 800caac:	f7ff ff1a 	bl	800c8e4 <__multiply>
 800cab0:	4639      	mov	r1, r7
 800cab2:	4680      	mov	r8, r0
 800cab4:	4630      	mov	r0, r6
 800cab6:	f7ff fe47 	bl	800c748 <_Bfree>
 800caba:	4647      	mov	r7, r8
 800cabc:	106d      	asrs	r5, r5, #1
 800cabe:	d00b      	beq.n	800cad8 <__pow5mult+0xa0>
 800cac0:	6820      	ldr	r0, [r4, #0]
 800cac2:	b938      	cbnz	r0, 800cad4 <__pow5mult+0x9c>
 800cac4:	4622      	mov	r2, r4
 800cac6:	4621      	mov	r1, r4
 800cac8:	4630      	mov	r0, r6
 800caca:	f7ff ff0b 	bl	800c8e4 <__multiply>
 800cace:	6020      	str	r0, [r4, #0]
 800cad0:	f8c0 9000 	str.w	r9, [r0]
 800cad4:	4604      	mov	r4, r0
 800cad6:	e7e4      	b.n	800caa2 <__pow5mult+0x6a>
 800cad8:	4638      	mov	r0, r7
 800cada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cade:	bf00      	nop
 800cae0:	0800def0 	.word	0x0800def0
 800cae4:	0800dd21 	.word	0x0800dd21
 800cae8:	0800dda4 	.word	0x0800dda4

0800caec <__lshift>:
 800caec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caf0:	460c      	mov	r4, r1
 800caf2:	6849      	ldr	r1, [r1, #4]
 800caf4:	6923      	ldr	r3, [r4, #16]
 800caf6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cafa:	68a3      	ldr	r3, [r4, #8]
 800cafc:	4607      	mov	r7, r0
 800cafe:	4691      	mov	r9, r2
 800cb00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cb04:	f108 0601 	add.w	r6, r8, #1
 800cb08:	42b3      	cmp	r3, r6
 800cb0a:	db0b      	blt.n	800cb24 <__lshift+0x38>
 800cb0c:	4638      	mov	r0, r7
 800cb0e:	f7ff fddb 	bl	800c6c8 <_Balloc>
 800cb12:	4605      	mov	r5, r0
 800cb14:	b948      	cbnz	r0, 800cb2a <__lshift+0x3e>
 800cb16:	4602      	mov	r2, r0
 800cb18:	4b2a      	ldr	r3, [pc, #168]	; (800cbc4 <__lshift+0xd8>)
 800cb1a:	482b      	ldr	r0, [pc, #172]	; (800cbc8 <__lshift+0xdc>)
 800cb1c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cb20:	f000 fac8 	bl	800d0b4 <__assert_func>
 800cb24:	3101      	adds	r1, #1
 800cb26:	005b      	lsls	r3, r3, #1
 800cb28:	e7ee      	b.n	800cb08 <__lshift+0x1c>
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	f100 0114 	add.w	r1, r0, #20
 800cb30:	f100 0210 	add.w	r2, r0, #16
 800cb34:	4618      	mov	r0, r3
 800cb36:	4553      	cmp	r3, sl
 800cb38:	db37      	blt.n	800cbaa <__lshift+0xbe>
 800cb3a:	6920      	ldr	r0, [r4, #16]
 800cb3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cb40:	f104 0314 	add.w	r3, r4, #20
 800cb44:	f019 091f 	ands.w	r9, r9, #31
 800cb48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cb4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cb50:	d02f      	beq.n	800cbb2 <__lshift+0xc6>
 800cb52:	f1c9 0e20 	rsb	lr, r9, #32
 800cb56:	468a      	mov	sl, r1
 800cb58:	f04f 0c00 	mov.w	ip, #0
 800cb5c:	681a      	ldr	r2, [r3, #0]
 800cb5e:	fa02 f209 	lsl.w	r2, r2, r9
 800cb62:	ea42 020c 	orr.w	r2, r2, ip
 800cb66:	f84a 2b04 	str.w	r2, [sl], #4
 800cb6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb6e:	4298      	cmp	r0, r3
 800cb70:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cb74:	d8f2      	bhi.n	800cb5c <__lshift+0x70>
 800cb76:	1b03      	subs	r3, r0, r4
 800cb78:	3b15      	subs	r3, #21
 800cb7a:	f023 0303 	bic.w	r3, r3, #3
 800cb7e:	3304      	adds	r3, #4
 800cb80:	f104 0215 	add.w	r2, r4, #21
 800cb84:	4290      	cmp	r0, r2
 800cb86:	bf38      	it	cc
 800cb88:	2304      	movcc	r3, #4
 800cb8a:	f841 c003 	str.w	ip, [r1, r3]
 800cb8e:	f1bc 0f00 	cmp.w	ip, #0
 800cb92:	d001      	beq.n	800cb98 <__lshift+0xac>
 800cb94:	f108 0602 	add.w	r6, r8, #2
 800cb98:	3e01      	subs	r6, #1
 800cb9a:	4638      	mov	r0, r7
 800cb9c:	612e      	str	r6, [r5, #16]
 800cb9e:	4621      	mov	r1, r4
 800cba0:	f7ff fdd2 	bl	800c748 <_Bfree>
 800cba4:	4628      	mov	r0, r5
 800cba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbaa:	f842 0f04 	str.w	r0, [r2, #4]!
 800cbae:	3301      	adds	r3, #1
 800cbb0:	e7c1      	b.n	800cb36 <__lshift+0x4a>
 800cbb2:	3904      	subs	r1, #4
 800cbb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbb8:	f841 2f04 	str.w	r2, [r1, #4]!
 800cbbc:	4298      	cmp	r0, r3
 800cbbe:	d8f9      	bhi.n	800cbb4 <__lshift+0xc8>
 800cbc0:	e7ea      	b.n	800cb98 <__lshift+0xac>
 800cbc2:	bf00      	nop
 800cbc4:	0800dd93 	.word	0x0800dd93
 800cbc8:	0800dda4 	.word	0x0800dda4

0800cbcc <__mcmp>:
 800cbcc:	b530      	push	{r4, r5, lr}
 800cbce:	6902      	ldr	r2, [r0, #16]
 800cbd0:	690c      	ldr	r4, [r1, #16]
 800cbd2:	1b12      	subs	r2, r2, r4
 800cbd4:	d10e      	bne.n	800cbf4 <__mcmp+0x28>
 800cbd6:	f100 0314 	add.w	r3, r0, #20
 800cbda:	3114      	adds	r1, #20
 800cbdc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cbe0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cbe4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cbe8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cbec:	42a5      	cmp	r5, r4
 800cbee:	d003      	beq.n	800cbf8 <__mcmp+0x2c>
 800cbf0:	d305      	bcc.n	800cbfe <__mcmp+0x32>
 800cbf2:	2201      	movs	r2, #1
 800cbf4:	4610      	mov	r0, r2
 800cbf6:	bd30      	pop	{r4, r5, pc}
 800cbf8:	4283      	cmp	r3, r0
 800cbfa:	d3f3      	bcc.n	800cbe4 <__mcmp+0x18>
 800cbfc:	e7fa      	b.n	800cbf4 <__mcmp+0x28>
 800cbfe:	f04f 32ff 	mov.w	r2, #4294967295
 800cc02:	e7f7      	b.n	800cbf4 <__mcmp+0x28>

0800cc04 <__mdiff>:
 800cc04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc08:	460c      	mov	r4, r1
 800cc0a:	4606      	mov	r6, r0
 800cc0c:	4611      	mov	r1, r2
 800cc0e:	4620      	mov	r0, r4
 800cc10:	4690      	mov	r8, r2
 800cc12:	f7ff ffdb 	bl	800cbcc <__mcmp>
 800cc16:	1e05      	subs	r5, r0, #0
 800cc18:	d110      	bne.n	800cc3c <__mdiff+0x38>
 800cc1a:	4629      	mov	r1, r5
 800cc1c:	4630      	mov	r0, r6
 800cc1e:	f7ff fd53 	bl	800c6c8 <_Balloc>
 800cc22:	b930      	cbnz	r0, 800cc32 <__mdiff+0x2e>
 800cc24:	4b3a      	ldr	r3, [pc, #232]	; (800cd10 <__mdiff+0x10c>)
 800cc26:	4602      	mov	r2, r0
 800cc28:	f240 2132 	movw	r1, #562	; 0x232
 800cc2c:	4839      	ldr	r0, [pc, #228]	; (800cd14 <__mdiff+0x110>)
 800cc2e:	f000 fa41 	bl	800d0b4 <__assert_func>
 800cc32:	2301      	movs	r3, #1
 800cc34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cc38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc3c:	bfa4      	itt	ge
 800cc3e:	4643      	movge	r3, r8
 800cc40:	46a0      	movge	r8, r4
 800cc42:	4630      	mov	r0, r6
 800cc44:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cc48:	bfa6      	itte	ge
 800cc4a:	461c      	movge	r4, r3
 800cc4c:	2500      	movge	r5, #0
 800cc4e:	2501      	movlt	r5, #1
 800cc50:	f7ff fd3a 	bl	800c6c8 <_Balloc>
 800cc54:	b920      	cbnz	r0, 800cc60 <__mdiff+0x5c>
 800cc56:	4b2e      	ldr	r3, [pc, #184]	; (800cd10 <__mdiff+0x10c>)
 800cc58:	4602      	mov	r2, r0
 800cc5a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cc5e:	e7e5      	b.n	800cc2c <__mdiff+0x28>
 800cc60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cc64:	6926      	ldr	r6, [r4, #16]
 800cc66:	60c5      	str	r5, [r0, #12]
 800cc68:	f104 0914 	add.w	r9, r4, #20
 800cc6c:	f108 0514 	add.w	r5, r8, #20
 800cc70:	f100 0e14 	add.w	lr, r0, #20
 800cc74:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cc78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cc7c:	f108 0210 	add.w	r2, r8, #16
 800cc80:	46f2      	mov	sl, lr
 800cc82:	2100      	movs	r1, #0
 800cc84:	f859 3b04 	ldr.w	r3, [r9], #4
 800cc88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cc8c:	fa1f f883 	uxth.w	r8, r3
 800cc90:	fa11 f18b 	uxtah	r1, r1, fp
 800cc94:	0c1b      	lsrs	r3, r3, #16
 800cc96:	eba1 0808 	sub.w	r8, r1, r8
 800cc9a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cc9e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cca2:	fa1f f888 	uxth.w	r8, r8
 800cca6:	1419      	asrs	r1, r3, #16
 800cca8:	454e      	cmp	r6, r9
 800ccaa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ccae:	f84a 3b04 	str.w	r3, [sl], #4
 800ccb2:	d8e7      	bhi.n	800cc84 <__mdiff+0x80>
 800ccb4:	1b33      	subs	r3, r6, r4
 800ccb6:	3b15      	subs	r3, #21
 800ccb8:	f023 0303 	bic.w	r3, r3, #3
 800ccbc:	3304      	adds	r3, #4
 800ccbe:	3415      	adds	r4, #21
 800ccc0:	42a6      	cmp	r6, r4
 800ccc2:	bf38      	it	cc
 800ccc4:	2304      	movcc	r3, #4
 800ccc6:	441d      	add	r5, r3
 800ccc8:	4473      	add	r3, lr
 800ccca:	469e      	mov	lr, r3
 800cccc:	462e      	mov	r6, r5
 800ccce:	4566      	cmp	r6, ip
 800ccd0:	d30e      	bcc.n	800ccf0 <__mdiff+0xec>
 800ccd2:	f10c 0203 	add.w	r2, ip, #3
 800ccd6:	1b52      	subs	r2, r2, r5
 800ccd8:	f022 0203 	bic.w	r2, r2, #3
 800ccdc:	3d03      	subs	r5, #3
 800ccde:	45ac      	cmp	ip, r5
 800cce0:	bf38      	it	cc
 800cce2:	2200      	movcc	r2, #0
 800cce4:	441a      	add	r2, r3
 800cce6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ccea:	b17b      	cbz	r3, 800cd0c <__mdiff+0x108>
 800ccec:	6107      	str	r7, [r0, #16]
 800ccee:	e7a3      	b.n	800cc38 <__mdiff+0x34>
 800ccf0:	f856 8b04 	ldr.w	r8, [r6], #4
 800ccf4:	fa11 f288 	uxtah	r2, r1, r8
 800ccf8:	1414      	asrs	r4, r2, #16
 800ccfa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ccfe:	b292      	uxth	r2, r2
 800cd00:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cd04:	f84e 2b04 	str.w	r2, [lr], #4
 800cd08:	1421      	asrs	r1, r4, #16
 800cd0a:	e7e0      	b.n	800ccce <__mdiff+0xca>
 800cd0c:	3f01      	subs	r7, #1
 800cd0e:	e7ea      	b.n	800cce6 <__mdiff+0xe2>
 800cd10:	0800dd93 	.word	0x0800dd93
 800cd14:	0800dda4 	.word	0x0800dda4

0800cd18 <__d2b>:
 800cd18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cd1c:	4689      	mov	r9, r1
 800cd1e:	2101      	movs	r1, #1
 800cd20:	ec57 6b10 	vmov	r6, r7, d0
 800cd24:	4690      	mov	r8, r2
 800cd26:	f7ff fccf 	bl	800c6c8 <_Balloc>
 800cd2a:	4604      	mov	r4, r0
 800cd2c:	b930      	cbnz	r0, 800cd3c <__d2b+0x24>
 800cd2e:	4602      	mov	r2, r0
 800cd30:	4b25      	ldr	r3, [pc, #148]	; (800cdc8 <__d2b+0xb0>)
 800cd32:	4826      	ldr	r0, [pc, #152]	; (800cdcc <__d2b+0xb4>)
 800cd34:	f240 310a 	movw	r1, #778	; 0x30a
 800cd38:	f000 f9bc 	bl	800d0b4 <__assert_func>
 800cd3c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cd40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cd44:	bb35      	cbnz	r5, 800cd94 <__d2b+0x7c>
 800cd46:	2e00      	cmp	r6, #0
 800cd48:	9301      	str	r3, [sp, #4]
 800cd4a:	d028      	beq.n	800cd9e <__d2b+0x86>
 800cd4c:	4668      	mov	r0, sp
 800cd4e:	9600      	str	r6, [sp, #0]
 800cd50:	f7ff fd82 	bl	800c858 <__lo0bits>
 800cd54:	9900      	ldr	r1, [sp, #0]
 800cd56:	b300      	cbz	r0, 800cd9a <__d2b+0x82>
 800cd58:	9a01      	ldr	r2, [sp, #4]
 800cd5a:	f1c0 0320 	rsb	r3, r0, #32
 800cd5e:	fa02 f303 	lsl.w	r3, r2, r3
 800cd62:	430b      	orrs	r3, r1
 800cd64:	40c2      	lsrs	r2, r0
 800cd66:	6163      	str	r3, [r4, #20]
 800cd68:	9201      	str	r2, [sp, #4]
 800cd6a:	9b01      	ldr	r3, [sp, #4]
 800cd6c:	61a3      	str	r3, [r4, #24]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	bf14      	ite	ne
 800cd72:	2202      	movne	r2, #2
 800cd74:	2201      	moveq	r2, #1
 800cd76:	6122      	str	r2, [r4, #16]
 800cd78:	b1d5      	cbz	r5, 800cdb0 <__d2b+0x98>
 800cd7a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cd7e:	4405      	add	r5, r0
 800cd80:	f8c9 5000 	str.w	r5, [r9]
 800cd84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cd88:	f8c8 0000 	str.w	r0, [r8]
 800cd8c:	4620      	mov	r0, r4
 800cd8e:	b003      	add	sp, #12
 800cd90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cd98:	e7d5      	b.n	800cd46 <__d2b+0x2e>
 800cd9a:	6161      	str	r1, [r4, #20]
 800cd9c:	e7e5      	b.n	800cd6a <__d2b+0x52>
 800cd9e:	a801      	add	r0, sp, #4
 800cda0:	f7ff fd5a 	bl	800c858 <__lo0bits>
 800cda4:	9b01      	ldr	r3, [sp, #4]
 800cda6:	6163      	str	r3, [r4, #20]
 800cda8:	2201      	movs	r2, #1
 800cdaa:	6122      	str	r2, [r4, #16]
 800cdac:	3020      	adds	r0, #32
 800cdae:	e7e3      	b.n	800cd78 <__d2b+0x60>
 800cdb0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cdb4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cdb8:	f8c9 0000 	str.w	r0, [r9]
 800cdbc:	6918      	ldr	r0, [r3, #16]
 800cdbe:	f7ff fd2b 	bl	800c818 <__hi0bits>
 800cdc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cdc6:	e7df      	b.n	800cd88 <__d2b+0x70>
 800cdc8:	0800dd93 	.word	0x0800dd93
 800cdcc:	0800dda4 	.word	0x0800dda4

0800cdd0 <_calloc_r>:
 800cdd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cdd2:	fba1 2402 	umull	r2, r4, r1, r2
 800cdd6:	b94c      	cbnz	r4, 800cdec <_calloc_r+0x1c>
 800cdd8:	4611      	mov	r1, r2
 800cdda:	9201      	str	r2, [sp, #4]
 800cddc:	f7fe f8c4 	bl	800af68 <_malloc_r>
 800cde0:	9a01      	ldr	r2, [sp, #4]
 800cde2:	4605      	mov	r5, r0
 800cde4:	b930      	cbnz	r0, 800cdf4 <_calloc_r+0x24>
 800cde6:	4628      	mov	r0, r5
 800cde8:	b003      	add	sp, #12
 800cdea:	bd30      	pop	{r4, r5, pc}
 800cdec:	220c      	movs	r2, #12
 800cdee:	6002      	str	r2, [r0, #0]
 800cdf0:	2500      	movs	r5, #0
 800cdf2:	e7f8      	b.n	800cde6 <_calloc_r+0x16>
 800cdf4:	4621      	mov	r1, r4
 800cdf6:	f7fe f843 	bl	800ae80 <memset>
 800cdfa:	e7f4      	b.n	800cde6 <_calloc_r+0x16>

0800cdfc <__ssputs_r>:
 800cdfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce00:	688e      	ldr	r6, [r1, #8]
 800ce02:	429e      	cmp	r6, r3
 800ce04:	4682      	mov	sl, r0
 800ce06:	460c      	mov	r4, r1
 800ce08:	4690      	mov	r8, r2
 800ce0a:	461f      	mov	r7, r3
 800ce0c:	d838      	bhi.n	800ce80 <__ssputs_r+0x84>
 800ce0e:	898a      	ldrh	r2, [r1, #12]
 800ce10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce14:	d032      	beq.n	800ce7c <__ssputs_r+0x80>
 800ce16:	6825      	ldr	r5, [r4, #0]
 800ce18:	6909      	ldr	r1, [r1, #16]
 800ce1a:	eba5 0901 	sub.w	r9, r5, r1
 800ce1e:	6965      	ldr	r5, [r4, #20]
 800ce20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce28:	3301      	adds	r3, #1
 800ce2a:	444b      	add	r3, r9
 800ce2c:	106d      	asrs	r5, r5, #1
 800ce2e:	429d      	cmp	r5, r3
 800ce30:	bf38      	it	cc
 800ce32:	461d      	movcc	r5, r3
 800ce34:	0553      	lsls	r3, r2, #21
 800ce36:	d531      	bpl.n	800ce9c <__ssputs_r+0xa0>
 800ce38:	4629      	mov	r1, r5
 800ce3a:	f7fe f895 	bl	800af68 <_malloc_r>
 800ce3e:	4606      	mov	r6, r0
 800ce40:	b950      	cbnz	r0, 800ce58 <__ssputs_r+0x5c>
 800ce42:	230c      	movs	r3, #12
 800ce44:	f8ca 3000 	str.w	r3, [sl]
 800ce48:	89a3      	ldrh	r3, [r4, #12]
 800ce4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce4e:	81a3      	strh	r3, [r4, #12]
 800ce50:	f04f 30ff 	mov.w	r0, #4294967295
 800ce54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce58:	6921      	ldr	r1, [r4, #16]
 800ce5a:	464a      	mov	r2, r9
 800ce5c:	f7ff fc1a 	bl	800c694 <memcpy>
 800ce60:	89a3      	ldrh	r3, [r4, #12]
 800ce62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce6a:	81a3      	strh	r3, [r4, #12]
 800ce6c:	6126      	str	r6, [r4, #16]
 800ce6e:	6165      	str	r5, [r4, #20]
 800ce70:	444e      	add	r6, r9
 800ce72:	eba5 0509 	sub.w	r5, r5, r9
 800ce76:	6026      	str	r6, [r4, #0]
 800ce78:	60a5      	str	r5, [r4, #8]
 800ce7a:	463e      	mov	r6, r7
 800ce7c:	42be      	cmp	r6, r7
 800ce7e:	d900      	bls.n	800ce82 <__ssputs_r+0x86>
 800ce80:	463e      	mov	r6, r7
 800ce82:	6820      	ldr	r0, [r4, #0]
 800ce84:	4632      	mov	r2, r6
 800ce86:	4641      	mov	r1, r8
 800ce88:	f000 f959 	bl	800d13e <memmove>
 800ce8c:	68a3      	ldr	r3, [r4, #8]
 800ce8e:	1b9b      	subs	r3, r3, r6
 800ce90:	60a3      	str	r3, [r4, #8]
 800ce92:	6823      	ldr	r3, [r4, #0]
 800ce94:	4433      	add	r3, r6
 800ce96:	6023      	str	r3, [r4, #0]
 800ce98:	2000      	movs	r0, #0
 800ce9a:	e7db      	b.n	800ce54 <__ssputs_r+0x58>
 800ce9c:	462a      	mov	r2, r5
 800ce9e:	f000 f968 	bl	800d172 <_realloc_r>
 800cea2:	4606      	mov	r6, r0
 800cea4:	2800      	cmp	r0, #0
 800cea6:	d1e1      	bne.n	800ce6c <__ssputs_r+0x70>
 800cea8:	6921      	ldr	r1, [r4, #16]
 800ceaa:	4650      	mov	r0, sl
 800ceac:	f7fd fff0 	bl	800ae90 <_free_r>
 800ceb0:	e7c7      	b.n	800ce42 <__ssputs_r+0x46>
	...

0800ceb4 <_svfiprintf_r>:
 800ceb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceb8:	4698      	mov	r8, r3
 800ceba:	898b      	ldrh	r3, [r1, #12]
 800cebc:	061b      	lsls	r3, r3, #24
 800cebe:	b09d      	sub	sp, #116	; 0x74
 800cec0:	4607      	mov	r7, r0
 800cec2:	460d      	mov	r5, r1
 800cec4:	4614      	mov	r4, r2
 800cec6:	d50e      	bpl.n	800cee6 <_svfiprintf_r+0x32>
 800cec8:	690b      	ldr	r3, [r1, #16]
 800ceca:	b963      	cbnz	r3, 800cee6 <_svfiprintf_r+0x32>
 800cecc:	2140      	movs	r1, #64	; 0x40
 800cece:	f7fe f84b 	bl	800af68 <_malloc_r>
 800ced2:	6028      	str	r0, [r5, #0]
 800ced4:	6128      	str	r0, [r5, #16]
 800ced6:	b920      	cbnz	r0, 800cee2 <_svfiprintf_r+0x2e>
 800ced8:	230c      	movs	r3, #12
 800ceda:	603b      	str	r3, [r7, #0]
 800cedc:	f04f 30ff 	mov.w	r0, #4294967295
 800cee0:	e0d1      	b.n	800d086 <_svfiprintf_r+0x1d2>
 800cee2:	2340      	movs	r3, #64	; 0x40
 800cee4:	616b      	str	r3, [r5, #20]
 800cee6:	2300      	movs	r3, #0
 800cee8:	9309      	str	r3, [sp, #36]	; 0x24
 800ceea:	2320      	movs	r3, #32
 800ceec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cef0:	f8cd 800c 	str.w	r8, [sp, #12]
 800cef4:	2330      	movs	r3, #48	; 0x30
 800cef6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d0a0 <_svfiprintf_r+0x1ec>
 800cefa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cefe:	f04f 0901 	mov.w	r9, #1
 800cf02:	4623      	mov	r3, r4
 800cf04:	469a      	mov	sl, r3
 800cf06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf0a:	b10a      	cbz	r2, 800cf10 <_svfiprintf_r+0x5c>
 800cf0c:	2a25      	cmp	r2, #37	; 0x25
 800cf0e:	d1f9      	bne.n	800cf04 <_svfiprintf_r+0x50>
 800cf10:	ebba 0b04 	subs.w	fp, sl, r4
 800cf14:	d00b      	beq.n	800cf2e <_svfiprintf_r+0x7a>
 800cf16:	465b      	mov	r3, fp
 800cf18:	4622      	mov	r2, r4
 800cf1a:	4629      	mov	r1, r5
 800cf1c:	4638      	mov	r0, r7
 800cf1e:	f7ff ff6d 	bl	800cdfc <__ssputs_r>
 800cf22:	3001      	adds	r0, #1
 800cf24:	f000 80aa 	beq.w	800d07c <_svfiprintf_r+0x1c8>
 800cf28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf2a:	445a      	add	r2, fp
 800cf2c:	9209      	str	r2, [sp, #36]	; 0x24
 800cf2e:	f89a 3000 	ldrb.w	r3, [sl]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	f000 80a2 	beq.w	800d07c <_svfiprintf_r+0x1c8>
 800cf38:	2300      	movs	r3, #0
 800cf3a:	f04f 32ff 	mov.w	r2, #4294967295
 800cf3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf42:	f10a 0a01 	add.w	sl, sl, #1
 800cf46:	9304      	str	r3, [sp, #16]
 800cf48:	9307      	str	r3, [sp, #28]
 800cf4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf4e:	931a      	str	r3, [sp, #104]	; 0x68
 800cf50:	4654      	mov	r4, sl
 800cf52:	2205      	movs	r2, #5
 800cf54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf58:	4851      	ldr	r0, [pc, #324]	; (800d0a0 <_svfiprintf_r+0x1ec>)
 800cf5a:	f7f3 f941 	bl	80001e0 <memchr>
 800cf5e:	9a04      	ldr	r2, [sp, #16]
 800cf60:	b9d8      	cbnz	r0, 800cf9a <_svfiprintf_r+0xe6>
 800cf62:	06d0      	lsls	r0, r2, #27
 800cf64:	bf44      	itt	mi
 800cf66:	2320      	movmi	r3, #32
 800cf68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf6c:	0711      	lsls	r1, r2, #28
 800cf6e:	bf44      	itt	mi
 800cf70:	232b      	movmi	r3, #43	; 0x2b
 800cf72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf76:	f89a 3000 	ldrb.w	r3, [sl]
 800cf7a:	2b2a      	cmp	r3, #42	; 0x2a
 800cf7c:	d015      	beq.n	800cfaa <_svfiprintf_r+0xf6>
 800cf7e:	9a07      	ldr	r2, [sp, #28]
 800cf80:	4654      	mov	r4, sl
 800cf82:	2000      	movs	r0, #0
 800cf84:	f04f 0c0a 	mov.w	ip, #10
 800cf88:	4621      	mov	r1, r4
 800cf8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf8e:	3b30      	subs	r3, #48	; 0x30
 800cf90:	2b09      	cmp	r3, #9
 800cf92:	d94e      	bls.n	800d032 <_svfiprintf_r+0x17e>
 800cf94:	b1b0      	cbz	r0, 800cfc4 <_svfiprintf_r+0x110>
 800cf96:	9207      	str	r2, [sp, #28]
 800cf98:	e014      	b.n	800cfc4 <_svfiprintf_r+0x110>
 800cf9a:	eba0 0308 	sub.w	r3, r0, r8
 800cf9e:	fa09 f303 	lsl.w	r3, r9, r3
 800cfa2:	4313      	orrs	r3, r2
 800cfa4:	9304      	str	r3, [sp, #16]
 800cfa6:	46a2      	mov	sl, r4
 800cfa8:	e7d2      	b.n	800cf50 <_svfiprintf_r+0x9c>
 800cfaa:	9b03      	ldr	r3, [sp, #12]
 800cfac:	1d19      	adds	r1, r3, #4
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	9103      	str	r1, [sp, #12]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	bfbb      	ittet	lt
 800cfb6:	425b      	neglt	r3, r3
 800cfb8:	f042 0202 	orrlt.w	r2, r2, #2
 800cfbc:	9307      	strge	r3, [sp, #28]
 800cfbe:	9307      	strlt	r3, [sp, #28]
 800cfc0:	bfb8      	it	lt
 800cfc2:	9204      	strlt	r2, [sp, #16]
 800cfc4:	7823      	ldrb	r3, [r4, #0]
 800cfc6:	2b2e      	cmp	r3, #46	; 0x2e
 800cfc8:	d10c      	bne.n	800cfe4 <_svfiprintf_r+0x130>
 800cfca:	7863      	ldrb	r3, [r4, #1]
 800cfcc:	2b2a      	cmp	r3, #42	; 0x2a
 800cfce:	d135      	bne.n	800d03c <_svfiprintf_r+0x188>
 800cfd0:	9b03      	ldr	r3, [sp, #12]
 800cfd2:	1d1a      	adds	r2, r3, #4
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	9203      	str	r2, [sp, #12]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	bfb8      	it	lt
 800cfdc:	f04f 33ff 	movlt.w	r3, #4294967295
 800cfe0:	3402      	adds	r4, #2
 800cfe2:	9305      	str	r3, [sp, #20]
 800cfe4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d0b0 <_svfiprintf_r+0x1fc>
 800cfe8:	7821      	ldrb	r1, [r4, #0]
 800cfea:	2203      	movs	r2, #3
 800cfec:	4650      	mov	r0, sl
 800cfee:	f7f3 f8f7 	bl	80001e0 <memchr>
 800cff2:	b140      	cbz	r0, 800d006 <_svfiprintf_r+0x152>
 800cff4:	2340      	movs	r3, #64	; 0x40
 800cff6:	eba0 000a 	sub.w	r0, r0, sl
 800cffa:	fa03 f000 	lsl.w	r0, r3, r0
 800cffe:	9b04      	ldr	r3, [sp, #16]
 800d000:	4303      	orrs	r3, r0
 800d002:	3401      	adds	r4, #1
 800d004:	9304      	str	r3, [sp, #16]
 800d006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d00a:	4826      	ldr	r0, [pc, #152]	; (800d0a4 <_svfiprintf_r+0x1f0>)
 800d00c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d010:	2206      	movs	r2, #6
 800d012:	f7f3 f8e5 	bl	80001e0 <memchr>
 800d016:	2800      	cmp	r0, #0
 800d018:	d038      	beq.n	800d08c <_svfiprintf_r+0x1d8>
 800d01a:	4b23      	ldr	r3, [pc, #140]	; (800d0a8 <_svfiprintf_r+0x1f4>)
 800d01c:	bb1b      	cbnz	r3, 800d066 <_svfiprintf_r+0x1b2>
 800d01e:	9b03      	ldr	r3, [sp, #12]
 800d020:	3307      	adds	r3, #7
 800d022:	f023 0307 	bic.w	r3, r3, #7
 800d026:	3308      	adds	r3, #8
 800d028:	9303      	str	r3, [sp, #12]
 800d02a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d02c:	4433      	add	r3, r6
 800d02e:	9309      	str	r3, [sp, #36]	; 0x24
 800d030:	e767      	b.n	800cf02 <_svfiprintf_r+0x4e>
 800d032:	fb0c 3202 	mla	r2, ip, r2, r3
 800d036:	460c      	mov	r4, r1
 800d038:	2001      	movs	r0, #1
 800d03a:	e7a5      	b.n	800cf88 <_svfiprintf_r+0xd4>
 800d03c:	2300      	movs	r3, #0
 800d03e:	3401      	adds	r4, #1
 800d040:	9305      	str	r3, [sp, #20]
 800d042:	4619      	mov	r1, r3
 800d044:	f04f 0c0a 	mov.w	ip, #10
 800d048:	4620      	mov	r0, r4
 800d04a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d04e:	3a30      	subs	r2, #48	; 0x30
 800d050:	2a09      	cmp	r2, #9
 800d052:	d903      	bls.n	800d05c <_svfiprintf_r+0x1a8>
 800d054:	2b00      	cmp	r3, #0
 800d056:	d0c5      	beq.n	800cfe4 <_svfiprintf_r+0x130>
 800d058:	9105      	str	r1, [sp, #20]
 800d05a:	e7c3      	b.n	800cfe4 <_svfiprintf_r+0x130>
 800d05c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d060:	4604      	mov	r4, r0
 800d062:	2301      	movs	r3, #1
 800d064:	e7f0      	b.n	800d048 <_svfiprintf_r+0x194>
 800d066:	ab03      	add	r3, sp, #12
 800d068:	9300      	str	r3, [sp, #0]
 800d06a:	462a      	mov	r2, r5
 800d06c:	4b0f      	ldr	r3, [pc, #60]	; (800d0ac <_svfiprintf_r+0x1f8>)
 800d06e:	a904      	add	r1, sp, #16
 800d070:	4638      	mov	r0, r7
 800d072:	f7fe f88d 	bl	800b190 <_printf_float>
 800d076:	1c42      	adds	r2, r0, #1
 800d078:	4606      	mov	r6, r0
 800d07a:	d1d6      	bne.n	800d02a <_svfiprintf_r+0x176>
 800d07c:	89ab      	ldrh	r3, [r5, #12]
 800d07e:	065b      	lsls	r3, r3, #25
 800d080:	f53f af2c 	bmi.w	800cedc <_svfiprintf_r+0x28>
 800d084:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d086:	b01d      	add	sp, #116	; 0x74
 800d088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d08c:	ab03      	add	r3, sp, #12
 800d08e:	9300      	str	r3, [sp, #0]
 800d090:	462a      	mov	r2, r5
 800d092:	4b06      	ldr	r3, [pc, #24]	; (800d0ac <_svfiprintf_r+0x1f8>)
 800d094:	a904      	add	r1, sp, #16
 800d096:	4638      	mov	r0, r7
 800d098:	f7fe fb1e 	bl	800b6d8 <_printf_i>
 800d09c:	e7eb      	b.n	800d076 <_svfiprintf_r+0x1c2>
 800d09e:	bf00      	nop
 800d0a0:	0800defc 	.word	0x0800defc
 800d0a4:	0800df06 	.word	0x0800df06
 800d0a8:	0800b191 	.word	0x0800b191
 800d0ac:	0800cdfd 	.word	0x0800cdfd
 800d0b0:	0800df02 	.word	0x0800df02

0800d0b4 <__assert_func>:
 800d0b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d0b6:	4614      	mov	r4, r2
 800d0b8:	461a      	mov	r2, r3
 800d0ba:	4b09      	ldr	r3, [pc, #36]	; (800d0e0 <__assert_func+0x2c>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	4605      	mov	r5, r0
 800d0c0:	68d8      	ldr	r0, [r3, #12]
 800d0c2:	b14c      	cbz	r4, 800d0d8 <__assert_func+0x24>
 800d0c4:	4b07      	ldr	r3, [pc, #28]	; (800d0e4 <__assert_func+0x30>)
 800d0c6:	9100      	str	r1, [sp, #0]
 800d0c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d0cc:	4906      	ldr	r1, [pc, #24]	; (800d0e8 <__assert_func+0x34>)
 800d0ce:	462b      	mov	r3, r5
 800d0d0:	f000 f80e 	bl	800d0f0 <fiprintf>
 800d0d4:	f000 faa4 	bl	800d620 <abort>
 800d0d8:	4b04      	ldr	r3, [pc, #16]	; (800d0ec <__assert_func+0x38>)
 800d0da:	461c      	mov	r4, r3
 800d0dc:	e7f3      	b.n	800d0c6 <__assert_func+0x12>
 800d0de:	bf00      	nop
 800d0e0:	200000fc 	.word	0x200000fc
 800d0e4:	0800df0d 	.word	0x0800df0d
 800d0e8:	0800df1a 	.word	0x0800df1a
 800d0ec:	0800df48 	.word	0x0800df48

0800d0f0 <fiprintf>:
 800d0f0:	b40e      	push	{r1, r2, r3}
 800d0f2:	b503      	push	{r0, r1, lr}
 800d0f4:	4601      	mov	r1, r0
 800d0f6:	ab03      	add	r3, sp, #12
 800d0f8:	4805      	ldr	r0, [pc, #20]	; (800d110 <fiprintf+0x20>)
 800d0fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0fe:	6800      	ldr	r0, [r0, #0]
 800d100:	9301      	str	r3, [sp, #4]
 800d102:	f000 f88f 	bl	800d224 <_vfiprintf_r>
 800d106:	b002      	add	sp, #8
 800d108:	f85d eb04 	ldr.w	lr, [sp], #4
 800d10c:	b003      	add	sp, #12
 800d10e:	4770      	bx	lr
 800d110:	200000fc 	.word	0x200000fc

0800d114 <__retarget_lock_init_recursive>:
 800d114:	4770      	bx	lr

0800d116 <__retarget_lock_acquire_recursive>:
 800d116:	4770      	bx	lr

0800d118 <__retarget_lock_release_recursive>:
 800d118:	4770      	bx	lr

0800d11a <__ascii_mbtowc>:
 800d11a:	b082      	sub	sp, #8
 800d11c:	b901      	cbnz	r1, 800d120 <__ascii_mbtowc+0x6>
 800d11e:	a901      	add	r1, sp, #4
 800d120:	b142      	cbz	r2, 800d134 <__ascii_mbtowc+0x1a>
 800d122:	b14b      	cbz	r3, 800d138 <__ascii_mbtowc+0x1e>
 800d124:	7813      	ldrb	r3, [r2, #0]
 800d126:	600b      	str	r3, [r1, #0]
 800d128:	7812      	ldrb	r2, [r2, #0]
 800d12a:	1e10      	subs	r0, r2, #0
 800d12c:	bf18      	it	ne
 800d12e:	2001      	movne	r0, #1
 800d130:	b002      	add	sp, #8
 800d132:	4770      	bx	lr
 800d134:	4610      	mov	r0, r2
 800d136:	e7fb      	b.n	800d130 <__ascii_mbtowc+0x16>
 800d138:	f06f 0001 	mvn.w	r0, #1
 800d13c:	e7f8      	b.n	800d130 <__ascii_mbtowc+0x16>

0800d13e <memmove>:
 800d13e:	4288      	cmp	r0, r1
 800d140:	b510      	push	{r4, lr}
 800d142:	eb01 0402 	add.w	r4, r1, r2
 800d146:	d902      	bls.n	800d14e <memmove+0x10>
 800d148:	4284      	cmp	r4, r0
 800d14a:	4623      	mov	r3, r4
 800d14c:	d807      	bhi.n	800d15e <memmove+0x20>
 800d14e:	1e43      	subs	r3, r0, #1
 800d150:	42a1      	cmp	r1, r4
 800d152:	d008      	beq.n	800d166 <memmove+0x28>
 800d154:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d158:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d15c:	e7f8      	b.n	800d150 <memmove+0x12>
 800d15e:	4402      	add	r2, r0
 800d160:	4601      	mov	r1, r0
 800d162:	428a      	cmp	r2, r1
 800d164:	d100      	bne.n	800d168 <memmove+0x2a>
 800d166:	bd10      	pop	{r4, pc}
 800d168:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d16c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d170:	e7f7      	b.n	800d162 <memmove+0x24>

0800d172 <_realloc_r>:
 800d172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d176:	4680      	mov	r8, r0
 800d178:	4614      	mov	r4, r2
 800d17a:	460e      	mov	r6, r1
 800d17c:	b921      	cbnz	r1, 800d188 <_realloc_r+0x16>
 800d17e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d182:	4611      	mov	r1, r2
 800d184:	f7fd bef0 	b.w	800af68 <_malloc_r>
 800d188:	b92a      	cbnz	r2, 800d196 <_realloc_r+0x24>
 800d18a:	f7fd fe81 	bl	800ae90 <_free_r>
 800d18e:	4625      	mov	r5, r4
 800d190:	4628      	mov	r0, r5
 800d192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d196:	f000 fc67 	bl	800da68 <_malloc_usable_size_r>
 800d19a:	4284      	cmp	r4, r0
 800d19c:	4607      	mov	r7, r0
 800d19e:	d802      	bhi.n	800d1a6 <_realloc_r+0x34>
 800d1a0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d1a4:	d812      	bhi.n	800d1cc <_realloc_r+0x5a>
 800d1a6:	4621      	mov	r1, r4
 800d1a8:	4640      	mov	r0, r8
 800d1aa:	f7fd fedd 	bl	800af68 <_malloc_r>
 800d1ae:	4605      	mov	r5, r0
 800d1b0:	2800      	cmp	r0, #0
 800d1b2:	d0ed      	beq.n	800d190 <_realloc_r+0x1e>
 800d1b4:	42bc      	cmp	r4, r7
 800d1b6:	4622      	mov	r2, r4
 800d1b8:	4631      	mov	r1, r6
 800d1ba:	bf28      	it	cs
 800d1bc:	463a      	movcs	r2, r7
 800d1be:	f7ff fa69 	bl	800c694 <memcpy>
 800d1c2:	4631      	mov	r1, r6
 800d1c4:	4640      	mov	r0, r8
 800d1c6:	f7fd fe63 	bl	800ae90 <_free_r>
 800d1ca:	e7e1      	b.n	800d190 <_realloc_r+0x1e>
 800d1cc:	4635      	mov	r5, r6
 800d1ce:	e7df      	b.n	800d190 <_realloc_r+0x1e>

0800d1d0 <__sfputc_r>:
 800d1d0:	6893      	ldr	r3, [r2, #8]
 800d1d2:	3b01      	subs	r3, #1
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	b410      	push	{r4}
 800d1d8:	6093      	str	r3, [r2, #8]
 800d1da:	da08      	bge.n	800d1ee <__sfputc_r+0x1e>
 800d1dc:	6994      	ldr	r4, [r2, #24]
 800d1de:	42a3      	cmp	r3, r4
 800d1e0:	db01      	blt.n	800d1e6 <__sfputc_r+0x16>
 800d1e2:	290a      	cmp	r1, #10
 800d1e4:	d103      	bne.n	800d1ee <__sfputc_r+0x1e>
 800d1e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1ea:	f000 b94b 	b.w	800d484 <__swbuf_r>
 800d1ee:	6813      	ldr	r3, [r2, #0]
 800d1f0:	1c58      	adds	r0, r3, #1
 800d1f2:	6010      	str	r0, [r2, #0]
 800d1f4:	7019      	strb	r1, [r3, #0]
 800d1f6:	4608      	mov	r0, r1
 800d1f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1fc:	4770      	bx	lr

0800d1fe <__sfputs_r>:
 800d1fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d200:	4606      	mov	r6, r0
 800d202:	460f      	mov	r7, r1
 800d204:	4614      	mov	r4, r2
 800d206:	18d5      	adds	r5, r2, r3
 800d208:	42ac      	cmp	r4, r5
 800d20a:	d101      	bne.n	800d210 <__sfputs_r+0x12>
 800d20c:	2000      	movs	r0, #0
 800d20e:	e007      	b.n	800d220 <__sfputs_r+0x22>
 800d210:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d214:	463a      	mov	r2, r7
 800d216:	4630      	mov	r0, r6
 800d218:	f7ff ffda 	bl	800d1d0 <__sfputc_r>
 800d21c:	1c43      	adds	r3, r0, #1
 800d21e:	d1f3      	bne.n	800d208 <__sfputs_r+0xa>
 800d220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d224 <_vfiprintf_r>:
 800d224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d228:	460d      	mov	r5, r1
 800d22a:	b09d      	sub	sp, #116	; 0x74
 800d22c:	4614      	mov	r4, r2
 800d22e:	4698      	mov	r8, r3
 800d230:	4606      	mov	r6, r0
 800d232:	b118      	cbz	r0, 800d23c <_vfiprintf_r+0x18>
 800d234:	6983      	ldr	r3, [r0, #24]
 800d236:	b90b      	cbnz	r3, 800d23c <_vfiprintf_r+0x18>
 800d238:	f000 fb14 	bl	800d864 <__sinit>
 800d23c:	4b89      	ldr	r3, [pc, #548]	; (800d464 <_vfiprintf_r+0x240>)
 800d23e:	429d      	cmp	r5, r3
 800d240:	d11b      	bne.n	800d27a <_vfiprintf_r+0x56>
 800d242:	6875      	ldr	r5, [r6, #4]
 800d244:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d246:	07d9      	lsls	r1, r3, #31
 800d248:	d405      	bmi.n	800d256 <_vfiprintf_r+0x32>
 800d24a:	89ab      	ldrh	r3, [r5, #12]
 800d24c:	059a      	lsls	r2, r3, #22
 800d24e:	d402      	bmi.n	800d256 <_vfiprintf_r+0x32>
 800d250:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d252:	f7ff ff60 	bl	800d116 <__retarget_lock_acquire_recursive>
 800d256:	89ab      	ldrh	r3, [r5, #12]
 800d258:	071b      	lsls	r3, r3, #28
 800d25a:	d501      	bpl.n	800d260 <_vfiprintf_r+0x3c>
 800d25c:	692b      	ldr	r3, [r5, #16]
 800d25e:	b9eb      	cbnz	r3, 800d29c <_vfiprintf_r+0x78>
 800d260:	4629      	mov	r1, r5
 800d262:	4630      	mov	r0, r6
 800d264:	f000 f96e 	bl	800d544 <__swsetup_r>
 800d268:	b1c0      	cbz	r0, 800d29c <_vfiprintf_r+0x78>
 800d26a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d26c:	07dc      	lsls	r4, r3, #31
 800d26e:	d50e      	bpl.n	800d28e <_vfiprintf_r+0x6a>
 800d270:	f04f 30ff 	mov.w	r0, #4294967295
 800d274:	b01d      	add	sp, #116	; 0x74
 800d276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d27a:	4b7b      	ldr	r3, [pc, #492]	; (800d468 <_vfiprintf_r+0x244>)
 800d27c:	429d      	cmp	r5, r3
 800d27e:	d101      	bne.n	800d284 <_vfiprintf_r+0x60>
 800d280:	68b5      	ldr	r5, [r6, #8]
 800d282:	e7df      	b.n	800d244 <_vfiprintf_r+0x20>
 800d284:	4b79      	ldr	r3, [pc, #484]	; (800d46c <_vfiprintf_r+0x248>)
 800d286:	429d      	cmp	r5, r3
 800d288:	bf08      	it	eq
 800d28a:	68f5      	ldreq	r5, [r6, #12]
 800d28c:	e7da      	b.n	800d244 <_vfiprintf_r+0x20>
 800d28e:	89ab      	ldrh	r3, [r5, #12]
 800d290:	0598      	lsls	r0, r3, #22
 800d292:	d4ed      	bmi.n	800d270 <_vfiprintf_r+0x4c>
 800d294:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d296:	f7ff ff3f 	bl	800d118 <__retarget_lock_release_recursive>
 800d29a:	e7e9      	b.n	800d270 <_vfiprintf_r+0x4c>
 800d29c:	2300      	movs	r3, #0
 800d29e:	9309      	str	r3, [sp, #36]	; 0x24
 800d2a0:	2320      	movs	r3, #32
 800d2a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2aa:	2330      	movs	r3, #48	; 0x30
 800d2ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d470 <_vfiprintf_r+0x24c>
 800d2b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2b4:	f04f 0901 	mov.w	r9, #1
 800d2b8:	4623      	mov	r3, r4
 800d2ba:	469a      	mov	sl, r3
 800d2bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2c0:	b10a      	cbz	r2, 800d2c6 <_vfiprintf_r+0xa2>
 800d2c2:	2a25      	cmp	r2, #37	; 0x25
 800d2c4:	d1f9      	bne.n	800d2ba <_vfiprintf_r+0x96>
 800d2c6:	ebba 0b04 	subs.w	fp, sl, r4
 800d2ca:	d00b      	beq.n	800d2e4 <_vfiprintf_r+0xc0>
 800d2cc:	465b      	mov	r3, fp
 800d2ce:	4622      	mov	r2, r4
 800d2d0:	4629      	mov	r1, r5
 800d2d2:	4630      	mov	r0, r6
 800d2d4:	f7ff ff93 	bl	800d1fe <__sfputs_r>
 800d2d8:	3001      	adds	r0, #1
 800d2da:	f000 80aa 	beq.w	800d432 <_vfiprintf_r+0x20e>
 800d2de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2e0:	445a      	add	r2, fp
 800d2e2:	9209      	str	r2, [sp, #36]	; 0x24
 800d2e4:	f89a 3000 	ldrb.w	r3, [sl]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	f000 80a2 	beq.w	800d432 <_vfiprintf_r+0x20e>
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	f04f 32ff 	mov.w	r2, #4294967295
 800d2f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2f8:	f10a 0a01 	add.w	sl, sl, #1
 800d2fc:	9304      	str	r3, [sp, #16]
 800d2fe:	9307      	str	r3, [sp, #28]
 800d300:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d304:	931a      	str	r3, [sp, #104]	; 0x68
 800d306:	4654      	mov	r4, sl
 800d308:	2205      	movs	r2, #5
 800d30a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d30e:	4858      	ldr	r0, [pc, #352]	; (800d470 <_vfiprintf_r+0x24c>)
 800d310:	f7f2 ff66 	bl	80001e0 <memchr>
 800d314:	9a04      	ldr	r2, [sp, #16]
 800d316:	b9d8      	cbnz	r0, 800d350 <_vfiprintf_r+0x12c>
 800d318:	06d1      	lsls	r1, r2, #27
 800d31a:	bf44      	itt	mi
 800d31c:	2320      	movmi	r3, #32
 800d31e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d322:	0713      	lsls	r3, r2, #28
 800d324:	bf44      	itt	mi
 800d326:	232b      	movmi	r3, #43	; 0x2b
 800d328:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d32c:	f89a 3000 	ldrb.w	r3, [sl]
 800d330:	2b2a      	cmp	r3, #42	; 0x2a
 800d332:	d015      	beq.n	800d360 <_vfiprintf_r+0x13c>
 800d334:	9a07      	ldr	r2, [sp, #28]
 800d336:	4654      	mov	r4, sl
 800d338:	2000      	movs	r0, #0
 800d33a:	f04f 0c0a 	mov.w	ip, #10
 800d33e:	4621      	mov	r1, r4
 800d340:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d344:	3b30      	subs	r3, #48	; 0x30
 800d346:	2b09      	cmp	r3, #9
 800d348:	d94e      	bls.n	800d3e8 <_vfiprintf_r+0x1c4>
 800d34a:	b1b0      	cbz	r0, 800d37a <_vfiprintf_r+0x156>
 800d34c:	9207      	str	r2, [sp, #28]
 800d34e:	e014      	b.n	800d37a <_vfiprintf_r+0x156>
 800d350:	eba0 0308 	sub.w	r3, r0, r8
 800d354:	fa09 f303 	lsl.w	r3, r9, r3
 800d358:	4313      	orrs	r3, r2
 800d35a:	9304      	str	r3, [sp, #16]
 800d35c:	46a2      	mov	sl, r4
 800d35e:	e7d2      	b.n	800d306 <_vfiprintf_r+0xe2>
 800d360:	9b03      	ldr	r3, [sp, #12]
 800d362:	1d19      	adds	r1, r3, #4
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	9103      	str	r1, [sp, #12]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	bfbb      	ittet	lt
 800d36c:	425b      	neglt	r3, r3
 800d36e:	f042 0202 	orrlt.w	r2, r2, #2
 800d372:	9307      	strge	r3, [sp, #28]
 800d374:	9307      	strlt	r3, [sp, #28]
 800d376:	bfb8      	it	lt
 800d378:	9204      	strlt	r2, [sp, #16]
 800d37a:	7823      	ldrb	r3, [r4, #0]
 800d37c:	2b2e      	cmp	r3, #46	; 0x2e
 800d37e:	d10c      	bne.n	800d39a <_vfiprintf_r+0x176>
 800d380:	7863      	ldrb	r3, [r4, #1]
 800d382:	2b2a      	cmp	r3, #42	; 0x2a
 800d384:	d135      	bne.n	800d3f2 <_vfiprintf_r+0x1ce>
 800d386:	9b03      	ldr	r3, [sp, #12]
 800d388:	1d1a      	adds	r2, r3, #4
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	9203      	str	r2, [sp, #12]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	bfb8      	it	lt
 800d392:	f04f 33ff 	movlt.w	r3, #4294967295
 800d396:	3402      	adds	r4, #2
 800d398:	9305      	str	r3, [sp, #20]
 800d39a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d480 <_vfiprintf_r+0x25c>
 800d39e:	7821      	ldrb	r1, [r4, #0]
 800d3a0:	2203      	movs	r2, #3
 800d3a2:	4650      	mov	r0, sl
 800d3a4:	f7f2 ff1c 	bl	80001e0 <memchr>
 800d3a8:	b140      	cbz	r0, 800d3bc <_vfiprintf_r+0x198>
 800d3aa:	2340      	movs	r3, #64	; 0x40
 800d3ac:	eba0 000a 	sub.w	r0, r0, sl
 800d3b0:	fa03 f000 	lsl.w	r0, r3, r0
 800d3b4:	9b04      	ldr	r3, [sp, #16]
 800d3b6:	4303      	orrs	r3, r0
 800d3b8:	3401      	adds	r4, #1
 800d3ba:	9304      	str	r3, [sp, #16]
 800d3bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3c0:	482c      	ldr	r0, [pc, #176]	; (800d474 <_vfiprintf_r+0x250>)
 800d3c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d3c6:	2206      	movs	r2, #6
 800d3c8:	f7f2 ff0a 	bl	80001e0 <memchr>
 800d3cc:	2800      	cmp	r0, #0
 800d3ce:	d03f      	beq.n	800d450 <_vfiprintf_r+0x22c>
 800d3d0:	4b29      	ldr	r3, [pc, #164]	; (800d478 <_vfiprintf_r+0x254>)
 800d3d2:	bb1b      	cbnz	r3, 800d41c <_vfiprintf_r+0x1f8>
 800d3d4:	9b03      	ldr	r3, [sp, #12]
 800d3d6:	3307      	adds	r3, #7
 800d3d8:	f023 0307 	bic.w	r3, r3, #7
 800d3dc:	3308      	adds	r3, #8
 800d3de:	9303      	str	r3, [sp, #12]
 800d3e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3e2:	443b      	add	r3, r7
 800d3e4:	9309      	str	r3, [sp, #36]	; 0x24
 800d3e6:	e767      	b.n	800d2b8 <_vfiprintf_r+0x94>
 800d3e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3ec:	460c      	mov	r4, r1
 800d3ee:	2001      	movs	r0, #1
 800d3f0:	e7a5      	b.n	800d33e <_vfiprintf_r+0x11a>
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	3401      	adds	r4, #1
 800d3f6:	9305      	str	r3, [sp, #20]
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	f04f 0c0a 	mov.w	ip, #10
 800d3fe:	4620      	mov	r0, r4
 800d400:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d404:	3a30      	subs	r2, #48	; 0x30
 800d406:	2a09      	cmp	r2, #9
 800d408:	d903      	bls.n	800d412 <_vfiprintf_r+0x1ee>
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d0c5      	beq.n	800d39a <_vfiprintf_r+0x176>
 800d40e:	9105      	str	r1, [sp, #20]
 800d410:	e7c3      	b.n	800d39a <_vfiprintf_r+0x176>
 800d412:	fb0c 2101 	mla	r1, ip, r1, r2
 800d416:	4604      	mov	r4, r0
 800d418:	2301      	movs	r3, #1
 800d41a:	e7f0      	b.n	800d3fe <_vfiprintf_r+0x1da>
 800d41c:	ab03      	add	r3, sp, #12
 800d41e:	9300      	str	r3, [sp, #0]
 800d420:	462a      	mov	r2, r5
 800d422:	4b16      	ldr	r3, [pc, #88]	; (800d47c <_vfiprintf_r+0x258>)
 800d424:	a904      	add	r1, sp, #16
 800d426:	4630      	mov	r0, r6
 800d428:	f7fd feb2 	bl	800b190 <_printf_float>
 800d42c:	4607      	mov	r7, r0
 800d42e:	1c78      	adds	r0, r7, #1
 800d430:	d1d6      	bne.n	800d3e0 <_vfiprintf_r+0x1bc>
 800d432:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d434:	07d9      	lsls	r1, r3, #31
 800d436:	d405      	bmi.n	800d444 <_vfiprintf_r+0x220>
 800d438:	89ab      	ldrh	r3, [r5, #12]
 800d43a:	059a      	lsls	r2, r3, #22
 800d43c:	d402      	bmi.n	800d444 <_vfiprintf_r+0x220>
 800d43e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d440:	f7ff fe6a 	bl	800d118 <__retarget_lock_release_recursive>
 800d444:	89ab      	ldrh	r3, [r5, #12]
 800d446:	065b      	lsls	r3, r3, #25
 800d448:	f53f af12 	bmi.w	800d270 <_vfiprintf_r+0x4c>
 800d44c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d44e:	e711      	b.n	800d274 <_vfiprintf_r+0x50>
 800d450:	ab03      	add	r3, sp, #12
 800d452:	9300      	str	r3, [sp, #0]
 800d454:	462a      	mov	r2, r5
 800d456:	4b09      	ldr	r3, [pc, #36]	; (800d47c <_vfiprintf_r+0x258>)
 800d458:	a904      	add	r1, sp, #16
 800d45a:	4630      	mov	r0, r6
 800d45c:	f7fe f93c 	bl	800b6d8 <_printf_i>
 800d460:	e7e4      	b.n	800d42c <_vfiprintf_r+0x208>
 800d462:	bf00      	nop
 800d464:	0800e074 	.word	0x0800e074
 800d468:	0800e094 	.word	0x0800e094
 800d46c:	0800e054 	.word	0x0800e054
 800d470:	0800defc 	.word	0x0800defc
 800d474:	0800df06 	.word	0x0800df06
 800d478:	0800b191 	.word	0x0800b191
 800d47c:	0800d1ff 	.word	0x0800d1ff
 800d480:	0800df02 	.word	0x0800df02

0800d484 <__swbuf_r>:
 800d484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d486:	460e      	mov	r6, r1
 800d488:	4614      	mov	r4, r2
 800d48a:	4605      	mov	r5, r0
 800d48c:	b118      	cbz	r0, 800d496 <__swbuf_r+0x12>
 800d48e:	6983      	ldr	r3, [r0, #24]
 800d490:	b90b      	cbnz	r3, 800d496 <__swbuf_r+0x12>
 800d492:	f000 f9e7 	bl	800d864 <__sinit>
 800d496:	4b21      	ldr	r3, [pc, #132]	; (800d51c <__swbuf_r+0x98>)
 800d498:	429c      	cmp	r4, r3
 800d49a:	d12b      	bne.n	800d4f4 <__swbuf_r+0x70>
 800d49c:	686c      	ldr	r4, [r5, #4]
 800d49e:	69a3      	ldr	r3, [r4, #24]
 800d4a0:	60a3      	str	r3, [r4, #8]
 800d4a2:	89a3      	ldrh	r3, [r4, #12]
 800d4a4:	071a      	lsls	r2, r3, #28
 800d4a6:	d52f      	bpl.n	800d508 <__swbuf_r+0x84>
 800d4a8:	6923      	ldr	r3, [r4, #16]
 800d4aa:	b36b      	cbz	r3, 800d508 <__swbuf_r+0x84>
 800d4ac:	6923      	ldr	r3, [r4, #16]
 800d4ae:	6820      	ldr	r0, [r4, #0]
 800d4b0:	1ac0      	subs	r0, r0, r3
 800d4b2:	6963      	ldr	r3, [r4, #20]
 800d4b4:	b2f6      	uxtb	r6, r6
 800d4b6:	4283      	cmp	r3, r0
 800d4b8:	4637      	mov	r7, r6
 800d4ba:	dc04      	bgt.n	800d4c6 <__swbuf_r+0x42>
 800d4bc:	4621      	mov	r1, r4
 800d4be:	4628      	mov	r0, r5
 800d4c0:	f000 f93c 	bl	800d73c <_fflush_r>
 800d4c4:	bb30      	cbnz	r0, 800d514 <__swbuf_r+0x90>
 800d4c6:	68a3      	ldr	r3, [r4, #8]
 800d4c8:	3b01      	subs	r3, #1
 800d4ca:	60a3      	str	r3, [r4, #8]
 800d4cc:	6823      	ldr	r3, [r4, #0]
 800d4ce:	1c5a      	adds	r2, r3, #1
 800d4d0:	6022      	str	r2, [r4, #0]
 800d4d2:	701e      	strb	r6, [r3, #0]
 800d4d4:	6963      	ldr	r3, [r4, #20]
 800d4d6:	3001      	adds	r0, #1
 800d4d8:	4283      	cmp	r3, r0
 800d4da:	d004      	beq.n	800d4e6 <__swbuf_r+0x62>
 800d4dc:	89a3      	ldrh	r3, [r4, #12]
 800d4de:	07db      	lsls	r3, r3, #31
 800d4e0:	d506      	bpl.n	800d4f0 <__swbuf_r+0x6c>
 800d4e2:	2e0a      	cmp	r6, #10
 800d4e4:	d104      	bne.n	800d4f0 <__swbuf_r+0x6c>
 800d4e6:	4621      	mov	r1, r4
 800d4e8:	4628      	mov	r0, r5
 800d4ea:	f000 f927 	bl	800d73c <_fflush_r>
 800d4ee:	b988      	cbnz	r0, 800d514 <__swbuf_r+0x90>
 800d4f0:	4638      	mov	r0, r7
 800d4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4f4:	4b0a      	ldr	r3, [pc, #40]	; (800d520 <__swbuf_r+0x9c>)
 800d4f6:	429c      	cmp	r4, r3
 800d4f8:	d101      	bne.n	800d4fe <__swbuf_r+0x7a>
 800d4fa:	68ac      	ldr	r4, [r5, #8]
 800d4fc:	e7cf      	b.n	800d49e <__swbuf_r+0x1a>
 800d4fe:	4b09      	ldr	r3, [pc, #36]	; (800d524 <__swbuf_r+0xa0>)
 800d500:	429c      	cmp	r4, r3
 800d502:	bf08      	it	eq
 800d504:	68ec      	ldreq	r4, [r5, #12]
 800d506:	e7ca      	b.n	800d49e <__swbuf_r+0x1a>
 800d508:	4621      	mov	r1, r4
 800d50a:	4628      	mov	r0, r5
 800d50c:	f000 f81a 	bl	800d544 <__swsetup_r>
 800d510:	2800      	cmp	r0, #0
 800d512:	d0cb      	beq.n	800d4ac <__swbuf_r+0x28>
 800d514:	f04f 37ff 	mov.w	r7, #4294967295
 800d518:	e7ea      	b.n	800d4f0 <__swbuf_r+0x6c>
 800d51a:	bf00      	nop
 800d51c:	0800e074 	.word	0x0800e074
 800d520:	0800e094 	.word	0x0800e094
 800d524:	0800e054 	.word	0x0800e054

0800d528 <__ascii_wctomb>:
 800d528:	b149      	cbz	r1, 800d53e <__ascii_wctomb+0x16>
 800d52a:	2aff      	cmp	r2, #255	; 0xff
 800d52c:	bf85      	ittet	hi
 800d52e:	238a      	movhi	r3, #138	; 0x8a
 800d530:	6003      	strhi	r3, [r0, #0]
 800d532:	700a      	strbls	r2, [r1, #0]
 800d534:	f04f 30ff 	movhi.w	r0, #4294967295
 800d538:	bf98      	it	ls
 800d53a:	2001      	movls	r0, #1
 800d53c:	4770      	bx	lr
 800d53e:	4608      	mov	r0, r1
 800d540:	4770      	bx	lr
	...

0800d544 <__swsetup_r>:
 800d544:	4b32      	ldr	r3, [pc, #200]	; (800d610 <__swsetup_r+0xcc>)
 800d546:	b570      	push	{r4, r5, r6, lr}
 800d548:	681d      	ldr	r5, [r3, #0]
 800d54a:	4606      	mov	r6, r0
 800d54c:	460c      	mov	r4, r1
 800d54e:	b125      	cbz	r5, 800d55a <__swsetup_r+0x16>
 800d550:	69ab      	ldr	r3, [r5, #24]
 800d552:	b913      	cbnz	r3, 800d55a <__swsetup_r+0x16>
 800d554:	4628      	mov	r0, r5
 800d556:	f000 f985 	bl	800d864 <__sinit>
 800d55a:	4b2e      	ldr	r3, [pc, #184]	; (800d614 <__swsetup_r+0xd0>)
 800d55c:	429c      	cmp	r4, r3
 800d55e:	d10f      	bne.n	800d580 <__swsetup_r+0x3c>
 800d560:	686c      	ldr	r4, [r5, #4]
 800d562:	89a3      	ldrh	r3, [r4, #12]
 800d564:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d568:	0719      	lsls	r1, r3, #28
 800d56a:	d42c      	bmi.n	800d5c6 <__swsetup_r+0x82>
 800d56c:	06dd      	lsls	r5, r3, #27
 800d56e:	d411      	bmi.n	800d594 <__swsetup_r+0x50>
 800d570:	2309      	movs	r3, #9
 800d572:	6033      	str	r3, [r6, #0]
 800d574:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d578:	81a3      	strh	r3, [r4, #12]
 800d57a:	f04f 30ff 	mov.w	r0, #4294967295
 800d57e:	e03e      	b.n	800d5fe <__swsetup_r+0xba>
 800d580:	4b25      	ldr	r3, [pc, #148]	; (800d618 <__swsetup_r+0xd4>)
 800d582:	429c      	cmp	r4, r3
 800d584:	d101      	bne.n	800d58a <__swsetup_r+0x46>
 800d586:	68ac      	ldr	r4, [r5, #8]
 800d588:	e7eb      	b.n	800d562 <__swsetup_r+0x1e>
 800d58a:	4b24      	ldr	r3, [pc, #144]	; (800d61c <__swsetup_r+0xd8>)
 800d58c:	429c      	cmp	r4, r3
 800d58e:	bf08      	it	eq
 800d590:	68ec      	ldreq	r4, [r5, #12]
 800d592:	e7e6      	b.n	800d562 <__swsetup_r+0x1e>
 800d594:	0758      	lsls	r0, r3, #29
 800d596:	d512      	bpl.n	800d5be <__swsetup_r+0x7a>
 800d598:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d59a:	b141      	cbz	r1, 800d5ae <__swsetup_r+0x6a>
 800d59c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d5a0:	4299      	cmp	r1, r3
 800d5a2:	d002      	beq.n	800d5aa <__swsetup_r+0x66>
 800d5a4:	4630      	mov	r0, r6
 800d5a6:	f7fd fc73 	bl	800ae90 <_free_r>
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	6363      	str	r3, [r4, #52]	; 0x34
 800d5ae:	89a3      	ldrh	r3, [r4, #12]
 800d5b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d5b4:	81a3      	strh	r3, [r4, #12]
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	6063      	str	r3, [r4, #4]
 800d5ba:	6923      	ldr	r3, [r4, #16]
 800d5bc:	6023      	str	r3, [r4, #0]
 800d5be:	89a3      	ldrh	r3, [r4, #12]
 800d5c0:	f043 0308 	orr.w	r3, r3, #8
 800d5c4:	81a3      	strh	r3, [r4, #12]
 800d5c6:	6923      	ldr	r3, [r4, #16]
 800d5c8:	b94b      	cbnz	r3, 800d5de <__swsetup_r+0x9a>
 800d5ca:	89a3      	ldrh	r3, [r4, #12]
 800d5cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d5d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d5d4:	d003      	beq.n	800d5de <__swsetup_r+0x9a>
 800d5d6:	4621      	mov	r1, r4
 800d5d8:	4630      	mov	r0, r6
 800d5da:	f000 fa05 	bl	800d9e8 <__smakebuf_r>
 800d5de:	89a0      	ldrh	r0, [r4, #12]
 800d5e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d5e4:	f010 0301 	ands.w	r3, r0, #1
 800d5e8:	d00a      	beq.n	800d600 <__swsetup_r+0xbc>
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	60a3      	str	r3, [r4, #8]
 800d5ee:	6963      	ldr	r3, [r4, #20]
 800d5f0:	425b      	negs	r3, r3
 800d5f2:	61a3      	str	r3, [r4, #24]
 800d5f4:	6923      	ldr	r3, [r4, #16]
 800d5f6:	b943      	cbnz	r3, 800d60a <__swsetup_r+0xc6>
 800d5f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d5fc:	d1ba      	bne.n	800d574 <__swsetup_r+0x30>
 800d5fe:	bd70      	pop	{r4, r5, r6, pc}
 800d600:	0781      	lsls	r1, r0, #30
 800d602:	bf58      	it	pl
 800d604:	6963      	ldrpl	r3, [r4, #20]
 800d606:	60a3      	str	r3, [r4, #8]
 800d608:	e7f4      	b.n	800d5f4 <__swsetup_r+0xb0>
 800d60a:	2000      	movs	r0, #0
 800d60c:	e7f7      	b.n	800d5fe <__swsetup_r+0xba>
 800d60e:	bf00      	nop
 800d610:	200000fc 	.word	0x200000fc
 800d614:	0800e074 	.word	0x0800e074
 800d618:	0800e094 	.word	0x0800e094
 800d61c:	0800e054 	.word	0x0800e054

0800d620 <abort>:
 800d620:	b508      	push	{r3, lr}
 800d622:	2006      	movs	r0, #6
 800d624:	f000 fa50 	bl	800dac8 <raise>
 800d628:	2001      	movs	r0, #1
 800d62a:	f7f4 f929 	bl	8001880 <_exit>
	...

0800d630 <__sflush_r>:
 800d630:	898a      	ldrh	r2, [r1, #12]
 800d632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d636:	4605      	mov	r5, r0
 800d638:	0710      	lsls	r0, r2, #28
 800d63a:	460c      	mov	r4, r1
 800d63c:	d458      	bmi.n	800d6f0 <__sflush_r+0xc0>
 800d63e:	684b      	ldr	r3, [r1, #4]
 800d640:	2b00      	cmp	r3, #0
 800d642:	dc05      	bgt.n	800d650 <__sflush_r+0x20>
 800d644:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d646:	2b00      	cmp	r3, #0
 800d648:	dc02      	bgt.n	800d650 <__sflush_r+0x20>
 800d64a:	2000      	movs	r0, #0
 800d64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d650:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d652:	2e00      	cmp	r6, #0
 800d654:	d0f9      	beq.n	800d64a <__sflush_r+0x1a>
 800d656:	2300      	movs	r3, #0
 800d658:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d65c:	682f      	ldr	r7, [r5, #0]
 800d65e:	602b      	str	r3, [r5, #0]
 800d660:	d032      	beq.n	800d6c8 <__sflush_r+0x98>
 800d662:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d664:	89a3      	ldrh	r3, [r4, #12]
 800d666:	075a      	lsls	r2, r3, #29
 800d668:	d505      	bpl.n	800d676 <__sflush_r+0x46>
 800d66a:	6863      	ldr	r3, [r4, #4]
 800d66c:	1ac0      	subs	r0, r0, r3
 800d66e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d670:	b10b      	cbz	r3, 800d676 <__sflush_r+0x46>
 800d672:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d674:	1ac0      	subs	r0, r0, r3
 800d676:	2300      	movs	r3, #0
 800d678:	4602      	mov	r2, r0
 800d67a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d67c:	6a21      	ldr	r1, [r4, #32]
 800d67e:	4628      	mov	r0, r5
 800d680:	47b0      	blx	r6
 800d682:	1c43      	adds	r3, r0, #1
 800d684:	89a3      	ldrh	r3, [r4, #12]
 800d686:	d106      	bne.n	800d696 <__sflush_r+0x66>
 800d688:	6829      	ldr	r1, [r5, #0]
 800d68a:	291d      	cmp	r1, #29
 800d68c:	d82c      	bhi.n	800d6e8 <__sflush_r+0xb8>
 800d68e:	4a2a      	ldr	r2, [pc, #168]	; (800d738 <__sflush_r+0x108>)
 800d690:	40ca      	lsrs	r2, r1
 800d692:	07d6      	lsls	r6, r2, #31
 800d694:	d528      	bpl.n	800d6e8 <__sflush_r+0xb8>
 800d696:	2200      	movs	r2, #0
 800d698:	6062      	str	r2, [r4, #4]
 800d69a:	04d9      	lsls	r1, r3, #19
 800d69c:	6922      	ldr	r2, [r4, #16]
 800d69e:	6022      	str	r2, [r4, #0]
 800d6a0:	d504      	bpl.n	800d6ac <__sflush_r+0x7c>
 800d6a2:	1c42      	adds	r2, r0, #1
 800d6a4:	d101      	bne.n	800d6aa <__sflush_r+0x7a>
 800d6a6:	682b      	ldr	r3, [r5, #0]
 800d6a8:	b903      	cbnz	r3, 800d6ac <__sflush_r+0x7c>
 800d6aa:	6560      	str	r0, [r4, #84]	; 0x54
 800d6ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6ae:	602f      	str	r7, [r5, #0]
 800d6b0:	2900      	cmp	r1, #0
 800d6b2:	d0ca      	beq.n	800d64a <__sflush_r+0x1a>
 800d6b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6b8:	4299      	cmp	r1, r3
 800d6ba:	d002      	beq.n	800d6c2 <__sflush_r+0x92>
 800d6bc:	4628      	mov	r0, r5
 800d6be:	f7fd fbe7 	bl	800ae90 <_free_r>
 800d6c2:	2000      	movs	r0, #0
 800d6c4:	6360      	str	r0, [r4, #52]	; 0x34
 800d6c6:	e7c1      	b.n	800d64c <__sflush_r+0x1c>
 800d6c8:	6a21      	ldr	r1, [r4, #32]
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	4628      	mov	r0, r5
 800d6ce:	47b0      	blx	r6
 800d6d0:	1c41      	adds	r1, r0, #1
 800d6d2:	d1c7      	bne.n	800d664 <__sflush_r+0x34>
 800d6d4:	682b      	ldr	r3, [r5, #0]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d0c4      	beq.n	800d664 <__sflush_r+0x34>
 800d6da:	2b1d      	cmp	r3, #29
 800d6dc:	d001      	beq.n	800d6e2 <__sflush_r+0xb2>
 800d6de:	2b16      	cmp	r3, #22
 800d6e0:	d101      	bne.n	800d6e6 <__sflush_r+0xb6>
 800d6e2:	602f      	str	r7, [r5, #0]
 800d6e4:	e7b1      	b.n	800d64a <__sflush_r+0x1a>
 800d6e6:	89a3      	ldrh	r3, [r4, #12]
 800d6e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6ec:	81a3      	strh	r3, [r4, #12]
 800d6ee:	e7ad      	b.n	800d64c <__sflush_r+0x1c>
 800d6f0:	690f      	ldr	r7, [r1, #16]
 800d6f2:	2f00      	cmp	r7, #0
 800d6f4:	d0a9      	beq.n	800d64a <__sflush_r+0x1a>
 800d6f6:	0793      	lsls	r3, r2, #30
 800d6f8:	680e      	ldr	r6, [r1, #0]
 800d6fa:	bf08      	it	eq
 800d6fc:	694b      	ldreq	r3, [r1, #20]
 800d6fe:	600f      	str	r7, [r1, #0]
 800d700:	bf18      	it	ne
 800d702:	2300      	movne	r3, #0
 800d704:	eba6 0807 	sub.w	r8, r6, r7
 800d708:	608b      	str	r3, [r1, #8]
 800d70a:	f1b8 0f00 	cmp.w	r8, #0
 800d70e:	dd9c      	ble.n	800d64a <__sflush_r+0x1a>
 800d710:	6a21      	ldr	r1, [r4, #32]
 800d712:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d714:	4643      	mov	r3, r8
 800d716:	463a      	mov	r2, r7
 800d718:	4628      	mov	r0, r5
 800d71a:	47b0      	blx	r6
 800d71c:	2800      	cmp	r0, #0
 800d71e:	dc06      	bgt.n	800d72e <__sflush_r+0xfe>
 800d720:	89a3      	ldrh	r3, [r4, #12]
 800d722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d726:	81a3      	strh	r3, [r4, #12]
 800d728:	f04f 30ff 	mov.w	r0, #4294967295
 800d72c:	e78e      	b.n	800d64c <__sflush_r+0x1c>
 800d72e:	4407      	add	r7, r0
 800d730:	eba8 0800 	sub.w	r8, r8, r0
 800d734:	e7e9      	b.n	800d70a <__sflush_r+0xda>
 800d736:	bf00      	nop
 800d738:	20400001 	.word	0x20400001

0800d73c <_fflush_r>:
 800d73c:	b538      	push	{r3, r4, r5, lr}
 800d73e:	690b      	ldr	r3, [r1, #16]
 800d740:	4605      	mov	r5, r0
 800d742:	460c      	mov	r4, r1
 800d744:	b913      	cbnz	r3, 800d74c <_fflush_r+0x10>
 800d746:	2500      	movs	r5, #0
 800d748:	4628      	mov	r0, r5
 800d74a:	bd38      	pop	{r3, r4, r5, pc}
 800d74c:	b118      	cbz	r0, 800d756 <_fflush_r+0x1a>
 800d74e:	6983      	ldr	r3, [r0, #24]
 800d750:	b90b      	cbnz	r3, 800d756 <_fflush_r+0x1a>
 800d752:	f000 f887 	bl	800d864 <__sinit>
 800d756:	4b14      	ldr	r3, [pc, #80]	; (800d7a8 <_fflush_r+0x6c>)
 800d758:	429c      	cmp	r4, r3
 800d75a:	d11b      	bne.n	800d794 <_fflush_r+0x58>
 800d75c:	686c      	ldr	r4, [r5, #4]
 800d75e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d0ef      	beq.n	800d746 <_fflush_r+0xa>
 800d766:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d768:	07d0      	lsls	r0, r2, #31
 800d76a:	d404      	bmi.n	800d776 <_fflush_r+0x3a>
 800d76c:	0599      	lsls	r1, r3, #22
 800d76e:	d402      	bmi.n	800d776 <_fflush_r+0x3a>
 800d770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d772:	f7ff fcd0 	bl	800d116 <__retarget_lock_acquire_recursive>
 800d776:	4628      	mov	r0, r5
 800d778:	4621      	mov	r1, r4
 800d77a:	f7ff ff59 	bl	800d630 <__sflush_r>
 800d77e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d780:	07da      	lsls	r2, r3, #31
 800d782:	4605      	mov	r5, r0
 800d784:	d4e0      	bmi.n	800d748 <_fflush_r+0xc>
 800d786:	89a3      	ldrh	r3, [r4, #12]
 800d788:	059b      	lsls	r3, r3, #22
 800d78a:	d4dd      	bmi.n	800d748 <_fflush_r+0xc>
 800d78c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d78e:	f7ff fcc3 	bl	800d118 <__retarget_lock_release_recursive>
 800d792:	e7d9      	b.n	800d748 <_fflush_r+0xc>
 800d794:	4b05      	ldr	r3, [pc, #20]	; (800d7ac <_fflush_r+0x70>)
 800d796:	429c      	cmp	r4, r3
 800d798:	d101      	bne.n	800d79e <_fflush_r+0x62>
 800d79a:	68ac      	ldr	r4, [r5, #8]
 800d79c:	e7df      	b.n	800d75e <_fflush_r+0x22>
 800d79e:	4b04      	ldr	r3, [pc, #16]	; (800d7b0 <_fflush_r+0x74>)
 800d7a0:	429c      	cmp	r4, r3
 800d7a2:	bf08      	it	eq
 800d7a4:	68ec      	ldreq	r4, [r5, #12]
 800d7a6:	e7da      	b.n	800d75e <_fflush_r+0x22>
 800d7a8:	0800e074 	.word	0x0800e074
 800d7ac:	0800e094 	.word	0x0800e094
 800d7b0:	0800e054 	.word	0x0800e054

0800d7b4 <std>:
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	b510      	push	{r4, lr}
 800d7b8:	4604      	mov	r4, r0
 800d7ba:	e9c0 3300 	strd	r3, r3, [r0]
 800d7be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d7c2:	6083      	str	r3, [r0, #8]
 800d7c4:	8181      	strh	r1, [r0, #12]
 800d7c6:	6643      	str	r3, [r0, #100]	; 0x64
 800d7c8:	81c2      	strh	r2, [r0, #14]
 800d7ca:	6183      	str	r3, [r0, #24]
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	2208      	movs	r2, #8
 800d7d0:	305c      	adds	r0, #92	; 0x5c
 800d7d2:	f7fd fb55 	bl	800ae80 <memset>
 800d7d6:	4b05      	ldr	r3, [pc, #20]	; (800d7ec <std+0x38>)
 800d7d8:	6263      	str	r3, [r4, #36]	; 0x24
 800d7da:	4b05      	ldr	r3, [pc, #20]	; (800d7f0 <std+0x3c>)
 800d7dc:	62a3      	str	r3, [r4, #40]	; 0x28
 800d7de:	4b05      	ldr	r3, [pc, #20]	; (800d7f4 <std+0x40>)
 800d7e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d7e2:	4b05      	ldr	r3, [pc, #20]	; (800d7f8 <std+0x44>)
 800d7e4:	6224      	str	r4, [r4, #32]
 800d7e6:	6323      	str	r3, [r4, #48]	; 0x30
 800d7e8:	bd10      	pop	{r4, pc}
 800d7ea:	bf00      	nop
 800d7ec:	0800db01 	.word	0x0800db01
 800d7f0:	0800db23 	.word	0x0800db23
 800d7f4:	0800db5b 	.word	0x0800db5b
 800d7f8:	0800db7f 	.word	0x0800db7f

0800d7fc <_cleanup_r>:
 800d7fc:	4901      	ldr	r1, [pc, #4]	; (800d804 <_cleanup_r+0x8>)
 800d7fe:	f000 b8af 	b.w	800d960 <_fwalk_reent>
 800d802:	bf00      	nop
 800d804:	0800d73d 	.word	0x0800d73d

0800d808 <__sfmoreglue>:
 800d808:	b570      	push	{r4, r5, r6, lr}
 800d80a:	2268      	movs	r2, #104	; 0x68
 800d80c:	1e4d      	subs	r5, r1, #1
 800d80e:	4355      	muls	r5, r2
 800d810:	460e      	mov	r6, r1
 800d812:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d816:	f7fd fba7 	bl	800af68 <_malloc_r>
 800d81a:	4604      	mov	r4, r0
 800d81c:	b140      	cbz	r0, 800d830 <__sfmoreglue+0x28>
 800d81e:	2100      	movs	r1, #0
 800d820:	e9c0 1600 	strd	r1, r6, [r0]
 800d824:	300c      	adds	r0, #12
 800d826:	60a0      	str	r0, [r4, #8]
 800d828:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d82c:	f7fd fb28 	bl	800ae80 <memset>
 800d830:	4620      	mov	r0, r4
 800d832:	bd70      	pop	{r4, r5, r6, pc}

0800d834 <__sfp_lock_acquire>:
 800d834:	4801      	ldr	r0, [pc, #4]	; (800d83c <__sfp_lock_acquire+0x8>)
 800d836:	f7ff bc6e 	b.w	800d116 <__retarget_lock_acquire_recursive>
 800d83a:	bf00      	nop
 800d83c:	20001fa1 	.word	0x20001fa1

0800d840 <__sfp_lock_release>:
 800d840:	4801      	ldr	r0, [pc, #4]	; (800d848 <__sfp_lock_release+0x8>)
 800d842:	f7ff bc69 	b.w	800d118 <__retarget_lock_release_recursive>
 800d846:	bf00      	nop
 800d848:	20001fa1 	.word	0x20001fa1

0800d84c <__sinit_lock_acquire>:
 800d84c:	4801      	ldr	r0, [pc, #4]	; (800d854 <__sinit_lock_acquire+0x8>)
 800d84e:	f7ff bc62 	b.w	800d116 <__retarget_lock_acquire_recursive>
 800d852:	bf00      	nop
 800d854:	20001fa2 	.word	0x20001fa2

0800d858 <__sinit_lock_release>:
 800d858:	4801      	ldr	r0, [pc, #4]	; (800d860 <__sinit_lock_release+0x8>)
 800d85a:	f7ff bc5d 	b.w	800d118 <__retarget_lock_release_recursive>
 800d85e:	bf00      	nop
 800d860:	20001fa2 	.word	0x20001fa2

0800d864 <__sinit>:
 800d864:	b510      	push	{r4, lr}
 800d866:	4604      	mov	r4, r0
 800d868:	f7ff fff0 	bl	800d84c <__sinit_lock_acquire>
 800d86c:	69a3      	ldr	r3, [r4, #24]
 800d86e:	b11b      	cbz	r3, 800d878 <__sinit+0x14>
 800d870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d874:	f7ff bff0 	b.w	800d858 <__sinit_lock_release>
 800d878:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d87c:	6523      	str	r3, [r4, #80]	; 0x50
 800d87e:	4b13      	ldr	r3, [pc, #76]	; (800d8cc <__sinit+0x68>)
 800d880:	4a13      	ldr	r2, [pc, #76]	; (800d8d0 <__sinit+0x6c>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	62a2      	str	r2, [r4, #40]	; 0x28
 800d886:	42a3      	cmp	r3, r4
 800d888:	bf04      	itt	eq
 800d88a:	2301      	moveq	r3, #1
 800d88c:	61a3      	streq	r3, [r4, #24]
 800d88e:	4620      	mov	r0, r4
 800d890:	f000 f820 	bl	800d8d4 <__sfp>
 800d894:	6060      	str	r0, [r4, #4]
 800d896:	4620      	mov	r0, r4
 800d898:	f000 f81c 	bl	800d8d4 <__sfp>
 800d89c:	60a0      	str	r0, [r4, #8]
 800d89e:	4620      	mov	r0, r4
 800d8a0:	f000 f818 	bl	800d8d4 <__sfp>
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	60e0      	str	r0, [r4, #12]
 800d8a8:	2104      	movs	r1, #4
 800d8aa:	6860      	ldr	r0, [r4, #4]
 800d8ac:	f7ff ff82 	bl	800d7b4 <std>
 800d8b0:	68a0      	ldr	r0, [r4, #8]
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	2109      	movs	r1, #9
 800d8b6:	f7ff ff7d 	bl	800d7b4 <std>
 800d8ba:	68e0      	ldr	r0, [r4, #12]
 800d8bc:	2202      	movs	r2, #2
 800d8be:	2112      	movs	r1, #18
 800d8c0:	f7ff ff78 	bl	800d7b4 <std>
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	61a3      	str	r3, [r4, #24]
 800d8c8:	e7d2      	b.n	800d870 <__sinit+0xc>
 800d8ca:	bf00      	nop
 800d8cc:	0800dcdc 	.word	0x0800dcdc
 800d8d0:	0800d7fd 	.word	0x0800d7fd

0800d8d4 <__sfp>:
 800d8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8d6:	4607      	mov	r7, r0
 800d8d8:	f7ff ffac 	bl	800d834 <__sfp_lock_acquire>
 800d8dc:	4b1e      	ldr	r3, [pc, #120]	; (800d958 <__sfp+0x84>)
 800d8de:	681e      	ldr	r6, [r3, #0]
 800d8e0:	69b3      	ldr	r3, [r6, #24]
 800d8e2:	b913      	cbnz	r3, 800d8ea <__sfp+0x16>
 800d8e4:	4630      	mov	r0, r6
 800d8e6:	f7ff ffbd 	bl	800d864 <__sinit>
 800d8ea:	3648      	adds	r6, #72	; 0x48
 800d8ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d8f0:	3b01      	subs	r3, #1
 800d8f2:	d503      	bpl.n	800d8fc <__sfp+0x28>
 800d8f4:	6833      	ldr	r3, [r6, #0]
 800d8f6:	b30b      	cbz	r3, 800d93c <__sfp+0x68>
 800d8f8:	6836      	ldr	r6, [r6, #0]
 800d8fa:	e7f7      	b.n	800d8ec <__sfp+0x18>
 800d8fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d900:	b9d5      	cbnz	r5, 800d938 <__sfp+0x64>
 800d902:	4b16      	ldr	r3, [pc, #88]	; (800d95c <__sfp+0x88>)
 800d904:	60e3      	str	r3, [r4, #12]
 800d906:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d90a:	6665      	str	r5, [r4, #100]	; 0x64
 800d90c:	f7ff fc02 	bl	800d114 <__retarget_lock_init_recursive>
 800d910:	f7ff ff96 	bl	800d840 <__sfp_lock_release>
 800d914:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d918:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d91c:	6025      	str	r5, [r4, #0]
 800d91e:	61a5      	str	r5, [r4, #24]
 800d920:	2208      	movs	r2, #8
 800d922:	4629      	mov	r1, r5
 800d924:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d928:	f7fd faaa 	bl	800ae80 <memset>
 800d92c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d930:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d934:	4620      	mov	r0, r4
 800d936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d938:	3468      	adds	r4, #104	; 0x68
 800d93a:	e7d9      	b.n	800d8f0 <__sfp+0x1c>
 800d93c:	2104      	movs	r1, #4
 800d93e:	4638      	mov	r0, r7
 800d940:	f7ff ff62 	bl	800d808 <__sfmoreglue>
 800d944:	4604      	mov	r4, r0
 800d946:	6030      	str	r0, [r6, #0]
 800d948:	2800      	cmp	r0, #0
 800d94a:	d1d5      	bne.n	800d8f8 <__sfp+0x24>
 800d94c:	f7ff ff78 	bl	800d840 <__sfp_lock_release>
 800d950:	230c      	movs	r3, #12
 800d952:	603b      	str	r3, [r7, #0]
 800d954:	e7ee      	b.n	800d934 <__sfp+0x60>
 800d956:	bf00      	nop
 800d958:	0800dcdc 	.word	0x0800dcdc
 800d95c:	ffff0001 	.word	0xffff0001

0800d960 <_fwalk_reent>:
 800d960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d964:	4606      	mov	r6, r0
 800d966:	4688      	mov	r8, r1
 800d968:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d96c:	2700      	movs	r7, #0
 800d96e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d972:	f1b9 0901 	subs.w	r9, r9, #1
 800d976:	d505      	bpl.n	800d984 <_fwalk_reent+0x24>
 800d978:	6824      	ldr	r4, [r4, #0]
 800d97a:	2c00      	cmp	r4, #0
 800d97c:	d1f7      	bne.n	800d96e <_fwalk_reent+0xe>
 800d97e:	4638      	mov	r0, r7
 800d980:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d984:	89ab      	ldrh	r3, [r5, #12]
 800d986:	2b01      	cmp	r3, #1
 800d988:	d907      	bls.n	800d99a <_fwalk_reent+0x3a>
 800d98a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d98e:	3301      	adds	r3, #1
 800d990:	d003      	beq.n	800d99a <_fwalk_reent+0x3a>
 800d992:	4629      	mov	r1, r5
 800d994:	4630      	mov	r0, r6
 800d996:	47c0      	blx	r8
 800d998:	4307      	orrs	r7, r0
 800d99a:	3568      	adds	r5, #104	; 0x68
 800d99c:	e7e9      	b.n	800d972 <_fwalk_reent+0x12>

0800d99e <__swhatbuf_r>:
 800d99e:	b570      	push	{r4, r5, r6, lr}
 800d9a0:	460e      	mov	r6, r1
 800d9a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9a6:	2900      	cmp	r1, #0
 800d9a8:	b096      	sub	sp, #88	; 0x58
 800d9aa:	4614      	mov	r4, r2
 800d9ac:	461d      	mov	r5, r3
 800d9ae:	da08      	bge.n	800d9c2 <__swhatbuf_r+0x24>
 800d9b0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	602a      	str	r2, [r5, #0]
 800d9b8:	061a      	lsls	r2, r3, #24
 800d9ba:	d410      	bmi.n	800d9de <__swhatbuf_r+0x40>
 800d9bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9c0:	e00e      	b.n	800d9e0 <__swhatbuf_r+0x42>
 800d9c2:	466a      	mov	r2, sp
 800d9c4:	f000 f902 	bl	800dbcc <_fstat_r>
 800d9c8:	2800      	cmp	r0, #0
 800d9ca:	dbf1      	blt.n	800d9b0 <__swhatbuf_r+0x12>
 800d9cc:	9a01      	ldr	r2, [sp, #4]
 800d9ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d9d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d9d6:	425a      	negs	r2, r3
 800d9d8:	415a      	adcs	r2, r3
 800d9da:	602a      	str	r2, [r5, #0]
 800d9dc:	e7ee      	b.n	800d9bc <__swhatbuf_r+0x1e>
 800d9de:	2340      	movs	r3, #64	; 0x40
 800d9e0:	2000      	movs	r0, #0
 800d9e2:	6023      	str	r3, [r4, #0]
 800d9e4:	b016      	add	sp, #88	; 0x58
 800d9e6:	bd70      	pop	{r4, r5, r6, pc}

0800d9e8 <__smakebuf_r>:
 800d9e8:	898b      	ldrh	r3, [r1, #12]
 800d9ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d9ec:	079d      	lsls	r5, r3, #30
 800d9ee:	4606      	mov	r6, r0
 800d9f0:	460c      	mov	r4, r1
 800d9f2:	d507      	bpl.n	800da04 <__smakebuf_r+0x1c>
 800d9f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d9f8:	6023      	str	r3, [r4, #0]
 800d9fa:	6123      	str	r3, [r4, #16]
 800d9fc:	2301      	movs	r3, #1
 800d9fe:	6163      	str	r3, [r4, #20]
 800da00:	b002      	add	sp, #8
 800da02:	bd70      	pop	{r4, r5, r6, pc}
 800da04:	ab01      	add	r3, sp, #4
 800da06:	466a      	mov	r2, sp
 800da08:	f7ff ffc9 	bl	800d99e <__swhatbuf_r>
 800da0c:	9900      	ldr	r1, [sp, #0]
 800da0e:	4605      	mov	r5, r0
 800da10:	4630      	mov	r0, r6
 800da12:	f7fd faa9 	bl	800af68 <_malloc_r>
 800da16:	b948      	cbnz	r0, 800da2c <__smakebuf_r+0x44>
 800da18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da1c:	059a      	lsls	r2, r3, #22
 800da1e:	d4ef      	bmi.n	800da00 <__smakebuf_r+0x18>
 800da20:	f023 0303 	bic.w	r3, r3, #3
 800da24:	f043 0302 	orr.w	r3, r3, #2
 800da28:	81a3      	strh	r3, [r4, #12]
 800da2a:	e7e3      	b.n	800d9f4 <__smakebuf_r+0xc>
 800da2c:	4b0d      	ldr	r3, [pc, #52]	; (800da64 <__smakebuf_r+0x7c>)
 800da2e:	62b3      	str	r3, [r6, #40]	; 0x28
 800da30:	89a3      	ldrh	r3, [r4, #12]
 800da32:	6020      	str	r0, [r4, #0]
 800da34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da38:	81a3      	strh	r3, [r4, #12]
 800da3a:	9b00      	ldr	r3, [sp, #0]
 800da3c:	6163      	str	r3, [r4, #20]
 800da3e:	9b01      	ldr	r3, [sp, #4]
 800da40:	6120      	str	r0, [r4, #16]
 800da42:	b15b      	cbz	r3, 800da5c <__smakebuf_r+0x74>
 800da44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da48:	4630      	mov	r0, r6
 800da4a:	f000 f8d1 	bl	800dbf0 <_isatty_r>
 800da4e:	b128      	cbz	r0, 800da5c <__smakebuf_r+0x74>
 800da50:	89a3      	ldrh	r3, [r4, #12]
 800da52:	f023 0303 	bic.w	r3, r3, #3
 800da56:	f043 0301 	orr.w	r3, r3, #1
 800da5a:	81a3      	strh	r3, [r4, #12]
 800da5c:	89a0      	ldrh	r0, [r4, #12]
 800da5e:	4305      	orrs	r5, r0
 800da60:	81a5      	strh	r5, [r4, #12]
 800da62:	e7cd      	b.n	800da00 <__smakebuf_r+0x18>
 800da64:	0800d7fd 	.word	0x0800d7fd

0800da68 <_malloc_usable_size_r>:
 800da68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da6c:	1f18      	subs	r0, r3, #4
 800da6e:	2b00      	cmp	r3, #0
 800da70:	bfbc      	itt	lt
 800da72:	580b      	ldrlt	r3, [r1, r0]
 800da74:	18c0      	addlt	r0, r0, r3
 800da76:	4770      	bx	lr

0800da78 <_raise_r>:
 800da78:	291f      	cmp	r1, #31
 800da7a:	b538      	push	{r3, r4, r5, lr}
 800da7c:	4604      	mov	r4, r0
 800da7e:	460d      	mov	r5, r1
 800da80:	d904      	bls.n	800da8c <_raise_r+0x14>
 800da82:	2316      	movs	r3, #22
 800da84:	6003      	str	r3, [r0, #0]
 800da86:	f04f 30ff 	mov.w	r0, #4294967295
 800da8a:	bd38      	pop	{r3, r4, r5, pc}
 800da8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800da8e:	b112      	cbz	r2, 800da96 <_raise_r+0x1e>
 800da90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da94:	b94b      	cbnz	r3, 800daaa <_raise_r+0x32>
 800da96:	4620      	mov	r0, r4
 800da98:	f000 f830 	bl	800dafc <_getpid_r>
 800da9c:	462a      	mov	r2, r5
 800da9e:	4601      	mov	r1, r0
 800daa0:	4620      	mov	r0, r4
 800daa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800daa6:	f000 b817 	b.w	800dad8 <_kill_r>
 800daaa:	2b01      	cmp	r3, #1
 800daac:	d00a      	beq.n	800dac4 <_raise_r+0x4c>
 800daae:	1c59      	adds	r1, r3, #1
 800dab0:	d103      	bne.n	800daba <_raise_r+0x42>
 800dab2:	2316      	movs	r3, #22
 800dab4:	6003      	str	r3, [r0, #0]
 800dab6:	2001      	movs	r0, #1
 800dab8:	e7e7      	b.n	800da8a <_raise_r+0x12>
 800daba:	2400      	movs	r4, #0
 800dabc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dac0:	4628      	mov	r0, r5
 800dac2:	4798      	blx	r3
 800dac4:	2000      	movs	r0, #0
 800dac6:	e7e0      	b.n	800da8a <_raise_r+0x12>

0800dac8 <raise>:
 800dac8:	4b02      	ldr	r3, [pc, #8]	; (800dad4 <raise+0xc>)
 800daca:	4601      	mov	r1, r0
 800dacc:	6818      	ldr	r0, [r3, #0]
 800dace:	f7ff bfd3 	b.w	800da78 <_raise_r>
 800dad2:	bf00      	nop
 800dad4:	200000fc 	.word	0x200000fc

0800dad8 <_kill_r>:
 800dad8:	b538      	push	{r3, r4, r5, lr}
 800dada:	4d07      	ldr	r5, [pc, #28]	; (800daf8 <_kill_r+0x20>)
 800dadc:	2300      	movs	r3, #0
 800dade:	4604      	mov	r4, r0
 800dae0:	4608      	mov	r0, r1
 800dae2:	4611      	mov	r1, r2
 800dae4:	602b      	str	r3, [r5, #0]
 800dae6:	f7f3 febb 	bl	8001860 <_kill>
 800daea:	1c43      	adds	r3, r0, #1
 800daec:	d102      	bne.n	800daf4 <_kill_r+0x1c>
 800daee:	682b      	ldr	r3, [r5, #0]
 800daf0:	b103      	cbz	r3, 800daf4 <_kill_r+0x1c>
 800daf2:	6023      	str	r3, [r4, #0]
 800daf4:	bd38      	pop	{r3, r4, r5, pc}
 800daf6:	bf00      	nop
 800daf8:	20001f9c 	.word	0x20001f9c

0800dafc <_getpid_r>:
 800dafc:	f7f3 bea8 	b.w	8001850 <_getpid>

0800db00 <__sread>:
 800db00:	b510      	push	{r4, lr}
 800db02:	460c      	mov	r4, r1
 800db04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db08:	f000 f894 	bl	800dc34 <_read_r>
 800db0c:	2800      	cmp	r0, #0
 800db0e:	bfab      	itete	ge
 800db10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800db12:	89a3      	ldrhlt	r3, [r4, #12]
 800db14:	181b      	addge	r3, r3, r0
 800db16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800db1a:	bfac      	ite	ge
 800db1c:	6563      	strge	r3, [r4, #84]	; 0x54
 800db1e:	81a3      	strhlt	r3, [r4, #12]
 800db20:	bd10      	pop	{r4, pc}

0800db22 <__swrite>:
 800db22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db26:	461f      	mov	r7, r3
 800db28:	898b      	ldrh	r3, [r1, #12]
 800db2a:	05db      	lsls	r3, r3, #23
 800db2c:	4605      	mov	r5, r0
 800db2e:	460c      	mov	r4, r1
 800db30:	4616      	mov	r6, r2
 800db32:	d505      	bpl.n	800db40 <__swrite+0x1e>
 800db34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db38:	2302      	movs	r3, #2
 800db3a:	2200      	movs	r2, #0
 800db3c:	f000 f868 	bl	800dc10 <_lseek_r>
 800db40:	89a3      	ldrh	r3, [r4, #12]
 800db42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800db4a:	81a3      	strh	r3, [r4, #12]
 800db4c:	4632      	mov	r2, r6
 800db4e:	463b      	mov	r3, r7
 800db50:	4628      	mov	r0, r5
 800db52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db56:	f000 b817 	b.w	800db88 <_write_r>

0800db5a <__sseek>:
 800db5a:	b510      	push	{r4, lr}
 800db5c:	460c      	mov	r4, r1
 800db5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db62:	f000 f855 	bl	800dc10 <_lseek_r>
 800db66:	1c43      	adds	r3, r0, #1
 800db68:	89a3      	ldrh	r3, [r4, #12]
 800db6a:	bf15      	itete	ne
 800db6c:	6560      	strne	r0, [r4, #84]	; 0x54
 800db6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800db72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800db76:	81a3      	strheq	r3, [r4, #12]
 800db78:	bf18      	it	ne
 800db7a:	81a3      	strhne	r3, [r4, #12]
 800db7c:	bd10      	pop	{r4, pc}

0800db7e <__sclose>:
 800db7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db82:	f000 b813 	b.w	800dbac <_close_r>
	...

0800db88 <_write_r>:
 800db88:	b538      	push	{r3, r4, r5, lr}
 800db8a:	4d07      	ldr	r5, [pc, #28]	; (800dba8 <_write_r+0x20>)
 800db8c:	4604      	mov	r4, r0
 800db8e:	4608      	mov	r0, r1
 800db90:	4611      	mov	r1, r2
 800db92:	2200      	movs	r2, #0
 800db94:	602a      	str	r2, [r5, #0]
 800db96:	461a      	mov	r2, r3
 800db98:	f7f3 fe99 	bl	80018ce <_write>
 800db9c:	1c43      	adds	r3, r0, #1
 800db9e:	d102      	bne.n	800dba6 <_write_r+0x1e>
 800dba0:	682b      	ldr	r3, [r5, #0]
 800dba2:	b103      	cbz	r3, 800dba6 <_write_r+0x1e>
 800dba4:	6023      	str	r3, [r4, #0]
 800dba6:	bd38      	pop	{r3, r4, r5, pc}
 800dba8:	20001f9c 	.word	0x20001f9c

0800dbac <_close_r>:
 800dbac:	b538      	push	{r3, r4, r5, lr}
 800dbae:	4d06      	ldr	r5, [pc, #24]	; (800dbc8 <_close_r+0x1c>)
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	4604      	mov	r4, r0
 800dbb4:	4608      	mov	r0, r1
 800dbb6:	602b      	str	r3, [r5, #0]
 800dbb8:	f7f3 fea5 	bl	8001906 <_close>
 800dbbc:	1c43      	adds	r3, r0, #1
 800dbbe:	d102      	bne.n	800dbc6 <_close_r+0x1a>
 800dbc0:	682b      	ldr	r3, [r5, #0]
 800dbc2:	b103      	cbz	r3, 800dbc6 <_close_r+0x1a>
 800dbc4:	6023      	str	r3, [r4, #0]
 800dbc6:	bd38      	pop	{r3, r4, r5, pc}
 800dbc8:	20001f9c 	.word	0x20001f9c

0800dbcc <_fstat_r>:
 800dbcc:	b538      	push	{r3, r4, r5, lr}
 800dbce:	4d07      	ldr	r5, [pc, #28]	; (800dbec <_fstat_r+0x20>)
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	4604      	mov	r4, r0
 800dbd4:	4608      	mov	r0, r1
 800dbd6:	4611      	mov	r1, r2
 800dbd8:	602b      	str	r3, [r5, #0]
 800dbda:	f7f3 fea0 	bl	800191e <_fstat>
 800dbde:	1c43      	adds	r3, r0, #1
 800dbe0:	d102      	bne.n	800dbe8 <_fstat_r+0x1c>
 800dbe2:	682b      	ldr	r3, [r5, #0]
 800dbe4:	b103      	cbz	r3, 800dbe8 <_fstat_r+0x1c>
 800dbe6:	6023      	str	r3, [r4, #0]
 800dbe8:	bd38      	pop	{r3, r4, r5, pc}
 800dbea:	bf00      	nop
 800dbec:	20001f9c 	.word	0x20001f9c

0800dbf0 <_isatty_r>:
 800dbf0:	b538      	push	{r3, r4, r5, lr}
 800dbf2:	4d06      	ldr	r5, [pc, #24]	; (800dc0c <_isatty_r+0x1c>)
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	4604      	mov	r4, r0
 800dbf8:	4608      	mov	r0, r1
 800dbfa:	602b      	str	r3, [r5, #0]
 800dbfc:	f7f3 fe9f 	bl	800193e <_isatty>
 800dc00:	1c43      	adds	r3, r0, #1
 800dc02:	d102      	bne.n	800dc0a <_isatty_r+0x1a>
 800dc04:	682b      	ldr	r3, [r5, #0]
 800dc06:	b103      	cbz	r3, 800dc0a <_isatty_r+0x1a>
 800dc08:	6023      	str	r3, [r4, #0]
 800dc0a:	bd38      	pop	{r3, r4, r5, pc}
 800dc0c:	20001f9c 	.word	0x20001f9c

0800dc10 <_lseek_r>:
 800dc10:	b538      	push	{r3, r4, r5, lr}
 800dc12:	4d07      	ldr	r5, [pc, #28]	; (800dc30 <_lseek_r+0x20>)
 800dc14:	4604      	mov	r4, r0
 800dc16:	4608      	mov	r0, r1
 800dc18:	4611      	mov	r1, r2
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	602a      	str	r2, [r5, #0]
 800dc1e:	461a      	mov	r2, r3
 800dc20:	f7f3 fe98 	bl	8001954 <_lseek>
 800dc24:	1c43      	adds	r3, r0, #1
 800dc26:	d102      	bne.n	800dc2e <_lseek_r+0x1e>
 800dc28:	682b      	ldr	r3, [r5, #0]
 800dc2a:	b103      	cbz	r3, 800dc2e <_lseek_r+0x1e>
 800dc2c:	6023      	str	r3, [r4, #0]
 800dc2e:	bd38      	pop	{r3, r4, r5, pc}
 800dc30:	20001f9c 	.word	0x20001f9c

0800dc34 <_read_r>:
 800dc34:	b538      	push	{r3, r4, r5, lr}
 800dc36:	4d07      	ldr	r5, [pc, #28]	; (800dc54 <_read_r+0x20>)
 800dc38:	4604      	mov	r4, r0
 800dc3a:	4608      	mov	r0, r1
 800dc3c:	4611      	mov	r1, r2
 800dc3e:	2200      	movs	r2, #0
 800dc40:	602a      	str	r2, [r5, #0]
 800dc42:	461a      	mov	r2, r3
 800dc44:	f7f3 fe26 	bl	8001894 <_read>
 800dc48:	1c43      	adds	r3, r0, #1
 800dc4a:	d102      	bne.n	800dc52 <_read_r+0x1e>
 800dc4c:	682b      	ldr	r3, [r5, #0]
 800dc4e:	b103      	cbz	r3, 800dc52 <_read_r+0x1e>
 800dc50:	6023      	str	r3, [r4, #0]
 800dc52:	bd38      	pop	{r3, r4, r5, pc}
 800dc54:	20001f9c 	.word	0x20001f9c

0800dc58 <_init>:
 800dc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc5a:	bf00      	nop
 800dc5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc5e:	bc08      	pop	{r3}
 800dc60:	469e      	mov	lr, r3
 800dc62:	4770      	bx	lr

0800dc64 <_fini>:
 800dc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc66:	bf00      	nop
 800dc68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc6a:	bc08      	pop	{r3}
 800dc6c:	469e      	mov	lr, r3
 800dc6e:	4770      	bx	lr
